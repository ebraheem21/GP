
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  00800060  000036bc  00003750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004bf  00800128  00800128  00003818  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000450  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e99  00000000  00000000  00003cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012a1  00000000  00000000  0000ab6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034ff  00000000  00000000  0000be0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001004  00000000  00000000  0000f310  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002302  00000000  00000000  00010314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000067d6  00000000  00000000  00012616  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00018dec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	f6 03       	fmuls	r23, r22
      56:	f8 03       	fmulsu	r23, r16
      58:	fe 03       	fmulsu	r23, r22
      5a:	01 04       	cpc	r0, r1
      5c:	f6 03       	fmuls	r23, r22
      5e:	fb 03       	fmulsu	r23, r19
      60:	f6 03       	fmuls	r23, r22
      62:	f6 03       	fmuls	r23, r22
      64:	f6 03       	fmuls	r23, r22
      66:	f8 03       	fmulsu	r23, r16
      68:	f6 03       	fmuls	r23, r22
      6a:	f6 03       	fmuls	r23, r22
      6c:	f6 03       	fmuls	r23, r22
      6e:	f6 03       	fmuls	r23, r22
      70:	f8 03       	fmulsu	r23, r16
      72:	fb 03       	fmulsu	r23, r19
      74:	f6 03       	fmuls	r23, r22
      76:	f6 03       	fmuls	r23, r22
      78:	f8 03       	fmulsu	r23, r16
      7a:	f6 03       	fmuls	r23, r22
      7c:	f8 03       	fmulsu	r23, r16

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf e5       	ldi	r28, 0x5F	; 95
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e6       	ldi	r26, 0x60	; 96
      8e:	b0 e0       	ldi	r27, 0x00	; 0
      90:	ec eb       	ldi	r30, 0xBC	; 188
      92:	f6 e3       	ldi	r31, 0x36	; 54
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	a8 32       	cpi	r26, 0x28	; 40
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	25 e0       	ldi	r18, 0x05	; 5
      a2:	a8 e2       	ldi	r26, 0x28	; 40
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a7 3e       	cpi	r26, 0xE7	; 231
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 97 14 	call	0x292e	; 0x292e <main>
      b4:	0c 94 5c 1b 	jmp	0x36b8	; 0x36b8 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <ADC_init>:
#include <avr/io.h>
#include "common_macros.h"


void ADC_init(const ADC_ConfigType * Config_Ptr)
{
      bc:	fc 01       	movw	r30, r24
	ADMUX=(ADMUX&0x3F)|((Config_Ptr->ref_volt)<<6); //Set voltage bits in ADMUX register
      be:	47 b1       	in	r20, 0x07	; 7
      c0:	90 81       	ld	r25, Z
      c2:	80 e4       	ldi	r24, 0x40	; 64
      c4:	98 9f       	mul	r25, r24
      c6:	90 01       	movw	r18, r0
      c8:	11 24       	eor	r1, r1
      ca:	94 2f       	mov	r25, r20
      cc:	9f 73       	andi	r25, 0x3F	; 63
      ce:	29 2b       	or	r18, r25
      d0:	27 b9       	out	0x07, r18	; 7
	SET_BIT(ADCSRA,ADEN); //enable ADC
      d2:	96 b1       	in	r25, 0x06	; 6
      d4:	90 68       	ori	r25, 0x80	; 128
      d6:	96 b9       	out	0x06, r25	; 6
	CLEAR_BIT(ADCSRA,ADIF);//disable ADC interrupt
      d8:	96 b1       	in	r25, 0x06	; 6
      da:	9f 7e       	andi	r25, 0xEF	; 239
      dc:	96 b9       	out	0x06, r25	; 6
	ADCSRA = (ADCSRA & 0xF8) | (Config_Ptr->prescaler);//set ADC Clock prescaler for adc
      de:	86 b1       	in	r24, 0x06	; 6
      e0:	91 81       	ldd	r25, Z+1	; 0x01
      e2:	88 7f       	andi	r24, 0xF8	; 248
      e4:	89 2b       	or	r24, r25
      e6:	86 b9       	out	0x06, r24	; 6
      e8:	08 95       	ret

000000ea <ADC_readChannel>:



uint16 ADC_readChannel(uint8 ch_num)
{
	ch_num &= 0x07; // Input channel number must be from 0 to 7
      ea:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; //Clear first 5 bits in the ADMUX (MUX4:0 bits)
      ec:	97 b1       	in	r25, 0x07	; 7
      ee:	90 7e       	andi	r25, 0xE0	; 224
      f0:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | ch_num; // Choose the correct channel by setting the channel number in MUX4:0 bits
      f2:	97 b1       	in	r25, 0x07	; 7
      f4:	89 2b       	or	r24, r25
      f6:	87 b9       	out	0x07, r24	; 7

	SET_BIT(ADCSRA,ADSC);//set ADSC bit to start conversion
      f8:	86 b1       	in	r24, 0x06	; 6
      fa:	80 64       	ori	r24, 0x40	; 64
      fc:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF));//Polling till ADIF is set as an indicator to the end of conversion
      fe:	34 9b       	sbis	0x06, 4	; 6
     100:	fe cf       	rjmp	.-4      	; 0xfe <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF);//Clear ADIF by setting '1' to it
     102:	86 b1       	in	r24, 0x06	; 6
     104:	80 61       	ori	r24, 0x10	; 16
     106:	86 b9       	out	0x06, r24	; 6
	return ADC; //return digital value from adc register
     108:	84 b1       	in	r24, 0x04	; 4
     10a:	95 b1       	in	r25, 0x05	; 5


}
     10c:	08 95       	ret

0000010e <udsReportDtc>:




static void udsReportDtc(uint32 dtc, uint8 *buffer)
{
     10e:	fa 01       	movw	r30, r20
	switch( DEM_ISO14229_1 )
	{
	case DEM_ISO14229_1: // UDS
		buffer[0] = DTC_HIGH_BYTE(dtc);
     110:	80 83       	st	Z, r24
		buffer[1] = DTC_MID_BYTE(dtc);
     112:	71 83       	std	Z+1, r23	; 0x01
		buffer[2] = DTC_LOW_BYTE(dtc);
     114:	62 83       	std	Z+2, r22	; 0x02
     116:	08 95       	ret

00000118 <udsReadDtcInfoSub_0x06_0x10>:
	return responseCode;
}


static Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x06_0x10(const InfoType *RxData, InfoType *TxData)
{
     118:	3f 92       	push	r3
     11a:	4f 92       	push	r4
     11c:	5f 92       	push	r5
     11e:	6f 92       	push	r6
     120:	7f 92       	push	r7
     122:	8f 92       	push	r8
     124:	9f 92       	push	r9
     126:	af 92       	push	r10
     128:	bf 92       	push	r11
     12a:	cf 92       	push	r12
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
     13e:	27 97       	sbiw	r28, 0x07	; 7
     140:	0f b6       	in	r0, 0x3f	; 63
     142:	f8 94       	cli
     144:	de bf       	out	0x3e, r29	; 62
     146:	0f be       	out	0x3f, r0	; 63
     148:	cd bf       	out	0x3d, r28	; 61
     14a:	dc 01       	movw	r26, r24
	Dem_DTCOriginType dtcOrigin;
	uint8 startRecNum;
	uint8 endRecNum;

	// Switch on sub function
	switch (RxData->DataPtr[1]) 	/** @req DCM378 */
     14c:	ed 91       	ld	r30, X+
     14e:	fc 91       	ld	r31, X
     150:	11 97       	sbiw	r26, 0x01	; 1
     152:	91 81       	ldd	r25, Z+1	; 0x01
     154:	96 30       	cpi	r25, 0x06	; 6
     156:	19 f0       	breq	.+6      	; 0x15e <udsReadDtcInfoSub_0x06_0x10+0x46>
     158:	90 31       	cpi	r25, 0x10	; 16
     15a:	61 f0       	breq	.+24     	; 0x174 <udsReadDtcInfoSub_0x06_0x10+0x5c>
     15c:	05 c0       	rjmp	.+10     	; 0x168 <udsReadDtcInfoSub_0x06_0x10+0x50>
	{
		case 0x06:	// reportDTCExtendedDataRecordByDTCNumber
		dtcOrigin = DEM_DTC_ORIGIN_PRIMARY_MEMORY;
     15e:	68 94       	set
     160:	33 24       	eor	r3, r3
     162:	31 f8       	bld	r3, 1
}


static Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x06_0x10(const InfoType *RxData, InfoType *TxData)
{
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
     164:	51 2c       	mov	r5, r1
     166:	0a c0       	rjmp	.+20     	; 0x17c <udsReadDtcInfoSub_0x06_0x10+0x64>
		dtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
		break;

		default:
		responseCode = DCM_E_SUB_FUNCTION_NOT_SUPPORTED;
		dtcOrigin = 0;
     168:	31 2c       	mov	r3, r1
		case 0x10:	// reportMirrorMemoryDTCExtendedDataRecordByDTCNumber
		dtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
		break;

		default:
		responseCode = DCM_E_SUB_FUNCTION_NOT_SUPPORTED;
     16a:	0f 2e       	mov	r0, r31
     16c:	f2 e1       	ldi	r31, 0x12	; 18
     16e:	5f 2e       	mov	r5, r31
     170:	f0 2d       	mov	r31, r0
		dtcOrigin = 0;
		break;
     172:	04 c0       	rjmp	.+8      	; 0x17c <udsReadDtcInfoSub_0x06_0x10+0x64>
		case 0x06:	// reportDTCExtendedDataRecordByDTCNumber
		dtcOrigin = DEM_DTC_ORIGIN_PRIMARY_MEMORY;
		break;

		case 0x10:	// reportMirrorMemoryDTCExtendedDataRecordByDTCNumber
		dtcOrigin = DEM_DTC_ORIGIN_MIRROR_MEMORY;
     174:	68 94       	set
     176:	33 24       	eor	r3, r3
     178:	32 f8       	bld	r3, 2
}


static Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x06_0x10(const InfoType *RxData, InfoType *TxData)
{
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
     17a:	51 2c       	mov	r5, r1
		dtcOrigin = 0;
		break;
	}

	// Switch on record number
	switch (RxData->DataPtr[5])
     17c:	15 81       	ldd	r17, Z+5	; 0x05
     17e:	1f 3f       	cpi	r17, 0xFF	; 255
     180:	31 f4       	brne	.+12     	; 0x18e <udsReadDtcInfoSub_0x06_0x10+0x76>
	{
		case 0xFF:	// Report all Extended Data Records for a particular DTC
		startRecNum = 0x00;
		endRecNum = 0xEF;
     182:	0f 2e       	mov	r0, r31
     184:	ff ee       	ldi	r31, 0xEF	; 239
     186:	4f 2e       	mov	r4, r31
     188:	f0 2d       	mov	r31, r0

	// Switch on record number
	switch (RxData->DataPtr[5])
	{
		case 0xFF:	// Report all Extended Data Records for a particular DTC
		startRecNum = 0x00;
     18a:	10 e0       	ldi	r17, 0x00	; 0
     18c:	01 c0       	rjmp	.+2      	; 0x190 <udsReadDtcInfoSub_0x06_0x10+0x78>
		endRecNum = 0xEF;
		break;

		default:	// Report one specific Extended Data Records for a particular DTC
		startRecNum = RxData->DataPtr[5];
		endRecNum = startRecNum;
     18e:	41 2e       	mov	r4, r17
		break;
	}

	if (responseCode == DCM_E_POSITIVE_RESPONSE) {
     190:	51 10       	cpse	r5, r1
     192:	83 c0       	rjmp	.+262    	; 0x29a <udsReadDtcInfoSub_0x06_0x10+0x182>
     194:	5b 01       	movw	r10, r22
     196:	7d 01       	movw	r14, r26
		Dem_ReturnGetStatusOfDTCType getStatusOfDtcResult;
		uint32 dtc;
		Dem_EventStatusExtendedType statusOfDtc;

		dtc = BYTES_TO_DTC(RxData->DataPtr[2], RxData->DataPtr[3], RxData->DataPtr[4]);
     198:	82 81       	ldd	r24, Z+2	; 0x02
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b0 e0       	ldi	r27, 0x00	; 0
     1a0:	bc 01       	movw	r22, r24
     1a2:	55 27       	eor	r21, r21
     1a4:	44 27       	eor	r20, r20
     1a6:	93 81       	ldd	r25, Z+3	; 0x03
     1a8:	89 2f       	mov	r24, r25
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	ba 2f       	mov	r27, r26
     1b2:	a9 2f       	mov	r26, r25
     1b4:	98 2f       	mov	r25, r24
     1b6:	88 27       	eor	r24, r24
     1b8:	84 2b       	or	r24, r20
     1ba:	95 2b       	or	r25, r21
     1bc:	a6 2b       	or	r26, r22
     1be:	b7 2b       	or	r27, r23
     1c0:	24 81       	ldd	r18, Z+4	; 0x04
     1c2:	ac 01       	movw	r20, r24
     1c4:	bd 01       	movw	r22, r26
     1c6:	42 2b       	or	r20, r18
     1c8:	4c 83       	std	Y+4, r20	; 0x04
     1ca:	5d 83       	std	Y+5, r21	; 0x05
     1cc:	6e 83       	std	Y+6, r22	; 0x06
     1ce:	7f 83       	std	Y+7, r23	; 0x07
		getStatusOfDtcResult = Dem_GetStatusOfDTC(dtc, &statusOfDtc); /** @req DCM295 */ /** @req DCM475 */
     1d0:	ae 01       	movw	r20, r28
     1d2:	4d 5f       	subi	r20, 0xFD	; 253
     1d4:	5f 4f       	sbci	r21, 0xFF	; 255
     1d6:	6c 81       	ldd	r22, Y+4	; 0x04
     1d8:	7d 81       	ldd	r23, Y+5	; 0x05
     1da:	8e 81       	ldd	r24, Y+6	; 0x06
     1dc:	9f 81       	ldd	r25, Y+7	; 0x07
     1de:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <Dem_GetStatusOfDTC>
		if (getStatusOfDtcResult == DEM_STATUS_OK) {
     1e2:	81 11       	cpse	r24, r1
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <udsReadDtcInfoSub_0x06_0x10+0x17a>
			uint8 recNum;
			uint16 recLength;
			uint16 txIndex = 6;

			/** @req DCM297 */ /** @req DCM474 */ /** @req DCM386 */
			TxData->DataPtr[1] = RxData->DataPtr[1];			// Sub function
     1e6:	d5 01       	movw	r26, r10
     1e8:	2d 91       	ld	r18, X+
     1ea:	3c 91       	ld	r19, X
     1ec:	f7 01       	movw	r30, r14
     1ee:	a0 81       	ld	r26, Z
     1f0:	b1 81       	ldd	r27, Z+1	; 0x01
     1f2:	11 96       	adiw	r26, 0x01	; 1
     1f4:	8c 91       	ld	r24, X
     1f6:	d9 01       	movw	r26, r18
     1f8:	11 96       	adiw	r26, 0x01	; 1
     1fa:	8c 93       	st	X, r24
			udsReportDtc(dtc, &TxData->DataPtr[2]);
     1fc:	f5 01       	movw	r30, r10
     1fe:	40 81       	ld	r20, Z
     200:	51 81       	ldd	r21, Z+1	; 0x01
     202:	4e 5f       	subi	r20, 0xFE	; 254
     204:	5f 4f       	sbci	r21, 0xFF	; 255
     206:	6c 81       	ldd	r22, Y+4	; 0x04
     208:	7d 81       	ldd	r23, Y+5	; 0x05
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	9f 81       	ldd	r25, Y+7	; 0x07
     20e:	0e 94 87 00 	call	0x10e	; 0x10e <udsReportDtc>
			TxData->DataPtr[5] = statusOfDtc;							// DTC status
     212:	d5 01       	movw	r26, r10
     214:	ed 91       	ld	r30, X+
     216:	fc 91       	ld	r31, X
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	85 83       	std	Z+5, r24	; 0x05
		getStatusOfDtcResult = Dem_GetStatusOfDTC(dtc, &statusOfDtc); /** @req DCM295 */ /** @req DCM475 */
		if (getStatusOfDtcResult == DEM_STATUS_OK) {
			Dem_ReturnGetExtendedDataRecordByDTCType getExtendedDataRecordByDtcResult;
			uint8 recNum;
			uint16 recLength;
			uint16 txIndex = 6;
     21c:	0f 2e       	mov	r0, r31
     21e:	f6 e0       	ldi	r31, 0x06	; 6
     220:	8f 2e       	mov	r8, r31
     222:	91 2c       	mov	r9, r1
     224:	f0 2d       	mov	r31, r0

			/** @req DCM297 */ /** @req DCM474 */ /** @req DCM386 */
			TxData->DataPtr[1] = RxData->DataPtr[1];			// Sub function
			udsReportDtc(dtc, &TxData->DataPtr[2]);
			TxData->DataPtr[5] = statusOfDtc;							// DTC status
			for (recNum = startRecNum; recNum <= endRecNum; recNum++) {
     226:	2f c0       	rjmp	.+94     	; 0x286 <udsReadDtcInfoSub_0x06_0x10+0x16e>
				recLength = TxData->DataLength - (txIndex + 1);	// Calculate what's left in buffer
     228:	f5 01       	movw	r30, r10
     22a:	82 81       	ldd	r24, Z+2	; 0x02
     22c:	93 81       	ldd	r25, Z+3	; 0x03
     22e:	88 19       	sub	r24, r8
     230:	99 09       	sbc	r25, r9
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	9a 83       	std	Y+2, r25	; 0x02
     236:	89 83       	std	Y+1, r24	; 0x01
				/** @req DCM296 */ /** @req DCM476 */ /** @req DCM382 */
				getExtendedDataRecordByDtcResult = Dem_GetExtendedDataRecordByDTC(dtc, DEM_DTC_KIND_ALL_DTCS, dtcOrigin, recNum, &TxData->DataPtr[txIndex+1], &recLength);
     238:	e0 80       	ld	r14, Z
     23a:	f1 80       	ldd	r15, Z+1	; 0x01
     23c:	34 01       	movw	r6, r8
     23e:	ff ef       	ldi	r31, 0xFF	; 255
     240:	6f 1a       	sub	r6, r31
     242:	7f 0a       	sbc	r7, r31
     244:	e6 0c       	add	r14, r6
     246:	f7 1c       	adc	r15, r7
     248:	ae 01       	movw	r20, r28
     24a:	4f 5f       	subi	r20, 0xFF	; 255
     24c:	5f 4f       	sbci	r21, 0xFF	; 255
     24e:	6a 01       	movw	r12, r20
     250:	01 2f       	mov	r16, r17
     252:	23 2d       	mov	r18, r3
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	6c 81       	ldd	r22, Y+4	; 0x04
     258:	7d 81       	ldd	r23, Y+5	; 0x05
     25a:	8e 81       	ldd	r24, Y+6	; 0x06
     25c:	9f 81       	ldd	r25, Y+7	; 0x07
     25e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <Dem_GetExtendedDataRecordByDTC>
				if (getExtendedDataRecordByDtcResult == DEM_RECORD_OK && recLength > 0) {
     262:	81 11       	cpse	r24, r1
     264:	0f c0       	rjmp	.+30     	; 0x284 <udsReadDtcInfoSub_0x06_0x10+0x16c>
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	89 2b       	or	r24, r25
     26c:	59 f0       	breq	.+22     	; 0x284 <udsReadDtcInfoSub_0x06_0x10+0x16c>
					TxData->DataPtr[txIndex++] = recNum;
     26e:	d5 01       	movw	r26, r10
     270:	8d 91       	ld	r24, X+
     272:	9c 91       	ld	r25, X
     274:	fc 01       	movw	r30, r24
     276:	e8 0d       	add	r30, r8
     278:	f9 1d       	adc	r31, r9
     27a:	10 83       	st	Z, r17
					/* Instead of calling Dem_GetSizeOfExtendedDataRecordByDTC() the result from Dem_GetExtendedDataRecordByDTC() is used */
					/** @req DCM478 */ /** @req DCM479 */ /** @req DCM480 */
					txIndex += recLength;
     27c:	89 80       	ldd	r8, Y+1	; 0x01
     27e:	9a 80       	ldd	r9, Y+2	; 0x02
     280:	86 0c       	add	r8, r6
     282:	97 1c       	adc	r9, r7

			/** @req DCM297 */ /** @req DCM474 */ /** @req DCM386 */
			TxData->DataPtr[1] = RxData->DataPtr[1];			// Sub function
			udsReportDtc(dtc, &TxData->DataPtr[2]);
			TxData->DataPtr[5] = statusOfDtc;							// DTC status
			for (recNum = startRecNum; recNum <= endRecNum; recNum++) {
     284:	1f 5f       	subi	r17, 0xFF	; 255
     286:	41 16       	cp	r4, r17
     288:	78 f6       	brcc	.-98     	; 0x228 <udsReadDtcInfoSub_0x06_0x10+0x110>
				}
				else {
					// TODO: What to do here?
				}
			}
			TxData->DataLength = txIndex;
     28a:	f5 01       	movw	r30, r10
     28c:	93 82       	std	Z+3, r9	; 0x03
     28e:	82 82       	std	Z+2, r8	; 0x02
     290:	04 c0       	rjmp	.+8      	; 0x29a <udsReadDtcInfoSub_0x06_0x10+0x182>
		}
		else {
			responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     292:	0f 2e       	mov	r0, r31
     294:	f1 e3       	ldi	r31, 0x31	; 49
     296:	5f 2e       	mov	r5, r31
     298:	f0 2d       	mov	r31, r0
		}
	}

	return responseCode;
}
     29a:	85 2d       	mov	r24, r5
     29c:	27 96       	adiw	r28, 0x07	; 7
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	f8 94       	cli
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	ff 90       	pop	r15
     2b2:	ef 90       	pop	r14
     2b4:	df 90       	pop	r13
     2b6:	cf 90       	pop	r12
     2b8:	bf 90       	pop	r11
     2ba:	af 90       	pop	r10
     2bc:	9f 90       	pop	r9
     2be:	8f 90       	pop	r8
     2c0:	7f 90       	pop	r7
     2c2:	6f 90       	pop	r6
     2c4:	5f 90       	pop	r5
     2c6:	4f 90       	pop	r4
     2c8:	3f 90       	pop	r3
     2ca:	08 95       	ret

000002cc <udsReadDtcInfoSub_0x03>:
	return responseCode;
}


static Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x03(const InfoType *RxData, InfoType *TxData)
{
     2cc:	af 92       	push	r10
     2ce:	bf 92       	push	r11
     2d0:	df 92       	push	r13
     2d2:	ef 92       	push	r14
     2d4:	ff 92       	push	r15
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	27 97       	sbiw	r28, 0x07	; 7
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	7b 01       	movw	r14, r22
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;

	uint16 numFilteredRecords = 0;
     2f0:	1a 82       	std	Y+2, r1	; 0x02
     2f2:	19 82       	std	Y+1, r1	; 0x01
	uint32 dtc = 0;
     2f4:	1b 82       	std	Y+3, r1	; 0x03
     2f6:	1c 82       	std	Y+4, r1	; 0x04
     2f8:	1d 82       	std	Y+5, r1	; 0x05
     2fa:	1e 82       	std	Y+6, r1	; 0x06
	uint8 recordNumber = 0;
     2fc:	1f 82       	std	Y+7, r1	; 0x07
	uint16 nofBytesCopied = 0;
	(void)RxData;
	TxData->DataPtr[0] = ( (DEM_FILTER_ACCEPTED == Dem_SetDTCFilterForRecords(&numFilteredRecords)) &&
     2fe:	db 01       	movw	r26, r22
     300:	0d 91       	ld	r16, X+
     302:	1c 91       	ld	r17, X
     304:	ce 01       	movw	r24, r28
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	0e 94 98 13 	call	0x2730	; 0x2730 <Dem_SetDTCFilterForRecords>
     30c:	81 11       	cpse	r24, r1
     30e:	0f c0       	rjmp	.+30     	; 0x32e <udsReadDtcInfoSub_0x03+0x62>
	( (SID_LEN + SF_LEN + (DTC_LEN + FF_REC_NUM_LEN)*numFilteredRecords) <= TxData->DataLength ));    // subid
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	9a 81       	ldd	r25, Y+2	; 0x02
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	02 96       	adiw	r24, 0x02	; 2
     31e:	f7 01       	movw	r30, r14
     320:	22 81       	ldd	r18, Z+2	; 0x02
     322:	33 81       	ldd	r19, Z+3	; 0x03
	uint16 numFilteredRecords = 0;
	uint32 dtc = 0;
	uint8 recordNumber = 0;
	uint16 nofBytesCopied = 0;
	(void)RxData;
	TxData->DataPtr[0] = ( (DEM_FILTER_ACCEPTED == Dem_SetDTCFilterForRecords(&numFilteredRecords)) &&
     324:	28 17       	cp	r18, r24
     326:	39 07       	cpc	r19, r25
     328:	20 f4       	brcc	.+8      	; 0x332 <udsReadDtcInfoSub_0x03+0x66>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	03 c0       	rjmp	.+6      	; 0x334 <udsReadDtcInfoSub_0x03+0x68>
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	01 c0       	rjmp	.+2      	; 0x334 <udsReadDtcInfoSub_0x03+0x68>
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	d8 01       	movw	r26, r16
     336:	8c 93       	st	X, r24
	( (SID_LEN + SF_LEN + (DTC_LEN + FF_REC_NUM_LEN)*numFilteredRecords) <= TxData->DataLength ));    // subid
	/* @req DCM298 */
	if( (DEM_FILTER_ACCEPTED == Dem_SetDTCFilterForRecords(&numFilteredRecords)) ) {
     338:	ce 01       	movw	r24, r28
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	0e 94 98 13 	call	0x2730	; 0x2730 <Dem_SetDTCFilterForRecords>
     340:	88 23       	and	r24, r24
     342:	f1 f1       	breq	.+124    	; 0x3c0 <udsReadDtcInfoSub_0x03+0xf4>
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;

	uint16 numFilteredRecords = 0;
	uint32 dtc = 0;
	uint8 recordNumber = 0;
	uint16 nofBytesCopied = 0;
     344:	00 e0       	ldi	r16, 0x00	; 0
     346:	10 e0       	ldi	r17, 0x00	; 0
	        } else {
	            responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
	        }
	    }
	} else {
	responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     348:	0f 2e       	mov	r0, r31
     34a:	f1 e3       	ldi	r31, 0x31	; 49
     34c:	df 2e       	mov	r13, r31
     34e:	f0 2d       	mov	r31, r0
     350:	44 c0       	rjmp	.+136    	; 0x3da <udsReadDtcInfoSub_0x03+0x10e>
	if( (DEM_FILTER_ACCEPTED == Dem_SetDTCFilterForRecords(&numFilteredRecords)) ) {
				
	   for( uint16 i = 0; (i < numFilteredRecords) && (DCM_E_POSITIVE_RESPONSE == responseCode); i++ ) {
	    	/* @req DCM299 */
			
	        if( DEM_FILTERED_OK == Dem_GetNextFilteredRecord(&dtc, &recordNumber) ) {
     352:	be 01       	movw	r22, r28
     354:	69 5f       	subi	r22, 0xF9	; 249
     356:	7f 4f       	sbci	r23, 0xFF	; 255
     358:	ce 01       	movw	r24, r28
     35a:	03 96       	adiw	r24, 0x03	; 3
     35c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <Dem_GetNextFilteredRecord>
     360:	81 11       	cpse	r24, r1
     362:	26 c0       	rjmp	.+76     	; 0x3b0 <udsReadDtcInfoSub_0x03+0xe4>
	        	/* @req DCM300 */
	            TxData->DataPtr[SID_LEN + SF_LEN + nofBytesCopied++] = DTC_HIGH_BYTE(dtc);
     364:	d7 01       	movw	r26, r14
     366:	ed 91       	ld	r30, X+
     368:	fc 91       	ld	r31, X
     36a:	11 97       	sbiw	r26, 0x01	; 1
     36c:	c8 01       	movw	r24, r16
     36e:	02 96       	adiw	r24, 0x02	; 2
     370:	e8 0f       	add	r30, r24
     372:	f9 1f       	adc	r31, r25
     374:	8d 81       	ldd	r24, Y+5	; 0x05
     376:	80 83       	st	Z, r24
	            TxData->DataPtr[SID_LEN + SF_LEN + nofBytesCopied++] = DTC_MID_BYTE(dtc);
     378:	ed 91       	ld	r30, X+
     37a:	fc 91       	ld	r31, X
     37c:	11 97       	sbiw	r26, 0x01	; 1
     37e:	c8 01       	movw	r24, r16
     380:	03 96       	adiw	r24, 0x03	; 3
     382:	e8 0f       	add	r30, r24
     384:	f9 1f       	adc	r31, r25
     386:	8c 81       	ldd	r24, Y+4	; 0x04
     388:	80 83       	st	Z, r24
	            TxData->DataPtr[SID_LEN + SF_LEN + nofBytesCopied++] = DTC_LOW_BYTE(dtc);
     38a:	ed 91       	ld	r30, X+
     38c:	fc 91       	ld	r31, X
     38e:	11 97       	sbiw	r26, 0x01	; 1
     390:	c8 01       	movw	r24, r16
     392:	04 96       	adiw	r24, 0x04	; 4
     394:	e8 0f       	add	r30, r24
     396:	f9 1f       	adc	r31, r25
     398:	2b 81       	ldd	r18, Y+3	; 0x03
     39a:	20 83       	st	Z, r18
	            TxData->DataPtr[SID_LEN + SF_LEN + nofBytesCopied++] = recordNumber;
     39c:	ed 91       	ld	r30, X+
     39e:	fc 91       	ld	r31, X
     3a0:	0b 5f       	subi	r16, 0xFB	; 251
     3a2:	1f 4f       	sbci	r17, 0xFF	; 255
     3a4:	e0 0f       	add	r30, r16
     3a6:	f1 1f       	adc	r31, r17
     3a8:	2f 81       	ldd	r18, Y+7	; 0x07
     3aa:	20 83       	st	Z, r18
     3ac:	8c 01       	movw	r16, r24
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <udsReadDtcInfoSub_0x03+0xec>
	        } else {
	            responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     3b0:	0f 2e       	mov	r0, r31
     3b2:	f1 e3       	ldi	r31, 0x31	; 49
     3b4:	df 2e       	mov	r13, r31
     3b6:	f0 2d       	mov	r31, r0
	TxData->DataPtr[0] = ( (DEM_FILTER_ACCEPTED == Dem_SetDTCFilterForRecords(&numFilteredRecords)) &&
	( (SID_LEN + SF_LEN + (DTC_LEN + FF_REC_NUM_LEN)*numFilteredRecords) <= TxData->DataLength ));    // subid
	/* @req DCM298 */
	if( (DEM_FILTER_ACCEPTED == Dem_SetDTCFilterForRecords(&numFilteredRecords)) ) {
				
	   for( uint16 i = 0; (i < numFilteredRecords) && (DCM_E_POSITIVE_RESPONSE == responseCode); i++ ) {
     3b8:	bf ef       	ldi	r27, 0xFF	; 255
     3ba:	ab 1a       	sub	r10, r27
     3bc:	bb 0a       	sbc	r11, r27
     3be:	05 c0       	rjmp	.+10     	; 0x3ca <udsReadDtcInfoSub_0x03+0xfe>
     3c0:	a1 2c       	mov	r10, r1
     3c2:	b1 2c       	mov	r11, r1
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	10 e0       	ldi	r17, 0x00	; 0
     3c8:	d1 2c       	mov	r13, r1
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	9a 81       	ldd	r25, Y+2	; 0x02
     3ce:	a8 16       	cp	r10, r24
     3d0:	b9 06       	cpc	r11, r25
     3d2:	18 f4       	brcc	.+6      	; 0x3da <udsReadDtcInfoSub_0x03+0x10e>
     3d4:	dd 20       	and	r13, r13
     3d6:	09 f4       	brne	.+2      	; 0x3da <udsReadDtcInfoSub_0x03+0x10e>
     3d8:	bc cf       	rjmp	.-136    	; 0x352 <udsReadDtcInfoSub_0x03+0x86>
	    }
	} else {
	responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
	  }

	TxData->DataPtr[0] = 0x59;    // Positive response
     3da:	d7 01       	movw	r26, r14
     3dc:	ed 91       	ld	r30, X+
     3de:	fc 91       	ld	r31, X
     3e0:	11 97       	sbiw	r26, 0x01	; 1
     3e2:	89 e5       	ldi	r24, 0x59	; 89
     3e4:	80 83       	st	Z, r24
    TxData->DataPtr[1] = 0x03;    // subid
     3e6:	ed 91       	ld	r30, X+
     3e8:	fc 91       	ld	r31, X
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	81 83       	std	Z+1, r24	; 0x01
    TxData->DataLength = SID_LEN + SF_LEN + nofBytesCopied;
     3f0:	0e 5f       	subi	r16, 0xFE	; 254
     3f2:	1f 4f       	sbci	r17, 0xFF	; 255
     3f4:	13 96       	adiw	r26, 0x03	; 3
     3f6:	1c 93       	st	X, r17
     3f8:	0e 93       	st	-X, r16
     3fa:	12 97       	sbiw	r26, 0x02	; 2

	return responseCode;
}
     3fc:	8d 2d       	mov	r24, r13
     3fe:	27 96       	adiw	r28, 0x07	; 7
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	bf 90       	pop	r11
     41a:	af 90       	pop	r10
     41c:	08 95       	ret

0000041e <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15>:
}



Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15(const InfoType *RxData, InfoType *TxData)
{
     41e:	af 92       	push	r10
     420:	bf 92       	push	r11
     422:	cf 92       	push	r12
     424:	df 92       	push	r13
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x16>
     434:	00 d0       	rcall	.+0      	; 0x436 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x18>
     436:	00 d0       	rcall	.+0      	; 0x438 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x1a>
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	8c 01       	movw	r16, r24
     43e:	7b 01       	movw	r14, r22
	Dem_ReturnSetDTCFilterType setDtcFilterResult;



	// Setup the DTC filter
	switch (RxData->DataPtr[1]) 	/** @req DCM378 */
     440:	dc 01       	movw	r26, r24
     442:	ed 91       	ld	r30, X+
     444:	fc 91       	ld	r31, X
     446:	81 81       	ldd	r24, Z+1	; 0x01
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	19 f0       	breq	.+6      	; 0x452 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x34>
     44c:	8a 30       	cpi	r24, 0x0A	; 10
     44e:	29 f0       	breq	.+10     	; 0x45a <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x3c>
     450:	08 c0       	rjmp	.+16     	; 0x462 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x44>
	{
	case 0x02:	// reportDTCByStatusMask
		setDtcFilterResult = Dem_SetDTCFilter(RxData->DataPtr[2]);
     452:	82 81       	ldd	r24, Z+2	; 0x02
     454:	0e 94 cc 11 	call	0x2398	; 0x2398 <Dem_SetDTCFilter>
		break;
     458:	05 c0       	rjmp	.+10     	; 0x464 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x46>
	case 0x0A:	// reportSupportedDTC
		setDtcFilterResult = Dem_SetDTCFilter(DEM_DTC_STATUS_MASK_ALL);
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	0e 94 cc 11 	call	0x2398	; 0x2398 <Dem_SetDTCFilter>
		break;
     460:	01 c0       	rjmp	.+2      	; 0x464 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x46>

	default:
		setDtcFilterResult = DEM_WRONG_FILTER;
     462:	81 e0       	ldi	r24, 0x01	; 1
		break;
	}

	if (setDtcFilterResult == DEM_FILTER_ACCEPTED) {
     464:	81 11       	cpse	r24, r1
     466:	55 c0       	rjmp	.+170    	; 0x512 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xf4>
		uint8 dtcStatusMask;
		//lint --e(826)	PC-Lint exception - Suspicious pointer conversion
		//lint --e(927)	PC-Lint exception - Pointer to pointer cast
		TxDataType *txData = (TxDataType*)TxData->DataPtr;
     468:	f7 01       	movw	r30, r14
     46a:	a0 80       	ld	r10, Z
     46c:	b1 80       	ldd	r11, Z+1	; 0x01
		Dem_EventStatusExtendedType dtcStatus;
		uint16 nrOfDtcs = 0;
		Std_ReturnType result;

		/** @req DCM377 */
		result = Dem_GetDTCStatusAvailabilityMask(&dtcStatusMask);
     46e:	ce 01       	movw	r24, r28
     470:	06 96       	adiw	r24, 0x06	; 6
     472:	0e 94 c7 11 	call	0x238e	; 0x238e <Dem_GetDTCStatusAvailabilityMask>
		if (result != E_OK) {
     476:	81 11       	cpse	r24, r1
			dtcStatusMask = 0;
     478:	1e 82       	std	Y+6, r1	; 0x06
		}

		// Create positive response (ISO 14229-1 table 252)
		txData-> SID = 0x59;
     47a:	89 e5       	ldi	r24, 0x59	; 89
     47c:	d5 01       	movw	r26, r10
     47e:	8c 93       	st	X, r24
		txData->reportType = RxData->DataPtr[1];
     480:	d8 01       	movw	r26, r16
     482:	ed 91       	ld	r30, X+
     484:	fc 91       	ld	r31, X
     486:	81 81       	ldd	r24, Z+1	; 0x01
     488:	f5 01       	movw	r30, r10
     48a:	81 83       	std	Z+1, r24	; 0x01
		txData->dtcStatusAvailabilityMask = dtcStatusMask;
     48c:	8e 81       	ldd	r24, Y+6	; 0x06
     48e:	82 83       	std	Z+2, r24	; 0x02

		if (dtcStatusMask != 0x00) {	/** @req DCM008 */
     490:	88 23       	and	r24, r24
     492:	71 f1       	breq	.+92     	; 0x4f0 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xd2>
			getNextFilteredDtcResult = Dem_GetNextFilteredDTC(&dtc, &dtcStatus);
     494:	be 01       	movw	r22, r28
     496:	6b 5f       	subi	r22, 0xFB	; 251
     498:	7f 4f       	sbci	r23, 0xFF	; 255
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	0e 94 10 12 	call	0x2420	; 0x2420 <Dem_GetNextFilteredDTC>
		//lint --e(927)	PC-Lint exception - Pointer to pointer cast
		TxDataType *txData = (TxDataType*)TxData->DataPtr;
		Dem_ReturnGetNextFilteredDTCType getNextFilteredDtcResult;
		uint32 dtc;
		Dem_EventStatusExtendedType dtcStatus;
		uint16 nrOfDtcs = 0;
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	10 e0       	ldi	r17, 0x00	; 0

		if (dtcStatusMask != 0x00) {	/** @req DCM008 */
			getNextFilteredDtcResult = Dem_GetNextFilteredDTC(&dtc, &dtcStatus);


			while (getNextFilteredDtcResult == DEM_FILTERED_OK) {
     4a6:	1e c0       	rjmp	.+60     	; 0x4e4 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xc6>
				udsReportDtc(dtc, (uint8*)&txData->dtcAndStatusRecord[nrOfDtcs]);
     4a8:	68 01       	movw	r12, r16
     4aa:	cc 0c       	add	r12, r12
     4ac:	dd 1c       	adc	r13, r13
     4ae:	cc 0c       	add	r12, r12
     4b0:	dd 1c       	adc	r13, r13
     4b2:	a6 01       	movw	r20, r12
     4b4:	4d 5f       	subi	r20, 0xFD	; 253
     4b6:	5f 4f       	sbci	r21, 0xFF	; 255
     4b8:	4a 0d       	add	r20, r10
     4ba:	5b 1d       	adc	r21, r11
     4bc:	69 81       	ldd	r22, Y+1	; 0x01
     4be:	7a 81       	ldd	r23, Y+2	; 0x02
     4c0:	8b 81       	ldd	r24, Y+3	; 0x03
     4c2:	9c 81       	ldd	r25, Y+4	; 0x04
     4c4:	0e 94 87 00 	call	0x10e	; 0x10e <udsReportDtc>
				txData->dtcAndStatusRecord[nrOfDtcs].statusOfDtc = dtcStatus;
     4c8:	f5 01       	movw	r30, r10
     4ca:	ec 0d       	add	r30, r12
     4cc:	fd 1d       	adc	r31, r13
     4ce:	8d 81       	ldd	r24, Y+5	; 0x05
     4d0:	86 83       	std	Z+6, r24	; 0x06
				nrOfDtcs++;
     4d2:	0f 5f       	subi	r16, 0xFF	; 255
     4d4:	1f 4f       	sbci	r17, 0xFF	; 255
				getNextFilteredDtcResult = Dem_GetNextFilteredDTC(&dtc, &dtcStatus);
     4d6:	be 01       	movw	r22, r28
     4d8:	6b 5f       	subi	r22, 0xFB	; 251
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 10 12 	call	0x2420	; 0x2420 <Dem_GetNextFilteredDTC>

		if (dtcStatusMask != 0x00) {	/** @req DCM008 */
			getNextFilteredDtcResult = Dem_GetNextFilteredDTC(&dtc, &dtcStatus);


			while (getNextFilteredDtcResult == DEM_FILTERED_OK) {
     4e4:	88 23       	and	r24, r24
     4e6:	01 f3       	breq	.-64     	; 0x4a8 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0x8a>
				txData->dtcAndStatusRecord[nrOfDtcs].statusOfDtc = dtcStatus;
				nrOfDtcs++;
				getNextFilteredDtcResult = Dem_GetNextFilteredDTC(&dtc, &dtcStatus);
			}

			if (getNextFilteredDtcResult != DEM_FILTERED_NO_MATCHING_DTC) {
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	31 f4       	brne	.+12     	; 0x4f8 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xda>



Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15(const InfoType *RxData, InfoType *TxData)
{
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	05 c0       	rjmp	.+10     	; 0x4fa <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xdc>
		//lint --e(927)	PC-Lint exception - Pointer to pointer cast
		TxDataType *txData = (TxDataType*)TxData->DataPtr;
		Dem_ReturnGetNextFilteredDTCType getNextFilteredDtcResult;
		uint32 dtc;
		Dem_EventStatusExtendedType dtcStatus;
		uint16 nrOfDtcs = 0;
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0



Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15(const InfoType *RxData, InfoType *TxData)
{
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	01 c0       	rjmp	.+2      	; 0x4fa <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xdc>
				nrOfDtcs++;
				getNextFilteredDtcResult = Dem_GetNextFilteredDTC(&dtc, &dtcStatus);
			}

			if (getNextFilteredDtcResult != DEM_FILTERED_NO_MATCHING_DTC) {
				responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     4f8:	81 e3       	ldi	r24, 0x31	; 49
			}
		}
		TxData->DataLength = (LengthType)(3 + (nrOfDtcs * sizeof(dtcAndStatusRecordType)));
     4fa:	00 0f       	add	r16, r16
     4fc:	11 1f       	adc	r17, r17
     4fe:	00 0f       	add	r16, r16
     500:	11 1f       	adc	r17, r17
     502:	0d 5f       	subi	r16, 0xFD	; 253
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	d7 01       	movw	r26, r14
     508:	13 96       	adiw	r26, 0x03	; 3
     50a:	1c 93       	st	X, r17
     50c:	0e 93       	st	-X, r16
     50e:	12 97       	sbiw	r26, 0x02	; 2
     510:	01 c0       	rjmp	.+2      	; 0x514 <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15+0xf6>
	}
	else {
		responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     512:	81 e3       	ldi	r24, 0x31	; 49
	}

	return responseCode;
}
     514:	26 96       	adiw	r28, 0x06	; 6
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	df 90       	pop	r13
     52e:	cf 90       	pop	r12
     530:	bf 90       	pop	r11
     532:	af 90       	pop	r10
     534:	08 95       	ret

00000536 <udsReadDtcInfoSub_0x04>:


// PC-Lint (715 etc): Remove errors until function is filled.
//lint -e{715, 838, 818}		Symbol not referenced, responseCode not used, txData should be const
Dcm_NegativeResponseCodeType udsReadDtcInfoSub_0x04(const InfoType *RxData, InfoType *TxData)
{
     536:	3f 92       	push	r3
     538:	4f 92       	push	r4
     53a:	5f 92       	push	r5
     53c:	6f 92       	push	r6
     53e:	7f 92       	push	r7
     540:	8f 92       	push	r8
     542:	9f 92       	push	r9
     544:	af 92       	push	r10
     546:	bf 92       	push	r11
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	00 d0       	rcall	.+0      	; 0x55a <udsReadDtcInfoSub_0x04+0x24>
     55a:	00 d0       	rcall	.+0      	; 0x55c <udsReadDtcInfoSub_0x04+0x26>
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
     560:	9c 83       	std	Y+4, r25	; 0x04
     562:	8b 83       	std	Y+3, r24	; 0x03
     564:	5b 01       	movw	r10, r22
	// 1. Only consider Negative Response 0x10

	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
	uint32 DtcNumber = 0;
	uint8 RecordNumber = 0;
	uint8 SizeOfTxBuf = TxData->DataLength;
     566:	db 01       	movw	r26, r22
     568:	12 96       	adiw	r26, 0x02	; 2
     56a:	3c 90       	ld	r3, X
	uint8 AvailableBufSize = 0;
     56c:	19 82       	std	Y+1, r1	; 0x01
	uint16 index = 0;
	uint16 EventIndex =0;
	uint16 FFIdNumber = 0;
	Dem_ReturnGetFreezeFrameDataByDTCType GetFFbyDtcReturnCode = DEM_GET_FFDATABYDTC_WRONG_DTC;
	Dem_ReturnGetStatusOfDTCType GetStatusOfDtc = DEM_STATUS_OK;
	Dem_EventStatusExtendedType DtcStatus = 0;
     56e:	1a 82       	std	Y+2, r1	; 0x02
	Dem_EventParameterType *pEventParaTemp = NULL;

	// Now let's assume DTC has 3 bytes.
	DtcNumber = (((uint32)RxData->DataPtr[2])<<16) +
     570:	dc 01       	movw	r26, r24
     572:	ed 91       	ld	r30, X+
     574:	fc 91       	ld	r31, X
     576:	42 80       	ldd	r4, Z+2	; 0x02
     578:	51 2c       	mov	r5, r1
     57a:	61 2c       	mov	r6, r1
     57c:	71 2c       	mov	r7, r1
     57e:	32 01       	movw	r6, r4
     580:	55 24       	eor	r5, r5
     582:	44 24       	eor	r4, r4
				(((uint32)RxData->DataPtr[3])<<8) +
     584:	83 81       	ldd	r24, Z+3	; 0x03
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	a0 e0       	ldi	r26, 0x00	; 0
     58a:	b0 e0       	ldi	r27, 0x00	; 0
     58c:	ba 2f       	mov	r27, r26
     58e:	a9 2f       	mov	r26, r25
     590:	98 2f       	mov	r25, r24
     592:	88 27       	eor	r24, r24
	Dem_ReturnGetStatusOfDTCType GetStatusOfDtc = DEM_STATUS_OK;
	Dem_EventStatusExtendedType DtcStatus = 0;
	Dem_EventParameterType *pEventParaTemp = NULL;

	// Now let's assume DTC has 3 bytes.
	DtcNumber = (((uint32)RxData->DataPtr[2])<<16) +
     594:	48 0e       	add	r4, r24
     596:	59 1e       	adc	r5, r25
     598:	6a 1e       	adc	r6, r26
     59a:	7b 1e       	adc	r7, r27
				(((uint32)RxData->DataPtr[3])<<8) +
				((uint32)RxData->DataPtr[4]);
     59c:	84 81       	ldd	r24, Z+4	; 0x04
	Dem_ReturnGetStatusOfDTCType GetStatusOfDtc = DEM_STATUS_OK;
	Dem_EventStatusExtendedType DtcStatus = 0;
	Dem_EventParameterType *pEventParaTemp = NULL;

	// Now let's assume DTC has 3 bytes.
	DtcNumber = (((uint32)RxData->DataPtr[2])<<16) +
     59e:	48 0e       	add	r4, r24
     5a0:	51 1c       	adc	r5, r1
     5a2:	61 1c       	adc	r6, r1
     5a4:	71 1c       	adc	r7, r1
				(((uint32)RxData->DataPtr[3])<<8) +
				((uint32)RxData->DataPtr[4]);

	RecordNumber = RxData->DataPtr[5];
     5a6:	d5 80       	ldd	r13, Z+5	; 0x05
	uint8 AvailableBufSize = 0;
	uint8 RecNumOffset = 0;
	uint16 index = 0;
	uint16 EventIndex =0;
	uint16 FFIdNumber = 0;
	Dem_ReturnGetFreezeFrameDataByDTCType GetFFbyDtcReturnCode = DEM_GET_FFDATABYDTC_WRONG_DTC;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
	uint8 SizeOfTxBuf = TxData->DataLength;
	uint8 AvailableBufSize = 0;
	uint8 RecNumOffset = 0;
	uint16 index = 0;
	uint16 EventIndex =0;
	uint16 FFIdNumber = 0;
     5aa:	e1 2c       	mov	r14, r1
     5ac:	f1 2c       	mov	r15, r1
				(((uint32)RxData->DataPtr[3])<<8) +
				((uint32)RxData->DataPtr[4]);

	RecordNumber = RxData->DataPtr[5];

	for (EventIndex = 0; DEM_Config.ConfigSet->EventParameter[EventIndex].Arc_EOL != TRUE; EventIndex++){
     5ae:	81 2c       	mov	r8, r1
     5b0:	91 2c       	mov	r9, r1
	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
	uint32 DtcNumber = 0;
	uint8 RecordNumber = 0;
	uint8 SizeOfTxBuf = TxData->DataLength;
	uint8 AvailableBufSize = 0;
	uint8 RecNumOffset = 0;
     5b2:	c1 2c       	mov	r12, r1
				(((uint32)RxData->DataPtr[3])<<8) +
				((uint32)RxData->DataPtr[4]);

	RecordNumber = RxData->DataPtr[5];

	for (EventIndex = 0; DEM_Config.ConfigSet->EventParameter[EventIndex].Arc_EOL != TRUE; EventIndex++){
     5b4:	87 c0       	rjmp	.+270    	; 0x6c4 <udsReadDtcInfoSub_0x04+0x18e>
		// search each event linked to this DTC
		if( (NULL != DEM_Config.ConfigSet->EventParameter[EventIndex].DTCClassRef) &&
     5b6:	1b 96       	adiw	r26, 0x0b	; 11
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	1c 97       	sbiw	r26, 0x0c	; 12
     5be:	30 97       	sbiw	r30, 0x00	; 0
     5c0:	61 f0       	breq	.+24     	; 0x5da <udsReadDtcInfoSub_0x04+0xa4>
			(DEM_Config.ConfigSet->EventParameter[EventIndex].DTCClassRef->DTC == DtcNumber)){
     5c2:	40 81       	ld	r20, Z
     5c4:	51 81       	ldd	r21, Z+1	; 0x01
     5c6:	62 81       	ldd	r22, Z+2	; 0x02
     5c8:	73 81       	ldd	r23, Z+3	; 0x03

	RecordNumber = RxData->DataPtr[5];

	for (EventIndex = 0; DEM_Config.ConfigSet->EventParameter[EventIndex].Arc_EOL != TRUE; EventIndex++){
		// search each event linked to this DTC
		if( (NULL != DEM_Config.ConfigSet->EventParameter[EventIndex].DTCClassRef) &&
     5ca:	44 16       	cp	r4, r20
     5cc:	55 06       	cpc	r5, r21
     5ce:	66 06       	cpc	r6, r22
     5d0:	77 06       	cpc	r7, r23
     5d2:	29 f0       	breq	.+10     	; 0x5de <udsReadDtcInfoSub_0x04+0xa8>
			(DEM_Config.ConfigSet->EventParameter[EventIndex].DTCClassRef->DTC == DtcNumber)){
			pEventParaTemp = (Dem_EventParameterType *)(&DEM_Config.ConfigSet->EventParameter[EventIndex]);
		}
		else {
			pEventParaTemp = NULL;
     5d4:	a0 e0       	ldi	r26, 0x00	; 0
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <udsReadDtcInfoSub_0x04+0xa8>
     5da:	a0 e0       	ldi	r26, 0x00	; 0
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
		}

		if ((pEventParaTemp != NULL) && (NULL != pEventParaTemp->FreezeFrameClassRef)) {
     5de:	10 97       	sbiw	r26, 0x00	; 0
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <udsReadDtcInfoSub_0x04+0xae>
     5e2:	6d c0       	rjmp	.+218    	; 0x6be <udsReadDtcInfoSub_0x04+0x188>
     5e4:	17 96       	adiw	r26, 0x07	; 7
     5e6:	2d 91       	ld	r18, X+
     5e8:	3c 91       	ld	r19, X
     5ea:	18 97       	sbiw	r26, 0x08	; 8
     5ec:	23 2b       	or	r18, r19
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <udsReadDtcInfoSub_0x04+0xbc>
     5f0:	66 c0       	rjmp	.+204    	; 0x6be <udsReadDtcInfoSub_0x04+0x188>

			TxData->DataPtr[6 + RecNumOffset] = RecordNumber;
     5f2:	f5 01       	movw	r30, r10
     5f4:	20 81       	ld	r18, Z
     5f6:	31 81       	ldd	r19, Z+1	; 0x01
     5f8:	6c 2d       	mov	r22, r12
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	cb 01       	movw	r24, r22
     5fe:	06 96       	adiw	r24, 0x06	; 6
     600:	f9 01       	movw	r30, r18
     602:	e8 0f       	add	r30, r24
     604:	f9 1f       	adc	r31, r25
     606:	d0 82       	st	Z, r13

			// get Dids' number
			for (index = 0; pEventParaTemp->FreezeFrameClassRef[index] != NULL; index++){
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	18 c0       	rjmp	.+48     	; 0x63e <udsReadDtcInfoSub_0x04+0x108>
				if (pEventParaTemp->FreezeFrameClassRef[index]->FFRecordNumber == RecordNumber) {
     60e:	81 81       	ldd	r24, Z+1	; 0x01
     610:	d8 12       	cpse	r13, r24
     612:	13 c0       	rjmp	.+38     	; 0x63a <udsReadDtcInfoSub_0x04+0x104>
     614:	04 c0       	rjmp	.+8      	; 0x61e <udsReadDtcInfoSub_0x04+0xe8>
					// Calculate the Number of Dids in FF
					for (FFIdNumber = 0; pEventParaTemp->FreezeFrameClassRef[index]->FFIdClassRef[FFIdNumber] != NULL; FFIdNumber++) {
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	e8 1a       	sub	r14, r24
     61a:	f8 0a       	sbc	r15, r24
     61c:	02 c0       	rjmp	.+4      	; 0x622 <udsReadDtcInfoSub_0x04+0xec>
     61e:	e1 2c       	mov	r14, r1
     620:	f1 2c       	mov	r15, r1
     622:	a3 81       	ldd	r26, Z+3	; 0x03
     624:	b4 81       	ldd	r27, Z+4	; 0x04
     626:	c7 01       	movw	r24, r14
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	a8 0f       	add	r26, r24
     62e:	b9 1f       	adc	r27, r25
     630:	8d 91       	ld	r24, X+
     632:	9c 91       	ld	r25, X
     634:	89 2b       	or	r24, r25
     636:	79 f7       	brne	.-34     	; 0x616 <udsReadDtcInfoSub_0x04+0xe0>
     638:	10 c0       	rjmp	.+32     	; 0x65a <udsReadDtcInfoSub_0x04+0x124>
		if ((pEventParaTemp != NULL) && (NULL != pEventParaTemp->FreezeFrameClassRef)) {

			TxData->DataPtr[6 + RecNumOffset] = RecordNumber;

			// get Dids' number
			for (index = 0; pEventParaTemp->FreezeFrameClassRef[index] != NULL; index++){
     63a:	4f 5f       	subi	r20, 0xFF	; 255
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	17 96       	adiw	r26, 0x07	; 7
     640:	ed 91       	ld	r30, X+
     642:	fc 91       	ld	r31, X
     644:	18 97       	sbiw	r26, 0x08	; 8
     646:	ca 01       	movw	r24, r20
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	e8 0f       	add	r30, r24
     64e:	f9 1f       	adc	r31, r25
     650:	01 90       	ld	r0, Z+
     652:	f0 81       	ld	r31, Z
     654:	e0 2d       	mov	r30, r0
     656:	30 97       	sbiw	r30, 0x00	; 0
     658:	d1 f6       	brne	.-76     	; 0x60e <udsReadDtcInfoSub_0x04+0xd8>
						;
					}
					break;
				}
			}
			TxData->DataPtr[7 + RecNumOffset] = FFIdNumber;
     65a:	d5 01       	movw	r26, r10
     65c:	ed 91       	ld	r30, X+
     65e:	fc 91       	ld	r31, X
     660:	11 97       	sbiw	r26, 0x01	; 1
     662:	cb 01       	movw	r24, r22
     664:	07 96       	adiw	r24, 0x07	; 7
     666:	e8 0f       	add	r30, r24
     668:	f9 1f       	adc	r31, r25
     66a:	e0 82       	st	Z, r14

			// get FF data
			AvailableBufSize = SizeOfTxBuf - 7 - RecNumOffset;
     66c:	83 2d       	mov	r24, r3
     66e:	8c 19       	sub	r24, r12
     670:	87 50       	subi	r24, 0x07	; 7
     672:	89 83       	std	Y+1, r24	; 0x01
			
			GetFFbyDtcReturnCode = Dem_GetFreezeFrameDataByDTC(DtcNumber, RecordNumber, &TxData->DataPtr[8 + RecNumOffset], &AvailableBufSize);
     674:	2d 91       	ld	r18, X+
     676:	3c 91       	ld	r19, X
     678:	68 5f       	subi	r22, 0xF8	; 248
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	26 0f       	add	r18, r22
     67e:	37 1f       	adc	r19, r23
     680:	8e 01       	movw	r16, r28
     682:	0f 5f       	subi	r16, 0xFF	; 255
     684:	1f 4f       	sbci	r17, 0xFF	; 255
     686:	4d 2d       	mov	r20, r13
     688:	c3 01       	movw	r24, r6
     68a:	b2 01       	movw	r22, r4
     68c:	0e 94 27 13 	call	0x264e	; 0x264e <Dem_GetFreezeFrameDataByDTC>
			
			if (GetFFbyDtcReturnCode != DEM_GET_FFDATABYDTC_OK){
     690:	81 11       	cpse	r24, r1
     692:	32 c0       	rjmp	.+100    	; 0x6f8 <udsReadDtcInfoSub_0x04+0x1c2>
				break;
			}
			RecNumOffset = RecNumOffset + AvailableBufSize;
     694:	99 81       	ldd	r25, Y+1	; 0x01
     696:	c9 0e       	add	r12, r25

			if( AvailableBufSize > 0 ) {
     698:	99 23       	and	r25, r25
     69a:	41 f0       	breq	.+16     	; 0x6ac <udsReadDtcInfoSub_0x04+0x176>
				TxData->DataLength = 8 + RecNumOffset;
     69c:	2c 2d       	mov	r18, r12
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	28 5f       	subi	r18, 0xF8	; 248
     6a2:	3f 4f       	sbci	r19, 0xFF	; 255
     6a4:	f5 01       	movw	r30, r10
     6a6:	33 83       	std	Z+3, r19	; 0x03
     6a8:	22 83       	std	Z+2, r18	; 0x02
     6aa:	09 c0       	rjmp	.+18     	; 0x6be <udsReadDtcInfoSub_0x04+0x188>
			}
			else {
				TxData->DataLength = 6 + RecNumOffset;
     6ac:	2c 2d       	mov	r18, r12
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	2a 5f       	subi	r18, 0xFA	; 250
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	d5 01       	movw	r26, r10
     6b6:	13 96       	adiw	r26, 0x03	; 3
     6b8:	3c 93       	st	X, r19
     6ba:	2e 93       	st	-X, r18
     6bc:	12 97       	sbiw	r26, 0x02	; 2
				(((uint32)RxData->DataPtr[3])<<8) +
				((uint32)RxData->DataPtr[4]);

	RecordNumber = RxData->DataPtr[5];

	for (EventIndex = 0; DEM_Config.ConfigSet->EventParameter[EventIndex].Arc_EOL != TRUE; EventIndex++){
     6be:	bf ef       	ldi	r27, 0xFF	; 255
     6c0:	8b 1a       	sub	r8, r27
     6c2:	9b 0a       	sbc	r9, r27
     6c4:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <DEM_Config>
     6c8:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <DEM_Config+0x1>
     6cc:	40 81       	ld	r20, Z
     6ce:	51 81       	ldd	r21, Z+1	; 0x01
     6d0:	94 01       	movw	r18, r8
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	d9 01       	movw	r26, r18
     6d8:	aa 0f       	add	r26, r26
     6da:	bb 1f       	adc	r27, r27
     6dc:	aa 0f       	add	r26, r26
     6de:	bb 1f       	adc	r27, r27
     6e0:	aa 0f       	add	r26, r26
     6e2:	bb 1f       	adc	r27, r27
     6e4:	a2 1b       	sub	r26, r18
     6e6:	b3 0b       	sbc	r27, r19
     6e8:	a4 0f       	add	r26, r20
     6ea:	b5 1f       	adc	r27, r21
     6ec:	1d 96       	adiw	r26, 0x0d	; 13
     6ee:	9c 91       	ld	r25, X
     6f0:	1d 97       	sbiw	r26, 0x0d	; 13
     6f2:	91 30       	cpi	r25, 0x01	; 1
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <udsReadDtcInfoSub_0x04+0x1c2>
     6f6:	5f cf       	rjmp	.-322    	; 0x5b6 <udsReadDtcInfoSub_0x04+0x80>
			}
		}
	}

	// Negative response
	switch (GetFFbyDtcReturnCode) {
     6f8:	81 11       	cpse	r24, r1
     6fa:	3e c0       	rjmp	.+124    	; 0x778 <udsReadDtcInfoSub_0x04+0x242>
			break;
		default:
			return DCM_E_REQUEST_OUT_OF_RANGE;
	}

	GetStatusOfDtc = Dem_GetStatusOfDTC(DtcNumber, &DtcStatus); /** @req DEM212 */
     6fc:	ae 01       	movw	r20, r28
     6fe:	4e 5f       	subi	r20, 0xFE	; 254
     700:	5f 4f       	sbci	r21, 0xFF	; 255
     702:	c3 01       	movw	r24, r6
     704:	b2 01       	movw	r22, r4
     706:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <Dem_GetStatusOfDTC>
	switch (GetStatusOfDtc) {
     70a:	81 11       	cpse	r24, r1
     70c:	37 c0       	rjmp	.+110    	; 0x77c <udsReadDtcInfoSub_0x04+0x246>
	}


	// Positive response
	// See ISO 14229(2006) Table 254
	TxData->DataPtr[0] = 0x59;	// positive response
     70e:	d5 01       	movw	r26, r10
     710:	ed 91       	ld	r30, X+
     712:	fc 91       	ld	r31, X
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	89 e5       	ldi	r24, 0x59	; 89
     718:	80 83       	st	Z, r24
	TxData->DataPtr[1] = 0x04;	// subid
     71a:	ed 91       	ld	r30, X+
     71c:	fc 91       	ld	r31, X
     71e:	11 97       	sbiw	r26, 0x01	; 1
     720:	84 e0       	ldi	r24, 0x04	; 4
     722:	81 83       	std	Z+1, r24	; 0x01
	TxData->DataPtr[2] = RxData->DataPtr[2];	// DTC
     724:	2d 91       	ld	r18, X+
     726:	3c 91       	ld	r19, X
     728:	eb 81       	ldd	r30, Y+3	; 0x03
     72a:	fc 81       	ldd	r31, Y+4	; 0x04
     72c:	a0 81       	ld	r26, Z
     72e:	b1 81       	ldd	r27, Z+1	; 0x01
     730:	12 96       	adiw	r26, 0x02	; 2
     732:	8c 91       	ld	r24, X
     734:	d9 01       	movw	r26, r18
     736:	12 96       	adiw	r26, 0x02	; 2
     738:	8c 93       	st	X, r24
	TxData->DataPtr[3] = RxData->DataPtr[3];
     73a:	f5 01       	movw	r30, r10
     73c:	20 81       	ld	r18, Z
     73e:	31 81       	ldd	r19, Z+1	; 0x01
     740:	eb 81       	ldd	r30, Y+3	; 0x03
     742:	fc 81       	ldd	r31, Y+4	; 0x04
     744:	a0 81       	ld	r26, Z
     746:	b1 81       	ldd	r27, Z+1	; 0x01
     748:	13 96       	adiw	r26, 0x03	; 3
     74a:	8c 91       	ld	r24, X
     74c:	d9 01       	movw	r26, r18
     74e:	13 96       	adiw	r26, 0x03	; 3
     750:	8c 93       	st	X, r24
	TxData->DataPtr[4] = RxData->DataPtr[4];
     752:	f5 01       	movw	r30, r10
     754:	20 81       	ld	r18, Z
     756:	31 81       	ldd	r19, Z+1	; 0x01
     758:	eb 81       	ldd	r30, Y+3	; 0x03
     75a:	fc 81       	ldd	r31, Y+4	; 0x04
     75c:	a0 81       	ld	r26, Z
     75e:	b1 81       	ldd	r27, Z+1	; 0x01
     760:	14 96       	adiw	r26, 0x04	; 4
     762:	8c 91       	ld	r24, X
     764:	d9 01       	movw	r26, r18
     766:	14 96       	adiw	r26, 0x04	; 4
     768:	8c 93       	st	X, r24
	TxData->DataPtr[5] = (uint8)DtcStatus;	//status
     76a:	d5 01       	movw	r26, r10
     76c:	ed 91       	ld	r30, X+
     76e:	fc 91       	ld	r31, X
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	85 83       	std	Z+5, r24	; 0x05
	return responseCode;
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	03 c0       	rjmp	.+6      	; 0x77e <udsReadDtcInfoSub_0x04+0x248>
	// Negative response
	switch (GetFFbyDtcReturnCode) {
		case DEM_GET_FFDATABYDTC_OK:
			break;
		default:
			return DCM_E_REQUEST_OUT_OF_RANGE;
     778:	81 e3       	ldi	r24, 0x31	; 49
     77a:	01 c0       	rjmp	.+2      	; 0x77e <udsReadDtcInfoSub_0x04+0x248>
	GetStatusOfDtc = Dem_GetStatusOfDTC(DtcNumber, &DtcStatus); /** @req DEM212 */
	switch (GetStatusOfDtc) {
		case DEM_STATUS_OK:
			break;
		default:
			return DCM_E_GENERAL_REJECT;
     77c:	80 e1       	ldi	r24, 0x10	; 16
	TxData->DataPtr[2] = RxData->DataPtr[2];	// DTC
	TxData->DataPtr[3] = RxData->DataPtr[3];
	TxData->DataPtr[4] = RxData->DataPtr[4];
	TxData->DataPtr[5] = (uint8)DtcStatus;	//status
	return responseCode;
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	df 90       	pop	r13
     794:	cf 90       	pop	r12
     796:	bf 90       	pop	r11
     798:	af 90       	pop	r10
     79a:	9f 90       	pop	r9
     79c:	8f 90       	pop	r8
     79e:	7f 90       	pop	r7
     7a0:	6f 90       	pop	r6
     7a2:	5f 90       	pop	r5
     7a4:	4f 90       	pop	r4
     7a6:	3f 90       	pop	r3
     7a8:	08 95       	ret

000007aa <DspUdsReadDtcInformation>:

	return responseCode;
}

Dcm_NegativeResponseCodeType DspUdsReadDtcInformation(const InfoType *RxData, InfoType *TxData)
{
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
	// Sub function number                0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F 10 11 12 13 14 15
	static const uint8 DataLength[0x16] = {0, 3, 3, 2, 6, 3, 6, 4, 4, 5, 2, 2, 2, 2, 2, 3, 6, 3, 3, 3, 2, 2};

	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;

	uint8 subFunctionNumber = RxData->DataPtr[1];
     7ae:	dc 01       	movw	r26, r24
     7b0:	ed 91       	ld	r30, X+
     7b2:	fc 91       	ld	r31, X
     7b4:	11 97       	sbiw	r26, 0x01	; 1
     7b6:	e1 81       	ldd	r30, Z+1	; 0x01

	// Check length
	if (subFunctionNumber <= 0x15) {
     7b8:	e6 31       	cpi	r30, 0x16	; 22
     7ba:	30 f5       	brcc	.+76     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
		if (RxData->DataLength == DataLength[subFunctionNumber]) {
     7bc:	12 96       	adiw	r26, 0x02	; 2
     7be:	4d 91       	ld	r20, X+
     7c0:	5c 91       	ld	r21, X
     7c2:	13 97       	sbiw	r26, 0x03	; 3
     7c4:	ae 2f       	mov	r26, r30
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	a4 58       	subi	r26, 0x84	; 132
     7ca:	bf 4f       	sbci	r27, 0xFF	; 255
     7cc:	2c 91       	ld	r18, X
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	42 17       	cp	r20, r18
     7d2:	53 07       	cpc	r21, r19
     7d4:	d9 f4       	brne	.+54     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
			switch (subFunctionNumber)
     7d6:	0e 2f       	mov	r16, r30
     7d8:	10 e0       	ldi	r17, 0x00	; 0
     7da:	f8 01       	movw	r30, r16
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	e5 31       	cpi	r30, 0x15	; 21
     7e0:	f1 05       	cpc	r31, r1
     7e2:	b0 f4       	brcc	.+44     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     7e4:	e6 5d       	subi	r30, 0xD6	; 214
     7e6:	ff 4f       	sbci	r31, 0xFF	; 255
     7e8:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <__tablejump2__>
{
	/** @req DCM248 */
	// Sub function number                0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F 10 11 12 13 14 15
	static const uint8 DataLength[0x16] = {0, 3, 3, 2, 6, 3, 6, 4, 4, 5, 2, 2, 2, 2, 2, 3, 6, 3, 3, 3, 2, 2};

	Dcm_NegativeResponseCodeType responseCode = DCM_E_POSITIVE_RESPONSE;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	11 c0       	rjmp	.+34     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
			case 0x02:	// reportDTCByStatusMask
			case 0x0A:	// reportSupportedDTC
			case 0x0F:	// reportMirrorMemoryDTCByStatusMask
			case 0x13:	// reportEmissionRelatedOBDDTCByStatusMask
			case 0x15:	// reportDTCWithPermanentStatus
							responseCode = udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15(RxData, TxData);
     7f0:	0e 94 0f 02 	call	0x41e	; 0x41e <udsReadDtcInfoSub_0x02_0x0A_0x0F_0x13_0x15>
				break;
     7f4:	0e c0       	rjmp	.+28     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
			case 0x09:	// reportSeverityInformationOfDTC
				break;

			case 0x06:	// reportDTCExtendedDataRecordByDTCNumber
			case 0x10:	// reportMirrorMemoryDTCExtendedDataRecordByDTCNumber
						responseCode = udsReadDtcInfoSub_0x06_0x10(RxData, TxData);
     7f6:	0e 94 8c 00 	call	0x118	; 0x118 <udsReadDtcInfoSub_0x06_0x10>
				break;
     7fa:	0b c0       	rjmp	.+22     	; 0x812 <__DATA_REGION_LENGTH__+0x12>

			case 0x03:	// reportDTCSnapshotIdentidication
				responseCode = udsReadDtcInfoSub_0x03(RxData, TxData);
     7fc:	0e 94 66 01 	call	0x2cc	; 0x2cc <udsReadDtcInfoSub_0x03>

				break;
     800:	08 c0       	rjmp	.+16     	; 0x812 <__DATA_REGION_LENGTH__+0x12>

			case 0x04:	// reportDTCSnapshotByDtcNumber
				responseCode = udsReadDtcInfoSub_0x04(RxData, TxData);
     802:	0e 94 9b 02 	call	0x536	; 0x536 <udsReadDtcInfoSub_0x04>

				break;
     806:	05 c0       	rjmp	.+10     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
			responseCode = DCM_E_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT;
		}
	}
	else {
		// Sub function out of range
		responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     808:	81 e3       	ldi	r24, 0x31	; 49
     80a:	03 c0       	rjmp	.+6      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
				break;
			}
		}
		else {
			// Wrong length
			responseCode = DCM_E_INCORRECT_MESSAGE_LENGTH_OR_INVALID_FORMAT;
     80c:	83 e1       	ldi	r24, 0x13	; 19
     80e:	01 c0       	rjmp	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>

				break;

			default:
				// Unknown sub function
				responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
     810:	81 e3       	ldi	r24, 0x31	; 49
	else {
		// Sub function out of range
		responseCode = DCM_E_REQUEST_OUT_OF_RANGE;
	}
	return responseCode;
}
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <calcChecksum>:
		}

	return returnCode;


}
     818:	dc 01       	movw	r26, r24
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	08 c0       	rjmp	.+16     	; 0x834 <calcChecksum+0x1c>
     824:	fd 01       	movw	r30, r26
     826:	e2 0f       	add	r30, r18
     828:	f3 1f       	adc	r31, r19
     82a:	90 81       	ld	r25, Z
     82c:	49 0f       	add	r20, r25
     82e:	51 1d       	adc	r21, r1
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	26 17       	cp	r18, r22
     836:	37 07       	cpc	r19, r23
     838:	a8 f3       	brcs	.-22     	; 0x824 <calcChecksum+0xc>
     83a:	ca 01       	movw	r24, r20
     83c:	2a ea       	ldi	r18, 0xAA	; 170
     83e:	82 27       	eor	r24, r18
     840:	92 27       	eor	r25, r18
     842:	08 95       	ret

00000844 <checkDtcGroup>:
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	6f 3f       	cpi	r22, 0xFF	; 255
     84a:	2f ef       	ldi	r18, 0xFF	; 255
     84c:	72 07       	cpc	r23, r18
     84e:	82 07       	cpc	r24, r18
     850:	91 05       	cpc	r25, r1
     852:	91 f0       	breq	.+36     	; 0x878 <__stack+0x19>
     854:	da 01       	movw	r26, r20
     856:	1b 96       	adiw	r26, 0x0b	; 11
     858:	ed 91       	ld	r30, X+
     85a:	fc 91       	ld	r31, X
     85c:	1c 97       	sbiw	r26, 0x0c	; 12
     85e:	30 97       	sbiw	r30, 0x00	; 0
     860:	69 f0       	breq	.+26     	; 0x87c <__stack+0x1d>
     862:	00 81       	ld	r16, Z
     864:	11 81       	ldd	r17, Z+1	; 0x01
     866:	22 81       	ldd	r18, Z+2	; 0x02
     868:	33 81       	ldd	r19, Z+3	; 0x03
     86a:	60 17       	cp	r22, r16
     86c:	71 07       	cpc	r23, r17
     86e:	82 07       	cpc	r24, r18
     870:	93 07       	cpc	r25, r19
     872:	31 f0       	breq	.+12     	; 0x880 <__stack+0x21>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	05 c0       	rjmp	.+10     	; 0x882 <__stack+0x23>
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	03 c0       	rjmp	.+6      	; 0x882 <__stack+0x23>
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	01 c0       	rjmp	.+2      	; 0x882 <__stack+0x23>
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <lookupEventStatusRec>:
     888:	dc 01       	movw	r26, r24
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e c0       	rjmp	.+28     	; 0x8ac <lookupEventStatusRec+0x24>
     890:	8b e0       	ldi	r24, 0x0B	; 11
     892:	98 9f       	mul	r25, r24
     894:	f0 01       	movw	r30, r0
     896:	11 24       	eor	r1, r1
     898:	ea 5a       	subi	r30, 0xAA	; 170
     89a:	fa 4f       	sbci	r31, 0xFA	; 250
     89c:	40 81       	ld	r20, Z
     89e:	51 81       	ldd	r21, Z+1	; 0x01
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	4a 17       	cp	r20, r26
     8a4:	5b 07       	cpc	r21, r27
     8a6:	09 f0       	breq	.+2      	; 0x8aa <lookupEventStatusRec+0x22>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	9f 5f       	subi	r25, 0xFF	; 255
     8ac:	93 30       	cpi	r25, 0x03	; 3
     8ae:	10 f4       	brcc	.+4      	; 0x8b4 <lookupEventStatusRec+0x2c>
     8b0:	22 23       	and	r18, r18
     8b2:	71 f3       	breq	.-36     	; 0x890 <lookupEventStatusRec+0x8>
     8b4:	22 23       	and	r18, r18
     8b6:	81 f0       	breq	.+32     	; 0x8d8 <lookupEventStatusRec+0x50>
     8b8:	89 2f       	mov	r24, r25
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	4b e0       	ldi	r20, 0x0B	; 11
     8c0:	48 9f       	mul	r20, r24
     8c2:	90 01       	movw	r18, r0
     8c4:	49 9f       	mul	r20, r25
     8c6:	30 0d       	add	r19, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	c9 01       	movw	r24, r18
     8cc:	8a 5a       	subi	r24, 0xAA	; 170
     8ce:	9a 4f       	sbci	r25, 0xFA	; 250
     8d0:	fb 01       	movw	r30, r22
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
     8d6:	08 95       	ret
     8d8:	fb 01       	movw	r30, r22
     8da:	11 82       	std	Z+1, r1	; 0x01
     8dc:	10 82       	st	Z, r1
     8de:	08 95       	ret

000008e0 <lookupEventIdParameter>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	ec 01       	movw	r28, r24
     8e6:	e0 91 86 05 	lds	r30, 0x0586	; 0x800586 <configSet>
     8ea:	f0 91 87 05 	lds	r31, 0x0587	; 0x800587 <configSet+0x1>
     8ee:	a0 81       	ld	r26, Z
     8f0:	b1 81       	ldd	r27, Z+1	; 0x01
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <lookupEventIdParameter+0x1c>
     8f8:	4f 5f       	subi	r20, 0xFF	; 255
     8fa:	5f 4f       	sbci	r21, 0xFF	; 255
     8fc:	9a 01       	movw	r18, r20
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	f9 01       	movw	r30, r18
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	e2 1b       	sub	r30, r18
     912:	f3 0b       	sbc	r31, r19
     914:	ea 0f       	add	r30, r26
     916:	fb 1f       	adc	r31, r27
     918:	20 81       	ld	r18, Z
     91a:	31 81       	ldd	r19, Z+1	; 0x01
     91c:	2c 17       	cp	r18, r28
     91e:	3d 07       	cpc	r19, r29
     920:	19 f0       	breq	.+6      	; 0x928 <lookupEventIdParameter+0x48>
     922:	95 85       	ldd	r25, Z+13	; 0x0d
     924:	99 23       	and	r25, r25
     926:	41 f3       	breq	.-48     	; 0x8f8 <lookupEventIdParameter+0x18>
     928:	85 85       	ldd	r24, Z+13	; 0x0d
     92a:	81 11       	cpse	r24, r1
     92c:	04 c0       	rjmp	.+8      	; 0x936 <lookupEventIdParameter+0x56>
     92e:	db 01       	movw	r26, r22
     930:	ed 93       	st	X+, r30
     932:	fc 93       	st	X, r31
     934:	03 c0       	rjmp	.+6      	; 0x93c <lookupEventIdParameter+0x5c>
     936:	fb 01       	movw	r30, r22
     938:	11 82       	std	Z+1, r1	; 0x01
     93a:	10 82       	st	Z, r1
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <checkEntryValid>:
     942:	dc 01       	movw	r26, r24
     944:	e0 91 86 05 	lds	r30, 0x0586	; 0x800586 <configSet>
     948:	f0 91 87 05 	lds	r31, 0x0587	; 0x800587 <configSet+0x1>
     94c:	60 81       	ld	r22, Z
     94e:	71 81       	ldd	r23, Z+1	; 0x01
     950:	40 e0       	ldi	r20, 0x00	; 0
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	02 c0       	rjmp	.+4      	; 0x95a <checkEntryValid+0x18>
     956:	4f 5f       	subi	r20, 0xFF	; 255
     958:	5f 4f       	sbci	r21, 0xFF	; 255
     95a:	9a 01       	movw	r18, r20
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	f9 01       	movw	r30, r18
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	e2 1b       	sub	r30, r18
     970:	f3 0b       	sbc	r31, r19
     972:	e6 0f       	add	r30, r22
     974:	f7 1f       	adc	r31, r23
     976:	20 81       	ld	r18, Z
     978:	31 81       	ldd	r19, Z+1	; 0x01
     97a:	2a 17       	cp	r18, r26
     97c:	3b 07       	cpc	r19, r27
     97e:	19 f0       	breq	.+6      	; 0x986 <checkEntryValid+0x44>
     980:	95 85       	ldd	r25, Z+13	; 0x0d
     982:	99 23       	and	r25, r25
     984:	41 f3       	breq	.-48     	; 0x956 <checkEntryValid+0x14>
     986:	85 85       	ldd	r24, Z+13	; 0x0d
     988:	88 23       	and	r24, r24
     98a:	41 f0       	breq	.+16     	; 0x99c <checkEntryValid+0x5a>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	08 95       	ret
     990:	92 30       	cpi	r25, 0x02	; 2
     992:	09 f4       	brne	.+2      	; 0x996 <checkEntryValid+0x54>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <checkEntryValid+0x60>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	21 15       	cp	r18, r1
     9a4:	31 05       	cpc	r19, r1
     9a6:	41 f4       	brne	.+16     	; 0x9b8 <checkEntryValid+0x76>
     9a8:	a3 81       	ldd	r26, Z+3	; 0x03
     9aa:	b4 81       	ldd	r27, Z+4	; 0x04
     9ac:	a2 0f       	add	r26, r18
     9ae:	b3 1f       	adc	r27, r19
     9b0:	11 96       	adiw	r26, 0x01	; 1
     9b2:	9c 91       	ld	r25, X
     9b4:	94 30       	cpi	r25, 0x04	; 4
     9b6:	61 f7       	brne	.-40     	; 0x990 <checkEntryValid+0x4e>
     9b8:	08 95       	ret

000009ba <preDebounceNone>:
     9ba:	08 95       	ret

000009bc <preDebounceCounterBased>:
     9bc:	fb 01       	movw	r30, r22
     9be:	a2 81       	ldd	r26, Z+2	; 0x02
     9c0:	b3 81       	ldd	r27, Z+3	; 0x03
     9c2:	13 96       	adiw	r26, 0x03	; 3
     9c4:	0d 90       	ld	r0, X+
     9c6:	bc 91       	ld	r27, X
     9c8:	a0 2d       	mov	r26, r0
     9ca:	16 96       	adiw	r26, 0x06	; 6
     9cc:	0d 90       	ld	r0, X+
     9ce:	bc 91       	ld	r27, X
     9d0:	a0 2d       	mov	r26, r0
     9d2:	11 96       	adiw	r26, 0x01	; 1
     9d4:	0d 90       	ld	r0, X+
     9d6:	bc 91       	ld	r27, X
     9d8:	a0 2d       	mov	r26, r0
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <preDebounceCounterBased+0x24>
     9de:	44 c0       	rjmp	.+136    	; 0xa68 <preDebounceCounterBased+0xac>
     9e0:	08 f4       	brcc	.+2      	; 0x9e4 <preDebounceCounterBased+0x28>
     9e2:	45 c0       	rjmp	.+138    	; 0xa6e <preDebounceCounterBased+0xb2>
     9e4:	82 30       	cpi	r24, 0x02	; 2
     9e6:	09 f1       	breq	.+66     	; 0xa2a <preDebounceCounterBased+0x6e>
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	09 f0       	breq	.+2      	; 0x9ee <preDebounceCounterBased+0x32>
     9ec:	42 c0       	rjmp	.+132    	; 0xa72 <preDebounceCounterBased+0xb6>
     9ee:	94 81       	ldd	r25, Z+4	; 0x04
     9f0:	9f 37       	cpi	r25, 0x7F	; 127
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <preDebounceCounterBased+0x3a>
     9f4:	3e c0       	rjmp	.+124    	; 0xa72 <preDebounceCounterBased+0xb6>
     9f6:	2c 91       	ld	r18, X
     9f8:	22 23       	and	r18, r18
     9fa:	21 f0       	breq	.+8      	; 0xa04 <preDebounceCounterBased+0x48>
     9fc:	99 23       	and	r25, r25
     9fe:	14 f4       	brge	.+4      	; 0xa04 <preDebounceCounterBased+0x48>
     a00:	14 82       	std	Z+4, r1	; 0x04
     a02:	37 c0       	rjmp	.+110    	; 0xa72 <preDebounceCounterBased+0xb6>
     a04:	12 96       	adiw	r26, 0x02	; 2
     a06:	4c 91       	ld	r20, X
     a08:	24 2f       	mov	r18, r20
     a0a:	04 2e       	mov	r0, r20
     a0c:	00 0c       	add	r0, r0
     a0e:	33 0b       	sbc	r19, r19
     a10:	29 0f       	add	r18, r25
     a12:	31 1d       	adc	r19, r1
     a14:	97 fd       	sbrc	r25, 7
     a16:	3a 95       	dec	r19
     a18:	2f 37       	cpi	r18, 0x7F	; 127
     a1a:	31 05       	cpc	r19, r1
     a1c:	1c f4       	brge	.+6      	; 0xa24 <preDebounceCounterBased+0x68>
     a1e:	94 0f       	add	r25, r20
     a20:	94 83       	std	Z+4, r25	; 0x04
     a22:	27 c0       	rjmp	.+78     	; 0xa72 <preDebounceCounterBased+0xb6>
     a24:	9f e7       	ldi	r25, 0x7F	; 127
     a26:	94 83       	std	Z+4, r25	; 0x04
     a28:	24 c0       	rjmp	.+72     	; 0xa72 <preDebounceCounterBased+0xb6>
     a2a:	94 81       	ldd	r25, Z+4	; 0x04
     a2c:	90 38       	cpi	r25, 0x80	; 128
     a2e:	09 f1       	breq	.+66     	; 0xa72 <preDebounceCounterBased+0xb6>
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	2c 91       	ld	r18, X
     a34:	11 97       	sbiw	r26, 0x01	; 1
     a36:	22 23       	and	r18, r18
     a38:	21 f0       	breq	.+8      	; 0xa42 <preDebounceCounterBased+0x86>
     a3a:	19 16       	cp	r1, r25
     a3c:	14 f4       	brge	.+4      	; 0xa42 <preDebounceCounterBased+0x86>
     a3e:	14 82       	std	Z+4, r1	; 0x04
     a40:	18 c0       	rjmp	.+48     	; 0xa72 <preDebounceCounterBased+0xb6>
     a42:	13 96       	adiw	r26, 0x03	; 3
     a44:	4c 91       	ld	r20, X
     a46:	29 2f       	mov	r18, r25
     a48:	09 2e       	mov	r0, r25
     a4a:	00 0c       	add	r0, r0
     a4c:	33 0b       	sbc	r19, r19
     a4e:	24 1b       	sub	r18, r20
     a50:	31 09       	sbc	r19, r1
     a52:	47 fd       	sbrc	r20, 7
     a54:	33 95       	inc	r19
     a56:	21 38       	cpi	r18, 0x81	; 129
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	1c f0       	brlt	.+6      	; 0xa62 <preDebounceCounterBased+0xa6>
     a5c:	94 1b       	sub	r25, r20
     a5e:	94 83       	std	Z+4, r25	; 0x04
     a60:	08 c0       	rjmp	.+16     	; 0xa72 <preDebounceCounterBased+0xb6>
     a62:	90 e8       	ldi	r25, 0x80	; 128
     a64:	94 83       	std	Z+4, r25	; 0x04
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <preDebounceCounterBased+0xb6>
     a68:	9f e7       	ldi	r25, 0x7F	; 127
     a6a:	94 83       	std	Z+4, r25	; 0x04
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <preDebounceCounterBased+0xb6>
     a6e:	90 e8       	ldi	r25, 0x80	; 128
     a70:	94 83       	std	Z+4, r25	; 0x04
     a72:	94 81       	ldd	r25, Z+4	; 0x04
     a74:	90 38       	cpi	r25, 0x80	; 128
     a76:	21 f0       	breq	.+8      	; 0xa80 <preDebounceCounterBased+0xc4>
     a78:	9f 37       	cpi	r25, 0x7F	; 127
     a7a:	19 f4       	brne	.+6      	; 0xa82 <preDebounceCounterBased+0xc6>
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <preDebounceCounterBased+0xc6>
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	25 81       	ldd	r18, Z+5	; 0x05
     a84:	92 17       	cp	r25, r18
     a86:	0c f4       	brge	.+2      	; 0xa8a <preDebounceCounterBased+0xce>
     a88:	92 2f       	mov	r25, r18
     a8a:	95 83       	std	Z+5, r25	; 0x05
     a8c:	08 95       	ret

00000a8e <faultConfirmationCriteriaFulfilled>:
     a8e:	db 01       	movw	r26, r22
     a90:	1a 96       	adiw	r26, 0x0a	; 10
     a92:	2c 91       	ld	r18, X
     a94:	dc 01       	movw	r26, r24
     a96:	13 96       	adiw	r26, 0x03	; 3
     a98:	ed 91       	ld	r30, X+
     a9a:	fc 91       	ld	r31, X
     a9c:	14 97       	sbiw	r26, 0x04	; 4
     a9e:	85 81       	ldd	r24, Z+5	; 0x05
     aa0:	28 17       	cp	r18, r24
     aa2:	10 f0       	brcs	.+4      	; 0xaa8 <faultConfirmationCriteriaFulfilled+0x1a>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	08 95       	ret
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret

00000aac <handleFaultConfirmation>:
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	9c 01       	movw	r18, r24
     ab2:	eb 01       	movw	r28, r22
     ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab6:	9f 3f       	cpi	r25, 0xFF	; 255
     ab8:	11 f0       	breq	.+4      	; 0xabe <handleFaultConfirmation+0x12>
     aba:	9f 5f       	subi	r25, 0xFF	; 255
     abc:	9a 87       	std	Y+10, r25	; 0x0a
     abe:	be 01       	movw	r22, r28
     ac0:	c9 01       	movw	r24, r18
     ac2:	0e 94 47 05 	call	0xa8e	; 0xa8e <faultConfirmationCriteriaFulfilled>
     ac6:	88 23       	and	r24, r24
     ac8:	19 f0       	breq	.+6      	; 0xad0 <handleFaultConfirmation+0x24>
     aca:	88 85       	ldd	r24, Y+8	; 0x08
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	88 87       	std	Y+8, r24	; 0x08
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <mergeEventStatusRec>:
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <mergeEventStatusRec+0x10>
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <mergeEventStatusRec+0x12>
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	6c 01       	movw	r12, r24
     aee:	be 01       	movw	r22, r28
     af0:	6f 5f       	subi	r22, 0xFF	; 255
     af2:	7f 4f       	sbci	r23, 0xFF	; 255
     af4:	fc 01       	movw	r30, r24
     af6:	80 81       	ld	r24, Z
     af8:	91 81       	ldd	r25, Z+1	; 0x01
     afa:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
     afe:	be 01       	movw	r22, r28
     b00:	6d 5f       	subi	r22, 0xFD	; 253
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	f6 01       	movw	r30, r12
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lookupEventIdParameter>
     b0e:	e9 80       	ldd	r14, Y+1	; 0x01
     b10:	fa 80       	ldd	r15, Y+2	; 0x02
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	09 f4       	brne	.+2      	; 0xb1a <mergeEventStatusRec+0x44>
     b18:	44 c0       	rjmp	.+136    	; 0xba2 <mergeEventStatusRec+0xcc>
     b1a:	f6 01       	movw	r30, r12
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	f7 01       	movw	r30, r14
     b22:	26 81       	ldd	r18, Z+6	; 0x06
     b24:	37 81       	ldd	r19, Z+7	; 0x07
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	97 83       	std	Z+7, r25	; 0x07
     b2c:	86 83       	std	Z+6, r24	; 0x06
     b2e:	f6 01       	movw	r30, r12
     b30:	84 81       	ldd	r24, Z+4	; 0x04
     b32:	80 72       	andi	r24, 0x20	; 32
     b34:	f7 01       	movw	r30, r14
     b36:	90 85       	ldd	r25, Z+8	; 0x08
     b38:	89 2b       	or	r24, r25
     b3a:	80 87       	std	Z+8, r24	; 0x08
     b3c:	f6 01       	movw	r30, r12
     b3e:	94 81       	ldd	r25, Z+4	; 0x04
     b40:	98 23       	and	r25, r24
     b42:	90 71       	andi	r25, 0x10	; 16
     b44:	89 2b       	or	r24, r25
     b46:	f7 01       	movw	r30, r14
     b48:	80 87       	std	Z+8, r24	; 0x08
     b4a:	f6 01       	movw	r30, r12
     b4c:	94 81       	ldd	r25, Z+4	; 0x04
     b4e:	9c 70       	andi	r25, 0x0C	; 12
     b50:	89 2b       	or	r24, r25
     b52:	f7 01       	movw	r30, r14
     b54:	80 87       	std	Z+8, r24	; 0x08
     b56:	f6 01       	movw	r30, r12
     b58:	14 81       	ldd	r17, Z+4	; 0x04
     b5a:	10 78       	andi	r17, 0x80	; 128
     b5c:	18 2b       	or	r17, r24
     b5e:	f7 01       	movw	r30, r14
     b60:	10 87       	std	Z+8, r17	; 0x08
     b62:	f6 01       	movw	r30, r12
     b64:	35 81       	ldd	r19, Z+5	; 0x05
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	83 1b       	sub	r24, r19
     b6c:	91 09       	sbc	r25, r1
     b6e:	f7 01       	movw	r30, r14
     b70:	22 85       	ldd	r18, Z+10	; 0x0a
     b72:	42 2f       	mov	r20, r18
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	84 17       	cp	r24, r20
     b78:	95 07       	cpc	r25, r21
     b7a:	1c f4       	brge	.+6      	; 0xb82 <mergeEventStatusRec+0xac>
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	82 87       	std	Z+10, r24	; 0x0a
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <mergeEventStatusRec+0xb2>
     b82:	23 0f       	add	r18, r19
     b84:	f7 01       	movw	r30, r14
     b86:	22 87       	std	Z+10, r18	; 0x0a
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	00 97       	sbiw	r24, 0x00	; 0
     b8e:	49 f0       	breq	.+18     	; 0xba2 <mergeEventStatusRec+0xcc>
     b90:	b7 01       	movw	r22, r14
     b92:	0e 94 47 05 	call	0xa8e	; 0xa8e <faultConfirmationCriteriaFulfilled>
     b96:	88 23       	and	r24, r24
     b98:	21 f0       	breq	.+8      	; 0xba2 <mergeEventStatusRec+0xcc>
     b9a:	81 2f       	mov	r24, r17
     b9c:	88 60       	ori	r24, 0x08	; 8
     b9e:	f7 01       	movw	r30, r14
     ba0:	80 87       	std	Z+8, r24	; 0x08
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	08 95       	ret

00000bba <lookupDtcEvent>:
     bba:	8f 92       	push	r8
     bbc:	9f 92       	push	r9
     bbe:	af 92       	push	r10
     bc0:	bf 92       	push	r11
     bc2:	da 01       	movw	r26, r20
     bc4:	1d 92       	st	X+, r1
     bc6:	1c 92       	st	X, r1
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	32 c0       	rjmp	.+100    	; 0xc34 <lookupDtcEvent+0x7a>
     bd0:	ab e0       	ldi	r26, 0x0B	; 11
     bd2:	a2 9f       	mul	r26, r18
     bd4:	f0 01       	movw	r30, r0
     bd6:	a3 9f       	mul	r26, r19
     bd8:	f0 0d       	add	r31, r0
     bda:	11 24       	eor	r1, r1
     bdc:	ea 5a       	subi	r30, 0xAA	; 170
     bde:	fa 4f       	sbci	r31, 0xFA	; 250
     be0:	01 90       	ld	r0, Z+
     be2:	f0 81       	ld	r31, Z
     be4:	e0 2d       	mov	r30, r0
     be6:	ef 2b       	or	r30, r31
     be8:	19 f1       	breq	.+70     	; 0xc30 <lookupDtcEvent+0x76>
     bea:	a2 9f       	mul	r26, r18
     bec:	f0 01       	movw	r30, r0
     bee:	a3 9f       	mul	r26, r19
     bf0:	f0 0d       	add	r31, r0
     bf2:	11 24       	eor	r1, r1
     bf4:	ea 5a       	subi	r30, 0xAA	; 170
     bf6:	fa 4f       	sbci	r31, 0xFA	; 250
     bf8:	02 80       	ldd	r0, Z+2	; 0x02
     bfa:	f3 81       	ldd	r31, Z+3	; 0x03
     bfc:	e0 2d       	mov	r30, r0
     bfe:	03 84       	ldd	r0, Z+11	; 0x0b
     c00:	f4 85       	ldd	r31, Z+12	; 0x0c
     c02:	e0 2d       	mov	r30, r0
     c04:	30 97       	sbiw	r30, 0x00	; 0
     c06:	a1 f0       	breq	.+40     	; 0xc30 <lookupDtcEvent+0x76>
     c08:	80 80       	ld	r8, Z
     c0a:	91 80       	ldd	r9, Z+1	; 0x01
     c0c:	a2 80       	ldd	r10, Z+2	; 0x02
     c0e:	b3 80       	ldd	r11, Z+3	; 0x03
     c10:	86 16       	cp	r8, r22
     c12:	97 06       	cpc	r9, r23
     c14:	a8 06       	cpc	r10, r24
     c16:	b9 06       	cpc	r11, r25
     c18:	59 f4       	brne	.+22     	; 0xc30 <lookupDtcEvent+0x76>
     c1a:	a2 9f       	mul	r26, r18
     c1c:	f0 01       	movw	r30, r0
     c1e:	a3 9f       	mul	r26, r19
     c20:	f0 0d       	add	r31, r0
     c22:	11 24       	eor	r1, r1
     c24:	ea 5a       	subi	r30, 0xAA	; 170
     c26:	fa 4f       	sbci	r31, 0xFA	; 250
     c28:	da 01       	movw	r26, r20
     c2a:	ed 93       	st	X+, r30
     c2c:	fc 93       	st	X, r31
     c2e:	b1 e0       	ldi	r27, 0x01	; 1
     c30:	2f 5f       	subi	r18, 0xFF	; 255
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	23 30       	cpi	r18, 0x03	; 3
     c36:	31 05       	cpc	r19, r1
     c38:	10 f4       	brcc	.+4      	; 0xc3e <lookupDtcEvent+0x84>
     c3a:	bb 23       	and	r27, r27
     c3c:	49 f2       	breq	.-110    	; 0xbd0 <lookupDtcEvent+0x16>
     c3e:	8b 2f       	mov	r24, r27
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	9f 90       	pop	r9
     c46:	8f 90       	pop	r8
     c48:	08 95       	ret

00000c4a <matchEventWithDtcFilter>:
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 91 81 05 	lds	r18, 0x0581	; 0x800581 <dtcFilter>
     c50:	2f 3f       	cpi	r18, 0xFF	; 255
     c52:	19 f0       	breq	.+6      	; 0xc5a <matchEventWithDtcFilter+0x10>
     c54:	90 85       	ldd	r25, Z+8	; 0x08
     c56:	92 23       	and	r25, r18
     c58:	31 f0       	breq	.+12     	; 0xc66 <matchEventWithDtcFilter+0x1c>
     c5a:	82 81       	ldd	r24, Z+2	; 0x02
     c5c:	93 81       	ldd	r25, Z+3	; 0x03
     c5e:	89 2b       	or	r24, r25
     c60:	21 f4       	brne	.+8      	; 0xc6a <matchEventWithDtcFilter+0x20>
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	08 95       	ret
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 95       	ret
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret

00000c6e <retrieveEventStatusBit>:
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	7c 01       	movw	r14, r24
     c7c:	00 e0       	ldi	r16, 0x00	; 0
     c7e:	10 e0       	ldi	r17, 0x00	; 0
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	3c c0       	rjmp	.+120    	; 0xcfc <retrieveEventStatusBit+0x8e>
     c84:	92 e2       	ldi	r25, 0x22	; 34
     c86:	90 9f       	mul	r25, r16
     c88:	e0 01       	movw	r28, r0
     c8a:	91 9f       	mul	r25, r17
     c8c:	d0 0d       	add	r29, r0
     c8e:	11 24       	eor	r1, r1
     c90:	ce 0d       	add	r28, r14
     c92:	df 1d       	adc	r29, r15
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	92 30       	cpi	r25, 0x02	; 2
     c98:	41 f5       	brne	.+80     	; 0xcea <retrieveEventStatusBit+0x7c>
     c9a:	2e c0       	rjmp	.+92     	; 0xcf8 <retrieveEventStatusBit+0x8a>
     c9c:	8b e0       	ldi	r24, 0x0B	; 11
     c9e:	8e 9f       	mul	r24, r30
     ca0:	d0 01       	movw	r26, r0
     ca2:	8f 9f       	mul	r24, r31
     ca4:	b0 0d       	add	r27, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	aa 5a       	subi	r26, 0xAA	; 170
     caa:	ba 4f       	sbci	r27, 0xFA	; 250
     cac:	8d 91       	ld	r24, X+
     cae:	9c 91       	ld	r25, X
     cb0:	a8 81       	ld	r26, Y
     cb2:	b9 81       	ldd	r27, Y+1	; 0x01
     cb4:	8a 17       	cp	r24, r26
     cb6:	9b 07       	cpc	r25, r27
     cb8:	71 f4       	brne	.+28     	; 0xcd6 <retrieveEventStatusBit+0x68>
     cba:	8b e0       	ldi	r24, 0x0B	; 11
     cbc:	8e 9f       	mul	r24, r30
     cbe:	d0 01       	movw	r26, r0
     cc0:	8f 9f       	mul	r24, r31
     cc2:	b0 0d       	add	r27, r0
     cc4:	11 24       	eor	r1, r1
     cc6:	aa 5a       	subi	r26, 0xAA	; 170
     cc8:	ba 4f       	sbci	r27, 0xFA	; 250
     cca:	18 96       	adiw	r26, 0x08	; 8
     ccc:	8c 91       	ld	r24, X
     cce:	84 23       	and	r24, r20
     cd0:	21 f0       	breq	.+8      	; 0xcda <retrieveEventStatusBit+0x6c>
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <retrieveEventStatusBit+0x6e>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <retrieveEventStatusBit+0x6e>
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	19 f4       	brne	.+6      	; 0xce6 <retrieveEventStatusBit+0x78>
     ce0:	d9 01       	movw	r26, r18
     ce2:	cd 93       	st	X+, r28
     ce4:	dc 93       	st	X, r29
     ce6:	31 96       	adiw	r30, 0x01	; 1
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <retrieveEventStatusBit+0x80>
     cea:	e0 e0       	ldi	r30, 0x00	; 0
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	e3 30       	cpi	r30, 0x03	; 3
     cf0:	f1 05       	cpc	r31, r1
     cf2:	10 f4       	brcc	.+4      	; 0xcf8 <retrieveEventStatusBit+0x8a>
     cf4:	88 23       	and	r24, r24
     cf6:	91 f2       	breq	.-92     	; 0xc9c <retrieveEventStatusBit+0x2e>
     cf8:	0f 5f       	subi	r16, 0xFF	; 255
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
     cfc:	06 17       	cp	r16, r22
     cfe:	17 07       	cpc	r17, r23
     d00:	08 f4       	brcc	.+2      	; 0xd04 <retrieveEventStatusBit+0x96>
     d02:	c0 cf       	rjmp	.-128    	; 0xc84 <retrieveEventStatusBit+0x16>
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	ff 90       	pop	r15
     d0e:	ef 90       	pop	r14
     d10:	08 95       	ret

00000d12 <updateFreezeFrameOccurrencePreInit>:
     d12:	dc 01       	movw	r26, r24
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	24 c0       	rjmp	.+72     	; 0xd62 <updateFreezeFrameOccurrencePreInit+0x50>
     d1a:	92 e2       	ldi	r25, 0x22	; 34
     d1c:	92 9f       	mul	r25, r18
     d1e:	f0 01       	movw	r30, r0
     d20:	93 9f       	mul	r25, r19
     d22:	f0 0d       	add	r31, r0
     d24:	11 24       	eor	r1, r1
     d26:	e2 55       	subi	r30, 0x52	; 82
     d28:	fd 4f       	sbci	r31, 0xFD	; 253
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	4d 91       	ld	r20, X+
     d30:	5c 91       	ld	r21, X
     d32:	11 97       	sbiw	r26, 0x01	; 1
     d34:	64 17       	cp	r22, r20
     d36:	75 07       	cpc	r23, r21
     d38:	91 f4       	brne	.+36     	; 0xd5e <updateFreezeFrameOccurrencePreInit+0x4c>
     d3a:	12 96       	adiw	r26, 0x02	; 2
     d3c:	8d 91       	ld	r24, X+
     d3e:	9c 91       	ld	r25, X
     d40:	13 97       	sbiw	r26, 0x03	; 3
     d42:	42 e2       	ldi	r20, 0x22	; 34
     d44:	42 9f       	mul	r20, r18
     d46:	f0 01       	movw	r30, r0
     d48:	43 9f       	mul	r20, r19
     d4a:	f0 0d       	add	r31, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	e2 55       	subi	r30, 0x52	; 82
     d50:	fd 4f       	sbci	r31, 0xFD	; 253
     d52:	43 81       	ldd	r20, Z+3	; 0x03
     d54:	54 81       	ldd	r21, Z+4	; 0x04
     d56:	84 0f       	add	r24, r20
     d58:	95 1f       	adc	r25, r21
     d5a:	94 83       	std	Z+4, r25	; 0x04
     d5c:	83 83       	std	Z+3, r24	; 0x03
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	24 31       	cpi	r18, 0x14	; 20
     d64:	31 05       	cpc	r19, r1
     d66:	c8 f2       	brcs	.-78     	; 0xd1a <updateFreezeFrameOccurrencePreInit+0x8>
     d68:	08 95       	ret

00000d6a <initCurrentFreezeFrameTimeStamp>:
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	c1 2c       	mov	r12, r1
     d74:	d1 2c       	mov	r13, r1
     d76:	76 01       	movw	r14, r12
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	21 c0       	rjmp	.+66     	; 0xdc0 <initCurrentFreezeFrameTimeStamp+0x56>
     d7e:	42 e2       	ldi	r20, 0x22	; 34
     d80:	42 9f       	mul	r20, r18
     d82:	f0 01       	movw	r30, r0
     d84:	43 9f       	mul	r20, r19
     d86:	f0 0d       	add	r31, r0
     d88:	11 24       	eor	r1, r1
     d8a:	e0 5d       	subi	r30, 0xD0	; 208
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	40 81       	ld	r20, Z
     d90:	51 81       	ldd	r21, Z+1	; 0x01
     d92:	45 2b       	or	r20, r21
     d94:	99 f0       	breq	.+38     	; 0xdbc <initCurrentFreezeFrameTimeStamp+0x52>
     d96:	42 e2       	ldi	r20, 0x22	; 34
     d98:	42 9f       	mul	r20, r18
     d9a:	f0 01       	movw	r30, r0
     d9c:	43 9f       	mul	r20, r19
     d9e:	f0 0d       	add	r31, r0
     da0:	11 24       	eor	r1, r1
     da2:	e0 5d       	subi	r30, 0xD0	; 208
     da4:	fe 4f       	sbci	r31, 0xFE	; 254
     da6:	40 85       	ldd	r20, Z+8	; 0x08
     da8:	51 85       	ldd	r21, Z+9	; 0x09
     daa:	62 85       	ldd	r22, Z+10	; 0x0a
     dac:	73 85       	ldd	r23, Z+11	; 0x0b
     dae:	c4 16       	cp	r12, r20
     db0:	d5 06       	cpc	r13, r21
     db2:	e6 06       	cpc	r14, r22
     db4:	f7 06       	cpc	r15, r23
     db6:	10 f4       	brcc	.+4      	; 0xdbc <initCurrentFreezeFrameTimeStamp+0x52>
     db8:	6a 01       	movw	r12, r20
     dba:	7b 01       	movw	r14, r22
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	23 30       	cpi	r18, 0x03	; 3
     dc2:	31 05       	cpc	r19, r1
     dc4:	e0 f2       	brcs	.-72     	; 0xd7e <initCurrentFreezeFrameTimeStamp+0x14>
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	c2 1a       	sub	r12, r18
     dca:	d2 0a       	sbc	r13, r18
     dcc:	e2 0a       	sbc	r14, r18
     dce:	f2 0a       	sbc	r15, r18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	22 c0       	rjmp	.+68     	; 0xe1a <initCurrentFreezeFrameTimeStamp+0xb0>
     dd6:	42 e2       	ldi	r20, 0x22	; 34
     dd8:	42 9f       	mul	r20, r18
     dda:	f0 01       	movw	r30, r0
     ddc:	43 9f       	mul	r20, r19
     dde:	f0 0d       	add	r31, r0
     de0:	11 24       	eor	r1, r1
     de2:	e2 55       	subi	r30, 0x52	; 82
     de4:	fd 4f       	sbci	r31, 0xFD	; 253
     de6:	40 81       	ld	r20, Z
     de8:	51 81       	ldd	r21, Z+1	; 0x01
     dea:	45 2b       	or	r20, r21
     dec:	a1 f0       	breq	.+40     	; 0xe16 <initCurrentFreezeFrameTimeStamp+0xac>
     dee:	42 e2       	ldi	r20, 0x22	; 34
     df0:	42 9f       	mul	r20, r18
     df2:	f0 01       	movw	r30, r0
     df4:	43 9f       	mul	r20, r19
     df6:	f0 0d       	add	r31, r0
     df8:	11 24       	eor	r1, r1
     dfa:	e2 55       	subi	r30, 0x52	; 82
     dfc:	fd 4f       	sbci	r31, 0xFD	; 253
     dfe:	40 85       	ldd	r20, Z+8	; 0x08
     e00:	51 85       	ldd	r21, Z+9	; 0x09
     e02:	62 85       	ldd	r22, Z+10	; 0x0a
     e04:	73 85       	ldd	r23, Z+11	; 0x0b
     e06:	4c 0d       	add	r20, r12
     e08:	5d 1d       	adc	r21, r13
     e0a:	6e 1d       	adc	r22, r14
     e0c:	7f 1d       	adc	r23, r15
     e0e:	40 87       	std	Z+8, r20	; 0x08
     e10:	51 87       	std	Z+9, r21	; 0x09
     e12:	62 87       	std	Z+10, r22	; 0x0a
     e14:	73 87       	std	Z+11, r23	; 0x0b
     e16:	2f 5f       	subi	r18, 0xFF	; 255
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	24 31       	cpi	r18, 0x14	; 20
     e1c:	31 05       	cpc	r19, r1
     e1e:	d8 f2       	brcs	.-74     	; 0xdd6 <initCurrentFreezeFrameTimeStamp+0x6c>
     e20:	fc 01       	movw	r30, r24
     e22:	40 81       	ld	r20, Z
     e24:	51 81       	ldd	r21, Z+1	; 0x01
     e26:	62 81       	ldd	r22, Z+2	; 0x02
     e28:	73 81       	ldd	r23, Z+3	; 0x03
     e2a:	c4 0e       	add	r12, r20
     e2c:	d5 1e       	adc	r13, r21
     e2e:	e6 1e       	adc	r14, r22
     e30:	f7 1e       	adc	r15, r23
     e32:	c0 82       	st	Z, r12
     e34:	d1 82       	std	Z+1, r13	; 0x01
     e36:	e2 82       	std	Z+2, r14	; 0x02
     e38:	f3 82       	std	Z+3, r15	; 0x03
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	08 95       	ret

00000e44 <storeEventPriMem>:
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	fb 01       	movw	r30, r22
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	13 c0       	rjmp	.+38     	; 0xe78 <storeEventPriMem+0x34>
     e52:	dc 01       	movw	r26, r24
     e54:	aa 0f       	add	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	aa 0f       	add	r26, r26
     e5a:	bb 1f       	adc	r27, r27
     e5c:	aa 0f       	add	r26, r26
     e5e:	bb 1f       	adc	r27, r27
     e60:	a1 53       	subi	r26, 0x31	; 49
     e62:	ba 4f       	sbci	r27, 0xFA	; 250
     e64:	6d 91       	ld	r22, X+
     e66:	7c 91       	ld	r23, X
     e68:	40 81       	ld	r20, Z
     e6a:	51 81       	ldd	r21, Z+1	; 0x01
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	64 17       	cp	r22, r20
     e70:	75 07       	cpc	r23, r21
     e72:	09 f0       	breq	.+2      	; 0xe76 <storeEventPriMem+0x32>
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	83 30       	cpi	r24, 0x03	; 3
     e7a:	91 05       	cpc	r25, r1
     e7c:	10 f4       	brcc	.+4      	; 0xe82 <storeEventPriMem+0x3e>
     e7e:	22 23       	and	r18, r18
     e80:	41 f3       	breq	.-48     	; 0xe52 <storeEventPriMem+0xe>
     e82:	22 23       	and	r18, r18
     e84:	59 f1       	breq	.+86     	; 0xedc <storeEventPriMem+0x98>
     e86:	ec 01       	movw	r28, r24
     e88:	21 97       	sbiw	r28, 0x01	; 1
     e8a:	86 81       	ldd	r24, Z+6	; 0x06
     e8c:	97 81       	ldd	r25, Z+7	; 0x07
     e8e:	cc 0f       	add	r28, r28
     e90:	dd 1f       	adc	r29, r29
     e92:	cc 0f       	add	r28, r28
     e94:	dd 1f       	adc	r29, r29
     e96:	cc 0f       	add	r28, r28
     e98:	dd 1f       	adc	r29, r29
     e9a:	c1 53       	subi	r28, 0x31	; 49
     e9c:	da 4f       	sbci	r29, 0xFA	; 250
     e9e:	9b 83       	std	Y+3, r25	; 0x03
     ea0:	8a 83       	std	Y+2, r24	; 0x02
     ea2:	80 85       	ldd	r24, Z+8	; 0x08
     ea4:	8c 83       	std	Y+4, r24	; 0x04
     ea6:	82 85       	ldd	r24, Z+10	; 0x0a
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	66 e0       	ldi	r22, 0x06	; 6
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	ce 01       	movw	r24, r28
     eb0:	0e 94 0c 04 	call	0x818	; 0x818 <calcChecksum>
     eb4:	9f 83       	std	Y+7, r25	; 0x07
     eb6:	8e 83       	std	Y+6, r24	; 0x06
     eb8:	38 c0       	rjmp	.+112    	; 0xf2a <storeEventPriMem+0xe6>
     eba:	dc 01       	movw	r26, r24
     ebc:	aa 0f       	add	r26, r26
     ebe:	bb 1f       	adc	r27, r27
     ec0:	aa 0f       	add	r26, r26
     ec2:	bb 1f       	adc	r27, r27
     ec4:	aa 0f       	add	r26, r26
     ec6:	bb 1f       	adc	r27, r27
     ec8:	a1 53       	subi	r26, 0x31	; 49
     eca:	ba 4f       	sbci	r27, 0xFA	; 250
     ecc:	4d 91       	ld	r20, X+
     ece:	5c 91       	ld	r21, X
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	45 2b       	or	r20, r21
     ed4:	09 f0       	breq	.+2      	; 0xed8 <storeEventPriMem+0x94>
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	01 96       	adiw	r24, 0x01	; 1
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <storeEventPriMem+0x9e>
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	83 30       	cpi	r24, 0x03	; 3
     ee4:	91 05       	cpc	r25, r1
     ee6:	10 f4       	brcc	.+4      	; 0xeec <storeEventPriMem+0xa8>
     ee8:	22 23       	and	r18, r18
     eea:	39 f3       	breq	.-50     	; 0xeba <storeEventPriMem+0x76>
     eec:	22 23       	and	r18, r18
     eee:	e9 f0       	breq	.+58     	; 0xf2a <storeEventPriMem+0xe6>
     ef0:	ec 01       	movw	r28, r24
     ef2:	21 97       	sbiw	r28, 0x01	; 1
     ef4:	80 81       	ld	r24, Z
     ef6:	91 81       	ldd	r25, Z+1	; 0x01
     ef8:	cc 0f       	add	r28, r28
     efa:	dd 1f       	adc	r29, r29
     efc:	cc 0f       	add	r28, r28
     efe:	dd 1f       	adc	r29, r29
     f00:	cc 0f       	add	r28, r28
     f02:	dd 1f       	adc	r29, r29
     f04:	c1 53       	subi	r28, 0x31	; 49
     f06:	da 4f       	sbci	r29, 0xFA	; 250
     f08:	99 83       	std	Y+1, r25	; 0x01
     f0a:	88 83       	st	Y, r24
     f0c:	86 81       	ldd	r24, Z+6	; 0x06
     f0e:	97 81       	ldd	r25, Z+7	; 0x07
     f10:	9b 83       	std	Y+3, r25	; 0x03
     f12:	8a 83       	std	Y+2, r24	; 0x02
     f14:	80 85       	ldd	r24, Z+8	; 0x08
     f16:	8c 83       	std	Y+4, r24	; 0x04
     f18:	82 85       	ldd	r24, Z+10	; 0x0a
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	66 e0       	ldi	r22, 0x06	; 6
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	ce 01       	movw	r24, r28
     f22:	0e 94 0c 04 	call	0x818	; 0x818 <calcChecksum>
     f26:	9f 83       	std	Y+7, r25	; 0x07
     f28:	8e 83       	std	Y+6, r24	; 0x06
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <storeEventEvtMem>:
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	8c 01       	movw	r16, r24
     f3e:	7b 01       	movw	r14, r22
     f40:	c0 e0       	ldi	r28, 0x00	; 0
     f42:	d0 e0       	ldi	r29, 0x00	; 0
     f44:	07 c0       	rjmp	.+14     	; 0xf54 <storeEventEvtMem+0x24>
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	21 f4       	brne	.+8      	; 0xf52 <storeEventEvtMem+0x22>
     f4a:	b7 01       	movw	r22, r14
     f4c:	c8 01       	movw	r24, r16
     f4e:	0e 94 22 07 	call	0xe44	; 0xe44 <storeEventPriMem>
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	20 97       	sbiw	r28, 0x00	; 0
     f56:	51 f4       	brne	.+20     	; 0xf6c <storeEventEvtMem+0x3c>
     f58:	d8 01       	movw	r26, r16
     f5a:	13 96       	adiw	r26, 0x03	; 3
     f5c:	ed 91       	ld	r30, X+
     f5e:	fc 91       	ld	r31, X
     f60:	14 97       	sbiw	r26, 0x04	; 4
     f62:	ec 0f       	add	r30, r28
     f64:	fd 1f       	adc	r31, r29
     f66:	81 81       	ldd	r24, Z+1	; 0x01
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	69 f7       	brne	.-38     	; 0xf46 <storeEventEvtMem+0x16>
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	08 95       	ret

00000f7a <getExtendedDataPriMem>:
     f7a:	dc 01       	movw	r26, r24
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	2b c0       	rjmp	.+86     	; 0xfda <getExtendedDataPriMem+0x60>
     f84:	a9 01       	movw	r20, r18
     f86:	44 0f       	add	r20, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	fa 01       	movw	r30, r20
     f8c:	ee 0f       	add	r30, r30
     f8e:	ff 1f       	adc	r31, r31
     f90:	ee 0f       	add	r30, r30
     f92:	ff 1f       	adc	r31, r31
     f94:	ee 0f       	add	r30, r30
     f96:	ff 1f       	adc	r31, r31
     f98:	e4 1b       	sub	r30, r20
     f9a:	f5 0b       	sbc	r31, r21
     f9c:	e7 57       	subi	r30, 0x77	; 119
     f9e:	fa 4f       	sbci	r31, 0xFA	; 250
     fa0:	01 90       	ld	r0, Z+
     fa2:	f0 81       	ld	r31, Z
     fa4:	e0 2d       	mov	r30, r0
     fa6:	4d 91       	ld	r20, X+
     fa8:	5c 91       	ld	r21, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	e4 17       	cp	r30, r20
     fae:	f5 07       	cpc	r31, r21
     fb0:	91 f4       	brne	.+36     	; 0xfd6 <getExtendedDataPriMem+0x5c>
     fb2:	a9 01       	movw	r20, r18
     fb4:	44 0f       	add	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	ca 01       	movw	r24, r20
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	84 1b       	sub	r24, r20
     fc8:	95 0b       	sbc	r25, r21
     fca:	87 57       	subi	r24, 0x77	; 119
     fcc:	9a 4f       	sbci	r25, 0xFA	; 250
     fce:	fb 01       	movw	r30, r22
     fd0:	91 83       	std	Z+1, r25	; 0x01
     fd2:	80 83       	st	Z, r24
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	2f 5f       	subi	r18, 0xFF	; 255
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	25 30       	cpi	r18, 0x05	; 5
     fdc:	31 05       	cpc	r19, r1
     fde:	10 f4       	brcc	.+4      	; 0xfe4 <getExtendedDataPriMem+0x6a>
     fe0:	99 23       	and	r25, r25
     fe2:	81 f2       	breq	.-96     	; 0xf84 <getExtendedDataPriMem+0xa>
     fe4:	99 23       	and	r25, r25
     fe6:	b9 f0       	breq	.+46     	; 0x1016 <getExtendedDataPriMem+0x9c>
     fe8:	08 95       	ret
     fea:	9c 01       	movw	r18, r24
     fec:	22 0f       	add	r18, r18
     fee:	33 1f       	adc	r19, r19
     ff0:	f9 01       	movw	r30, r18
     ff2:	ee 0f       	add	r30, r30
     ff4:	ff 1f       	adc	r31, r31
     ff6:	ee 0f       	add	r30, r30
     ff8:	ff 1f       	adc	r31, r31
     ffa:	ee 0f       	add	r30, r30
     ffc:	ff 1f       	adc	r31, r31
     ffe:	e2 1b       	sub	r30, r18
    1000:	f3 0b       	sbc	r31, r19
    1002:	e7 57       	subi	r30, 0x77	; 119
    1004:	fa 4f       	sbci	r31, 0xFA	; 250
    1006:	40 81       	ld	r20, Z
    1008:	51 81       	ldd	r21, Z+1	; 0x01
    100a:	21 e0       	ldi	r18, 0x01	; 1
    100c:	45 2b       	or	r20, r21
    100e:	09 f0       	breq	.+2      	; 0x1012 <getExtendedDataPriMem+0x98>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <getExtendedDataPriMem+0xa2>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	91 05       	cpc	r25, r1
    1020:	10 f4       	brcc	.+4      	; 0x1026 <getExtendedDataPriMem+0xac>
    1022:	22 23       	and	r18, r18
    1024:	11 f3       	breq	.-60     	; 0xfea <getExtendedDataPriMem+0x70>
    1026:	22 23       	and	r18, r18
    1028:	99 f0       	breq	.+38     	; 0x1050 <getExtendedDataPriMem+0xd6>
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	9c 01       	movw	r18, r24
    1032:	22 0f       	add	r18, r18
    1034:	33 1f       	adc	r19, r19
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	22 0f       	add	r18, r18
    103c:	33 1f       	adc	r19, r19
    103e:	a9 01       	movw	r20, r18
    1040:	48 1b       	sub	r20, r24
    1042:	59 0b       	sbc	r21, r25
    1044:	ca 01       	movw	r24, r20
    1046:	87 57       	subi	r24, 0x77	; 119
    1048:	9a 4f       	sbci	r25, 0xFA	; 250
    104a:	fb 01       	movw	r30, r22
    104c:	91 83       	std	Z+1, r25	; 0x01
    104e:	80 83       	st	Z, r24
    1050:	08 95       	ret

00001052 <lookupExtendedDataRecNumParam>:
    1052:	af 92       	push	r10
    1054:	bf 92       	push	r11
    1056:	df 92       	push	r13
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	db 01       	movw	r26, r22
    1066:	15 96       	adiw	r26, 0x05	; 5
    1068:	ed 91       	ld	r30, X+
    106a:	fc 91       	ld	r31, X
    106c:	16 97       	sbiw	r26, 0x06	; 6
    106e:	ef 2b       	or	r30, r31
    1070:	31 f5       	brne	.+76     	; 0x10be <lookupExtendedDataRecNumParam+0x6c>
    1072:	d1 2c       	mov	r13, r1
    1074:	39 c0       	rjmp	.+114    	; 0x10e8 <lookupExtendedDataRecNumParam+0x96>
    1076:	ad 90       	ld	r10, X+
    1078:	bc 90       	ld	r11, X
    107a:	11 97       	sbiw	r26, 0x01	; 1
    107c:	e8 2f       	mov	r30, r24
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	ae 16       	cp	r10, r30
    1082:	bf 06       	cpc	r11, r31
    1084:	41 f4       	brne	.+16     	; 0x1096 <lookupExtendedDataRecNumParam+0x44>
    1086:	fa 01       	movw	r30, r20
    1088:	b1 83       	std	Z+1, r27	; 0x01
    108a:	a0 83       	st	Z, r26
    108c:	d9 01       	movw	r26, r18
    108e:	0d 93       	st	X+, r16
    1090:	1c 93       	st	X, r17
    1092:	dd 24       	eor	r13, r13
    1094:	d3 94       	inc	r13
    1096:	db 01       	movw	r26, r22
    1098:	15 96       	adiw	r26, 0x05	; 5
    109a:	ed 91       	ld	r30, X+
    109c:	fc 91       	ld	r31, X
    109e:	16 97       	sbiw	r26, 0x06	; 6
    10a0:	ee 0d       	add	r30, r14
    10a2:	ff 1d       	adc	r31, r15
    10a4:	01 90       	ld	r0, Z+
    10a6:	f0 81       	ld	r31, Z
    10a8:	e0 2d       	mov	r30, r0
    10aa:	94 81       	ldd	r25, Z+4	; 0x04
    10ac:	92 30       	cpi	r25, 0x02	; 2
    10ae:	29 f0       	breq	.+10     	; 0x10ba <lookupExtendedDataRecNumParam+0x68>
    10b0:	02 80       	ldd	r0, Z+2	; 0x02
    10b2:	f3 81       	ldd	r31, Z+3	; 0x03
    10b4:	e0 2d       	mov	r30, r0
    10b6:	0e 0f       	add	r16, r30
    10b8:	1f 1f       	adc	r17, r31
    10ba:	21 96       	adiw	r28, 0x01	; 1
    10bc:	05 c0       	rjmp	.+10     	; 0x10c8 <lookupExtendedDataRecNumParam+0x76>
    10be:	c0 e0       	ldi	r28, 0x00	; 0
    10c0:	d0 e0       	ldi	r29, 0x00	; 0
    10c2:	00 e0       	ldi	r16, 0x00	; 0
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	d1 2c       	mov	r13, r1
    10c8:	db 01       	movw	r26, r22
    10ca:	15 96       	adiw	r26, 0x05	; 5
    10cc:	ed 91       	ld	r30, X+
    10ce:	fc 91       	ld	r31, X
    10d0:	16 97       	sbiw	r26, 0x06	; 6
    10d2:	7e 01       	movw	r14, r28
    10d4:	ee 0c       	add	r14, r14
    10d6:	ff 1c       	adc	r15, r15
    10d8:	ee 0d       	add	r30, r14
    10da:	ff 1d       	adc	r31, r15
    10dc:	a0 81       	ld	r26, Z
    10de:	b1 81       	ldd	r27, Z+1	; 0x01
    10e0:	10 97       	sbiw	r26, 0x00	; 0
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <lookupExtendedDataRecNumParam+0x96>
    10e4:	dd 20       	and	r13, r13
    10e6:	39 f2       	breq	.-114    	; 0x1076 <lookupExtendedDataRecNumParam+0x24>
    10e8:	8d 2d       	mov	r24, r13
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	df 90       	pop	r13
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	08 95       	ret

000010fe <lookupExtendedDataPriMem>:
    10fe:	dc 01       	movw	r26, r24
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	17 c0       	rjmp	.+46     	; 0x1136 <lookupExtendedDataPriMem+0x38>
    1108:	a9 01       	movw	r20, r18
    110a:	44 0f       	add	r20, r20
    110c:	55 1f       	adc	r21, r21
    110e:	fa 01       	movw	r30, r20
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	ee 0f       	add	r30, r30
    1116:	ff 1f       	adc	r31, r31
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	e4 1b       	sub	r30, r20
    111e:	f5 0b       	sbc	r31, r21
    1120:	e7 57       	subi	r30, 0x77	; 119
    1122:	fa 4f       	sbci	r31, 0xFA	; 250
    1124:	40 81       	ld	r20, Z
    1126:	51 81       	ldd	r21, Z+1	; 0x01
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	4a 17       	cp	r20, r26
    112c:	5b 07       	cpc	r21, r27
    112e:	09 f0       	breq	.+2      	; 0x1132 <lookupExtendedDataPriMem+0x34>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	2f 5f       	subi	r18, 0xFF	; 255
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	25 30       	cpi	r18, 0x05	; 5
    1138:	31 05       	cpc	r19, r1
    113a:	14 f4       	brge	.+4      	; 0x1140 <lookupExtendedDataPriMem+0x42>
    113c:	88 23       	and	r24, r24
    113e:	21 f3       	breq	.-56     	; 0x1108 <lookupExtendedDataPriMem+0xa>
    1140:	88 23       	and	r24, r24
    1142:	a1 f0       	breq	.+40     	; 0x116c <lookupExtendedDataPriMem+0x6e>
    1144:	21 50       	subi	r18, 0x01	; 1
    1146:	31 09       	sbc	r19, r1
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	a9 01       	movw	r20, r18
    114e:	44 0f       	add	r20, r20
    1150:	55 1f       	adc	r21, r21
    1152:	44 0f       	add	r20, r20
    1154:	55 1f       	adc	r21, r21
    1156:	44 0f       	add	r20, r20
    1158:	55 1f       	adc	r21, r21
    115a:	fa 01       	movw	r30, r20
    115c:	e2 1b       	sub	r30, r18
    115e:	f3 0b       	sbc	r31, r19
    1160:	9f 01       	movw	r18, r30
    1162:	27 57       	subi	r18, 0x77	; 119
    1164:	3a 4f       	sbci	r19, 0xFA	; 250
    1166:	fb 01       	movw	r30, r22
    1168:	31 83       	std	Z+1, r19	; 0x01
    116a:	20 83       	st	Z, r18
    116c:	08 95       	ret

0000116e <lookupFreezeFrameDataRecNumParam>:
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	18 2f       	mov	r17, r24
    1176:	eb 01       	movw	r28, r22
    1178:	8f 81       	ldd	r24, Y+7	; 0x07
    117a:	98 85       	ldd	r25, Y+8	; 0x08
    117c:	89 2b       	or	r24, r25
    117e:	59 f4       	brne	.+22     	; 0x1196 <lookupFreezeFrameDataRecNumParam+0x28>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	1b c0       	rjmp	.+54     	; 0x11ba <lookupFreezeFrameDataRecNumParam+0x4c>
    1184:	91 81       	ldd	r25, Z+1	; 0x01
    1186:	91 13       	cpse	r25, r17
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <lookupFreezeFrameDataRecNumParam+0x24>
    118a:	ea 01       	movw	r28, r20
    118c:	f9 83       	std	Y+1, r31	; 0x01
    118e:	e8 83       	st	Y, r30
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	03 c0       	rjmp	.+6      	; 0x119c <lookupFreezeFrameDataRecNumParam+0x2e>
    1196:	a0 e0       	ldi	r26, 0x00	; 0
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	eb 01       	movw	r28, r22
    119e:	ef 81       	ldd	r30, Y+7	; 0x07
    11a0:	f8 85       	ldd	r31, Y+8	; 0x08
    11a2:	9d 01       	movw	r18, r26
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	e2 0f       	add	r30, r18
    11aa:	f3 1f       	adc	r31, r19
    11ac:	01 90       	ld	r0, Z+
    11ae:	f0 81       	ld	r31, Z
    11b0:	e0 2d       	mov	r30, r0
    11b2:	30 97       	sbiw	r30, 0x00	; 0
    11b4:	11 f0       	breq	.+4      	; 0x11ba <lookupFreezeFrameDataRecNumParam+0x4c>
    11b6:	88 23       	and	r24, r24
    11b8:	29 f3       	breq	.-54     	; 0x1184 <lookupFreezeFrameDataRecNumParam+0x16>
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	08 95       	ret

000011c2 <lookupFreezeFrameDataSize>:
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <lookupFreezeFrameDataSize+0x12>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	1a 82       	std	Y+2, r1	; 0x02
    11da:	19 82       	std	Y+1, r1	; 0x01
    11dc:	db 01       	movw	r26, r22
    11de:	8d 91       	ld	r24, X+
    11e0:	9c 91       	ld	r25, X
    11e2:	89 2b       	or	r24, r25
    11e4:	09 f5       	brne	.+66     	; 0x1228 <lookupFreezeFrameDataSize+0x66>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	37 c0       	rjmp	.+110    	; 0x1258 <lookupFreezeFrameDataSize+0x96>
    11ea:	14 96       	adiw	r26, 0x04	; 4
    11ec:	ed 91       	ld	r30, X+
    11ee:	fc 91       	ld	r31, X
    11f0:	15 97       	sbiw	r26, 0x05	; 5
    11f2:	30 97       	sbiw	r30, 0x00	; 0
    11f4:	31 f0       	breq	.+12     	; 0x1202 <lookupFreezeFrameDataSize+0x40>
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	09 95       	icall
    11fc:	88 23       	and	r24, r24
    11fe:	31 f0       	breq	.+12     	; 0x120c <lookupFreezeFrameDataSize+0x4a>
    1200:	2a c0       	rjmp	.+84     	; 0x1256 <lookupFreezeFrameDataSize+0x94>
    1202:	18 96       	adiw	r26, 0x08	; 8
    1204:	8c 91       	ld	r24, X
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	f7 01       	movw	r30, r14
    120e:	20 81       	ld	r18, Z
    1210:	31 81       	ldd	r19, Z+1	; 0x01
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
    1216:	82 0f       	add	r24, r18
    1218:	93 1f       	adc	r25, r19
    121a:	02 96       	adiw	r24, 0x02	; 2
    121c:	91 83       	std	Z+1, r25	; 0x01
    121e:	80 83       	st	Z, r24
    1220:	0f 5f       	subi	r16, 0xFF	; 255
    1222:	1f 4f       	sbci	r17, 0xFF	; 255
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	05 c0       	rjmp	.+10     	; 0x1232 <lookupFreezeFrameDataSize+0x70>
    1228:	7a 01       	movw	r14, r20
    122a:	6b 01       	movw	r12, r22
    122c:	00 e0       	ldi	r16, 0x00	; 0
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	d6 01       	movw	r26, r12
    1234:	ed 91       	ld	r30, X+
    1236:	fc 91       	ld	r31, X
    1238:	03 80       	ldd	r0, Z+3	; 0x03
    123a:	f4 81       	ldd	r31, Z+4	; 0x04
    123c:	e0 2d       	mov	r30, r0
    123e:	98 01       	movw	r18, r16
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	e2 0f       	add	r30, r18
    1246:	f3 1f       	adc	r31, r19
    1248:	a0 81       	ld	r26, Z
    124a:	b1 81       	ldd	r27, Z+1	; 0x01
    124c:	10 97       	sbiw	r26, 0x00	; 0
    124e:	21 f0       	breq	.+8      	; 0x1258 <lookupFreezeFrameDataSize+0x96>
    1250:	88 23       	and	r24, r24
    1252:	59 f2       	breq	.-106    	; 0x11ea <lookupFreezeFrameDataSize+0x28>
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <lookupFreezeFrameDataSize+0x96>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	ff 90       	pop	r15
    1266:	ef 90       	pop	r14
    1268:	df 90       	pop	r13
    126a:	cf 90       	pop	r12
    126c:	08 95       	ret

0000126e <lookupFreezeFrameDataPriMem>:
    126e:	dc 01       	movw	r26, r24
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	20 c0       	rjmp	.+64     	; 0x12b8 <lookupFreezeFrameDataPriMem+0x4a>
    1278:	82 e2       	ldi	r24, 0x22	; 34
    127a:	82 9f       	mul	r24, r18
    127c:	f0 01       	movw	r30, r0
    127e:	83 9f       	mul	r24, r19
    1280:	f0 0d       	add	r31, r0
    1282:	11 24       	eor	r1, r1
    1284:	e0 5d       	subi	r30, 0xD0	; 208
    1286:	fe 4f       	sbci	r31, 0xFE	; 254
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	8a 17       	cp	r24, r26
    128e:	9b 07       	cpc	r25, r27
    1290:	69 f4       	brne	.+26     	; 0x12ac <lookupFreezeFrameDataPriMem+0x3e>
    1292:	82 e2       	ldi	r24, 0x22	; 34
    1294:	82 9f       	mul	r24, r18
    1296:	f0 01       	movw	r30, r0
    1298:	83 9f       	mul	r24, r19
    129a:	f0 0d       	add	r31, r0
    129c:	11 24       	eor	r1, r1
    129e:	e0 5d       	subi	r30, 0xD0	; 208
    12a0:	fe 4f       	sbci	r31, 0xFE	; 254
    12a2:	87 81       	ldd	r24, Z+7	; 0x07
    12a4:	86 17       	cp	r24, r22
    12a6:	21 f0       	breq	.+8      	; 0x12b0 <lookupFreezeFrameDataPriMem+0x42>
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <lookupFreezeFrameDataPriMem+0x44>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <lookupFreezeFrameDataPriMem+0x44>
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	89 2f       	mov	r24, r25
    12b4:	2f 5f       	subi	r18, 0xFF	; 255
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	23 30       	cpi	r18, 0x03	; 3
    12ba:	31 05       	cpc	r19, r1
    12bc:	10 f4       	brcc	.+4      	; 0x12c2 <lookupFreezeFrameDataPriMem+0x54>
    12be:	88 23       	and	r24, r24
    12c0:	d9 f2       	breq	.-74     	; 0x1278 <lookupFreezeFrameDataPriMem+0xa>
    12c2:	88 23       	and	r24, r24
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <lookupFreezeFrameDataPriMem+0x74>
    12c6:	21 50       	subi	r18, 0x01	; 1
    12c8:	31 09       	sbc	r19, r1
    12ca:	92 e2       	ldi	r25, 0x22	; 34
    12cc:	92 9f       	mul	r25, r18
    12ce:	b0 01       	movw	r22, r0
    12d0:	93 9f       	mul	r25, r19
    12d2:	70 0d       	add	r23, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	9b 01       	movw	r18, r22
    12d8:	20 5d       	subi	r18, 0xD0	; 208
    12da:	3e 4f       	sbci	r19, 0xFE	; 254
    12dc:	fa 01       	movw	r30, r20
    12de:	31 83       	std	Z+1, r19	; 0x01
    12e0:	20 83       	st	Z, r18
    12e2:	08 95       	ret

000012e4 <setOperationCycleState>:
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	85 30       	cpi	r24, 0x05	; 5
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <setOperationCycleState+0xc>
    12ee:	7f c0       	rjmp	.+254    	; 0x13ee <setOperationCycleState+0x10a>
    12f0:	61 30       	cpi	r22, 0x01	; 1
    12f2:	19 f0       	breq	.+6      	; 0x12fa <setOperationCycleState+0x16>
    12f4:	62 30       	cpi	r22, 0x02	; 2
    12f6:	c1 f1       	breq	.+112    	; 0x1368 <setOperationCycleState+0x84>
    12f8:	7c c0       	rjmp	.+248    	; 0x13f2 <setOperationCycleState+0x10e>
    12fa:	e8 2f       	mov	r30, r24
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	e9 58       	subi	r30, 0x89	; 137
    1300:	fa 4f       	sbci	r31, 0xFA	; 250
    1302:	60 83       	st	Z, r22
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	2a c0       	rjmp	.+84     	; 0x135e <setOperationCycleState+0x7a>
    130a:	9b e0       	ldi	r25, 0x0B	; 11
    130c:	92 9f       	mul	r25, r18
    130e:	f0 01       	movw	r30, r0
    1310:	93 9f       	mul	r25, r19
    1312:	f0 0d       	add	r31, r0
    1314:	11 24       	eor	r1, r1
    1316:	ea 5a       	subi	r30, 0xAA	; 170
    1318:	fa 4f       	sbci	r31, 0xFA	; 250
    131a:	40 81       	ld	r20, Z
    131c:	51 81       	ldd	r21, Z+1	; 0x01
    131e:	45 2b       	or	r20, r21
    1320:	e1 f0       	breq	.+56     	; 0x135a <setOperationCycleState+0x76>
    1322:	92 9f       	mul	r25, r18
    1324:	f0 01       	movw	r30, r0
    1326:	93 9f       	mul	r25, r19
    1328:	f0 0d       	add	r31, r0
    132a:	11 24       	eor	r1, r1
    132c:	ea 5a       	subi	r30, 0xAA	; 170
    132e:	fa 4f       	sbci	r31, 0xFA	; 250
    1330:	02 80       	ldd	r0, Z+2	; 0x02
    1332:	f3 81       	ldd	r31, Z+3	; 0x03
    1334:	e0 2d       	mov	r30, r0
    1336:	03 80       	ldd	r0, Z+3	; 0x03
    1338:	f4 81       	ldd	r31, Z+4	; 0x04
    133a:	e0 2d       	mov	r30, r0
    133c:	94 81       	ldd	r25, Z+4	; 0x04
    133e:	89 13       	cpse	r24, r25
    1340:	0c c0       	rjmp	.+24     	; 0x135a <setOperationCycleState+0x76>
    1342:	9b e0       	ldi	r25, 0x0B	; 11
    1344:	92 9f       	mul	r25, r18
    1346:	f0 01       	movw	r30, r0
    1348:	93 9f       	mul	r25, r19
    134a:	f0 0d       	add	r31, r0
    134c:	11 24       	eor	r1, r1
    134e:	ea 5a       	subi	r30, 0xAA	; 170
    1350:	fa 4f       	sbci	r31, 0xFA	; 250
    1352:	90 85       	ldd	r25, Z+8	; 0x08
    1354:	9d 7f       	andi	r25, 0xFD	; 253
    1356:	90 64       	ori	r25, 0x40	; 64
    1358:	90 87       	std	Z+8, r25	; 0x08
    135a:	2f 5f       	subi	r18, 0xFF	; 255
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	23 30       	cpi	r18, 0x03	; 3
    1360:	31 05       	cpc	r19, r1
    1362:	98 f2       	brcs	.-90     	; 0x130a <setOperationCycleState+0x26>
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	46 c0       	rjmp	.+140    	; 0x13f4 <setOperationCycleState+0x110>
    1368:	c8 2f       	mov	r28, r24
    136a:	e8 2f       	mov	r30, r24
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	e9 58       	subi	r30, 0x89	; 137
    1370:	fa 4f       	sbci	r31, 0xFA	; 250
    1372:	60 83       	st	Z, r22
    1374:	00 e0       	ldi	r16, 0x00	; 0
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	35 c0       	rjmp	.+106    	; 0x13e4 <setOperationCycleState+0x100>
    137a:	8b e0       	ldi	r24, 0x0B	; 11
    137c:	80 9f       	mul	r24, r16
    137e:	f0 01       	movw	r30, r0
    1380:	81 9f       	mul	r24, r17
    1382:	f0 0d       	add	r31, r0
    1384:	11 24       	eor	r1, r1
    1386:	ea 5a       	subi	r30, 0xAA	; 170
    1388:	fa 4f       	sbci	r31, 0xFA	; 250
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	89 2b       	or	r24, r25
    1390:	39 f1       	breq	.+78     	; 0x13e0 <setOperationCycleState+0xfc>
    1392:	8b e0       	ldi	r24, 0x0B	; 11
    1394:	80 9f       	mul	r24, r16
    1396:	f0 01       	movw	r30, r0
    1398:	81 9f       	mul	r24, r17
    139a:	f0 0d       	add	r31, r0
    139c:	11 24       	eor	r1, r1
    139e:	ea 5a       	subi	r30, 0xAA	; 170
    13a0:	fa 4f       	sbci	r31, 0xFA	; 250
    13a2:	02 80       	ldd	r0, Z+2	; 0x02
    13a4:	f3 81       	ldd	r31, Z+3	; 0x03
    13a6:	e0 2d       	mov	r30, r0
    13a8:	a3 81       	ldd	r26, Z+3	; 0x03
    13aa:	b4 81       	ldd	r27, Z+4	; 0x04
    13ac:	14 96       	adiw	r26, 0x04	; 4
    13ae:	8c 91       	ld	r24, X
    13b0:	c8 13       	cpse	r28, r24
    13b2:	16 c0       	rjmp	.+44     	; 0x13e0 <setOperationCycleState+0xfc>
    13b4:	8b e0       	ldi	r24, 0x0B	; 11
    13b6:	80 9f       	mul	r24, r16
    13b8:	d0 01       	movw	r26, r0
    13ba:	81 9f       	mul	r24, r17
    13bc:	b0 0d       	add	r27, r0
    13be:	11 24       	eor	r1, r1
    13c0:	aa 5a       	subi	r26, 0xAA	; 170
    13c2:	ba 4f       	sbci	r27, 0xFA	; 250
    13c4:	18 96       	adiw	r26, 0x08	; 8
    13c6:	8c 91       	ld	r24, X
    13c8:	18 97       	sbiw	r26, 0x08	; 8
    13ca:	81 fd       	sbrc	r24, 1
    13cc:	09 c0       	rjmp	.+18     	; 0x13e0 <setOperationCycleState+0xfc>
    13ce:	86 fd       	sbrc	r24, 6
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <setOperationCycleState+0xfc>
    13d2:	bd 01       	movw	r22, r26
    13d4:	8b 7f       	andi	r24, 0xFB	; 251
    13d6:	18 96       	adiw	r26, 0x08	; 8
    13d8:	8c 93       	st	X, r24
    13da:	cf 01       	movw	r24, r30
    13dc:	0e 94 98 07 	call	0xf30	; 0xf30 <storeEventEvtMem>
    13e0:	0f 5f       	subi	r16, 0xFF	; 255
    13e2:	1f 4f       	sbci	r17, 0xFF	; 255
    13e4:	03 30       	cpi	r16, 0x03	; 3
    13e6:	11 05       	cpc	r17, r1
    13e8:	40 f2       	brcs	.-112    	; 0x137a <setOperationCycleState+0x96>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <setOperationCycleState+0x110>
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <setOperationCycleState+0x110>
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <getDidData>:
    13fc:	6f 92       	push	r6
    13fe:	7f 92       	push	r7
    1400:	8f 92       	push	r8
    1402:	9f 92       	push	r9
    1404:	af 92       	push	r10
    1406:	bf 92       	push	r11
    1408:	cf 92       	push	r12
    140a:	df 92       	push	r13
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <getDidData+0x1e>
    141a:	1f 92       	push	r1
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	6b 01       	movw	r12, r22
    1422:	3a 01       	movw	r6, r20
    1424:	1a 82       	std	Y+2, r1	; 0x02
    1426:	19 82       	std	Y+1, r1	; 0x01
    1428:	dc 01       	movw	r26, r24
    142a:	8d 90       	ld	r8, X+
    142c:	9c 90       	ld	r9, X
    142e:	e1 2c       	mov	r14, r1
    1430:	f1 2c       	mov	r15, r1
    1432:	a1 2c       	mov	r10, r1
    1434:	b1 2c       	mov	r11, r1
    1436:	ac c0       	rjmp	.+344    	; 0x1590 <getDidData+0x194>
    1438:	19 96       	adiw	r26, 0x09	; 9
    143a:	8c 91       	ld	r24, X
    143c:	19 97       	sbiw	r26, 0x09	; 9
    143e:	81 11       	cpse	r24, r1
    1440:	b2 c0       	rjmp	.+356    	; 0x15a6 <getDidData+0x1aa>
    1442:	14 96       	adiw	r26, 0x04	; 4
    1444:	ed 91       	ld	r30, X+
    1446:	fc 91       	ld	r31, X
    1448:	15 97       	sbiw	r26, 0x05	; 5
    144a:	30 97       	sbiw	r30, 0x00	; 0
    144c:	59 f0       	breq	.+22     	; 0x1464 <getDidData+0x68>
    144e:	ce 01       	movw	r24, r28
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	09 95       	icall
    1454:	88 23       	and	r24, r24
    1456:	59 f0       	breq	.+22     	; 0x146e <getDidData+0x72>
    1458:	d6 01       	movw	r26, r12
    145a:	ed 91       	ld	r30, X+
    145c:	fc 91       	ld	r31, X
    145e:	11 82       	std	Z+1, r1	; 0x01
    1460:	10 82       	st	Z, r1
    1462:	a4 c0       	rjmp	.+328    	; 0x15ac <getDidData+0x1b0>
    1464:	18 96       	adiw	r26, 0x08	; 8
    1466:	8c 91       	ld	r24, X
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	49 81       	ldd	r20, Y+1	; 0x01
    1470:	5a 81       	ldd	r21, Y+2	; 0x02
    1472:	c7 01       	movw	r24, r14
    1474:	84 0f       	add	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	45 97       	sbiw	r24, 0x15	; 21
    147c:	08 f0       	brcs	.+2      	; 0x1480 <getDidData+0x84>
    147e:	93 c0       	rjmp	.+294    	; 0x15a6 <getDidData+0x1aa>
    1480:	f6 01       	movw	r30, r12
    1482:	20 81       	ld	r18, Z
    1484:	31 81       	ldd	r19, Z+1	; 0x01
    1486:	f8 01       	movw	r30, r16
    1488:	a0 81       	ld	r26, Z
    148a:	b1 81       	ldd	r27, Z+1	; 0x01
    148c:	13 96       	adiw	r26, 0x03	; 3
    148e:	8c 91       	ld	r24, X
    1490:	f9 01       	movw	r30, r18
    1492:	ee 0d       	add	r30, r14
    1494:	ff 1d       	adc	r31, r15
    1496:	84 87       	std	Z+12, r24	; 0x0c
    1498:	c7 01       	movw	r24, r14
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	d6 01       	movw	r26, r12
    149e:	6d 91       	ld	r22, X+
    14a0:	7c 91       	ld	r23, X
    14a2:	f8 01       	movw	r30, r16
    14a4:	a0 81       	ld	r26, Z
    14a6:	b1 81       	ldd	r27, Z+1	; 0x01
    14a8:	12 96       	adiw	r26, 0x02	; 2
    14aa:	2c 91       	ld	r18, X
    14ac:	fb 01       	movw	r30, r22
    14ae:	e8 0f       	add	r30, r24
    14b0:	f9 1f       	adc	r31, r25
    14b2:	24 87       	std	Z+12, r18	; 0x0c
    14b4:	f2 e0       	ldi	r31, 0x02	; 2
    14b6:	ef 0e       	add	r14, r31
    14b8:	f1 1c       	adc	r15, r1
    14ba:	d8 01       	movw	r26, r16
    14bc:	ed 91       	ld	r30, X+
    14be:	fc 91       	ld	r31, X
    14c0:	01 90       	ld	r0, Z+
    14c2:	f0 81       	ld	r31, Z
    14c4:	e0 2d       	mov	r30, r0
    14c6:	30 97       	sbiw	r30, 0x00	; 0
    14c8:	09 f4       	brne	.+2      	; 0x14cc <getDidData+0xd0>
    14ca:	50 c0       	rjmp	.+160    	; 0x156c <getDidData+0x170>
    14cc:	ce 01       	movw	r24, r28
    14ce:	03 96       	adiw	r24, 0x03	; 3
    14d0:	09 95       	icall
    14d2:	81 11       	cpse	r24, r1
    14d4:	39 c0       	rjmp	.+114    	; 0x1548 <getDidData+0x14c>
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 11       	cpse	r24, r1
    14da:	36 c0       	rjmp	.+108    	; 0x1548 <getDidData+0x14c>
    14dc:	d8 01       	movw	r26, r16
    14de:	ed 91       	ld	r30, X+
    14e0:	fc 91       	ld	r31, X
    14e2:	06 80       	ldd	r0, Z+6	; 0x06
    14e4:	f7 81       	ldd	r31, Z+7	; 0x07
    14e6:	e0 2d       	mov	r30, r0
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	e1 f0       	breq	.+56     	; 0x1524 <getDidData+0x128>
    14ec:	d6 01       	movw	r26, r12
    14ee:	2d 91       	ld	r18, X+
    14f0:	3c 91       	ld	r19, X
    14f2:	c7 01       	movw	r24, r14
    14f4:	0c 96       	adiw	r24, 0x0c	; 12
    14f6:	82 0f       	add	r24, r18
    14f8:	93 1f       	adc	r25, r19
    14fa:	09 95       	icall
    14fc:	88 23       	and	r24, r24
    14fe:	69 f0       	breq	.+26     	; 0x151a <getDidData+0x11e>
    1500:	f6 01       	movw	r30, r12
    1502:	20 81       	ld	r18, Z
    1504:	31 81       	ldd	r19, Z+1	; 0x01
    1506:	49 81       	ldd	r20, Y+1	; 0x01
    1508:	5a 81       	ldd	r21, Y+2	; 0x02
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	70 e0       	ldi	r23, 0x00	; 0
    150e:	c7 01       	movw	r24, r14
    1510:	0c 96       	adiw	r24, 0x0c	; 12
    1512:	82 0f       	add	r24, r18
    1514:	93 1f       	adc	r25, r19
    1516:	0e 94 15 1b 	call	0x362a	; 0x362a <memset>
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	e8 0e       	add	r14, r24
    1520:	f9 1e       	adc	r15, r25
    1522:	33 c0       	rjmp	.+102    	; 0x158a <getDidData+0x18e>
    1524:	d6 01       	movw	r26, r12
    1526:	2d 91       	ld	r18, X+
    1528:	3c 91       	ld	r19, X
    152a:	c7 01       	movw	r24, r14
    152c:	0c 96       	adiw	r24, 0x0c	; 12
    152e:	49 81       	ldd	r20, Y+1	; 0x01
    1530:	5a 81       	ldd	r21, Y+2	; 0x02
    1532:	61 e0       	ldi	r22, 0x01	; 1
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	82 0f       	add	r24, r18
    1538:	93 1f       	adc	r25, r19
    153a:	0e 94 15 1b 	call	0x362a	; 0x362a <memset>
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	e8 0e       	add	r14, r24
    1544:	f9 1e       	adc	r15, r25
    1546:	21 c0       	rjmp	.+66     	; 0x158a <getDidData+0x18e>
    1548:	f6 01       	movw	r30, r12
    154a:	20 81       	ld	r18, Z
    154c:	31 81       	ldd	r19, Z+1	; 0x01
    154e:	c7 01       	movw	r24, r14
    1550:	0c 96       	adiw	r24, 0x0c	; 12
    1552:	49 81       	ldd	r20, Y+1	; 0x01
    1554:	5a 81       	ldd	r21, Y+2	; 0x02
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	82 0f       	add	r24, r18
    155c:	93 1f       	adc	r25, r19
    155e:	0e 94 15 1b 	call	0x362a	; 0x362a <memset>
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	e8 0e       	add	r14, r24
    1568:	f9 1e       	adc	r15, r25
    156a:	0f c0       	rjmp	.+30     	; 0x158a <getDidData+0x18e>
    156c:	d6 01       	movw	r26, r12
    156e:	2d 91       	ld	r18, X+
    1570:	3c 91       	ld	r19, X
    1572:	c7 01       	movw	r24, r14
    1574:	0c 96       	adiw	r24, 0x0c	; 12
    1576:	61 e0       	ldi	r22, 0x01	; 1
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	82 0f       	add	r24, r18
    157c:	93 1f       	adc	r25, r19
    157e:	0e 94 15 1b 	call	0x362a	; 0x362a <memset>
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	e8 0e       	add	r14, r24
    1588:	f9 1e       	adc	r15, r25
    158a:	bf ef       	ldi	r27, 0xFF	; 255
    158c:	ab 1a       	sub	r10, r27
    158e:	bb 0a       	sbc	r11, r27
    1590:	85 01       	movw	r16, r10
    1592:	00 0f       	add	r16, r16
    1594:	11 1f       	adc	r17, r17
    1596:	08 0d       	add	r16, r8
    1598:	19 1d       	adc	r17, r9
    159a:	f8 01       	movw	r30, r16
    159c:	a0 81       	ld	r26, Z
    159e:	b1 81       	ldd	r27, Z+1	; 0x01
    15a0:	10 97       	sbiw	r26, 0x00	; 0
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <getDidData+0x1aa>
    15a4:	49 cf       	rjmp	.-366    	; 0x1438 <getDidData+0x3c>
    15a6:	d3 01       	movw	r26, r6
    15a8:	ed 92       	st	X+, r14
    15aa:	fc 92       	st	X, r15
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	bf 90       	pop	r11
    15c4:	af 90       	pop	r10
    15c6:	9f 90       	pop	r9
    15c8:	8f 90       	pop	r8
    15ca:	7f 90       	pop	r7
    15cc:	6f 90       	pop	r6
    15ce:	08 95       	ret

000015d0 <getFreezeFrameData>:
    15d0:	cf 92       	push	r12
    15d2:	df 92       	push	r13
    15d4:	ef 92       	push	r14
    15d6:	ff 92       	push	r15
    15d8:	0f 93       	push	r16
    15da:	1f 93       	push	r17
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <getFreezeFrameData+0x12>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <getFreezeFrameData+0x14>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	dc 01       	movw	r26, r24
    15ea:	7c 83       	std	Y+4, r23	; 0x04
    15ec:	6b 83       	std	Y+3, r22	; 0x03
    15ee:	1a 82       	std	Y+2, r1	; 0x02
    15f0:	19 82       	std	Y+1, r1	; 0x01
    15f2:	82 e2       	ldi	r24, 0x22	; 34
    15f4:	fb 01       	movw	r30, r22
    15f6:	11 92       	st	Z+, r1
    15f8:	8a 95       	dec	r24
    15fa:	e9 f7       	brne	.-6      	; 0x15f6 <getFreezeFrameData+0x26>
    15fc:	f9 01       	movw	r30, r18
    15fe:	80 85       	ldd	r24, Z+8	; 0x08
    1600:	80 fd       	sbrc	r24, 0
    1602:	07 c0       	rjmp	.+14     	; 0x1612 <getFreezeFrameData+0x42>
    1604:	43 30       	cpi	r20, 0x03	; 3
    1606:	39 f0       	breq	.+14     	; 0x1616 <getFreezeFrameData+0x46>
    1608:	eb 81       	ldd	r30, Y+3	; 0x03
    160a:	fc 81       	ldd	r31, Y+4	; 0x04
    160c:	11 82       	std	Z+1, r1	; 0x01
    160e:	10 82       	st	Z, r1
    1610:	9a c0       	rjmp	.+308    	; 0x1746 <getFreezeFrameData+0x176>
    1612:	82 e0       	ldi	r24, 0x02	; 2
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <getFreezeFrameData+0x48>
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	17 96       	adiw	r26, 0x07	; 7
    161a:	6d 91       	ld	r22, X+
    161c:	7c 91       	ld	r23, X
    161e:	18 97       	sbiw	r26, 0x08	; 8
    1620:	61 15       	cp	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	e9 f0       	breq	.+58     	; 0x1660 <getFreezeFrameData+0x90>
    1626:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <__data_end>
    162a:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <__data_end+0x1>
    162e:	0d c0       	rjmp	.+26     	; 0x164a <getFreezeFrameData+0x7a>
    1630:	f8 01       	movw	r30, r16
    1632:	92 81       	ldd	r25, Z+2	; 0x02
    1634:	89 13       	cpse	r24, r25
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <getFreezeFrameData+0x76>
    1638:	4f 5f       	subi	r20, 0xFF	; 255
    163a:	5f 4f       	sbci	r21, 0xFF	; 255
    163c:	50 93 29 01 	sts	0x0129, r21	; 0x800129 <__data_end+0x1>
    1640:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <__data_end>
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <getFreezeFrameData+0x94>
    1646:	4f 5f       	subi	r20, 0xFF	; 255
    1648:	5f 4f       	sbci	r21, 0xFF	; 255
    164a:	fa 01       	movw	r30, r20
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	e6 0f       	add	r30, r22
    1652:	f7 1f       	adc	r31, r23
    1654:	00 81       	ld	r16, Z
    1656:	11 81       	ldd	r17, Z+1	; 0x01
    1658:	01 15       	cp	r16, r1
    165a:	11 05       	cpc	r17, r1
    165c:	49 f7       	brne	.-46     	; 0x1630 <getFreezeFrameData+0x60>
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <getFreezeFrameData+0x94>
    1660:	00 e0       	ldi	r16, 0x00	; 0
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	69 01       	movw	r12, r18
    1666:	7d 01       	movw	r14, r26
    1668:	01 15       	cp	r16, r1
    166a:	11 05       	cpc	r17, r1
    166c:	a9 f0       	breq	.+42     	; 0x1698 <getFreezeFrameData+0xc8>
    166e:	d8 01       	movw	r26, r16
    1670:	13 96       	adiw	r26, 0x03	; 3
    1672:	8d 91       	ld	r24, X+
    1674:	9c 91       	ld	r25, X
    1676:	14 97       	sbiw	r26, 0x04	; 4
    1678:	89 2b       	or	r24, r25
    167a:	91 f0       	breq	.+36     	; 0x16a0 <getFreezeFrameData+0xd0>
    167c:	8c 91       	ld	r24, X
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	79 f4       	brne	.+30     	; 0x16a0 <getFreezeFrameData+0xd0>
    1682:	ae 01       	movw	r20, r28
    1684:	4f 5f       	subi	r20, 0xFF	; 255
    1686:	5f 4f       	sbci	r21, 0xFF	; 255
    1688:	be 01       	movw	r22, r28
    168a:	6d 5f       	subi	r22, 0xFD	; 253
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	c8 01       	movw	r24, r16
    1690:	03 96       	adiw	r24, 0x03	; 3
    1692:	0e 94 fe 09 	call	0x13fc	; 0x13fc <getDidData>
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <getFreezeFrameData+0xd0>
    1698:	eb 81       	ldd	r30, Y+3	; 0x03
    169a:	fc 81       	ldd	r31, Y+4	; 0x04
    169c:	11 82       	std	Z+1, r1	; 0x01
    169e:	10 82       	st	Z, r1
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	9a 81       	ldd	r25, Y+2	; 0x02
    16a4:	89 2b       	or	r24, r25
    16a6:	09 f4       	brne	.+2      	; 0x16aa <getFreezeFrameData+0xda>
    16a8:	42 c0       	rjmp	.+132    	; 0x172e <getFreezeFrameData+0x15e>
    16aa:	eb 81       	ldd	r30, Y+3	; 0x03
    16ac:	fc 81       	ldd	r31, Y+4	; 0x04
    16ae:	d7 01       	movw	r26, r14
    16b0:	8d 91       	ld	r24, X+
    16b2:	9c 91       	ld	r25, X
    16b4:	91 83       	std	Z+1, r25	; 0x01
    16b6:	80 83       	st	Z, r24
    16b8:	eb 80       	ldd	r14, Y+3	; 0x03
    16ba:	fc 80       	ldd	r15, Y+4	; 0x04
    16bc:	f6 01       	movw	r30, r12
    16be:	86 81       	ldd	r24, Z+6	; 0x06
    16c0:	97 81       	ldd	r25, Z+7	; 0x07
    16c2:	d7 01       	movw	r26, r14
    16c4:	14 96       	adiw	r26, 0x04	; 4
    16c6:	9c 93       	st	X, r25
    16c8:	8e 93       	st	-X, r24
    16ca:	13 97       	sbiw	r26, 0x03	; 3
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	9a 81       	ldd	r25, Y+2	; 0x02
    16d0:	16 96       	adiw	r26, 0x06	; 6
    16d2:	9c 93       	st	X, r25
    16d4:	8e 93       	st	-X, r24
    16d6:	15 97       	sbiw	r26, 0x05	; 5
    16d8:	f8 01       	movw	r30, r16
    16da:	81 81       	ldd	r24, Z+1	; 0x01
    16dc:	17 96       	adiw	r26, 0x07	; 7
    16de:	8c 93       	st	X, r24
    16e0:	17 97       	sbiw	r26, 0x07	; 7
    16e2:	80 81       	ld	r24, Z
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	8c 93       	st	X, r24
    16e8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <FF_TimeStamp>
    16ec:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <FF_TimeStamp+0x1>
    16f0:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <FF_TimeStamp+0x2>
    16f4:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <FF_TimeStamp+0x3>
    16f8:	f7 01       	movw	r30, r14
    16fa:	80 87       	std	Z+8, r24	; 0x08
    16fc:	91 87       	std	Z+9, r25	; 0x09
    16fe:	a2 87       	std	Z+10, r26	; 0x0a
    1700:	b3 87       	std	Z+11, r27	; 0x0b
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	a1 1d       	adc	r26, r1
    1706:	b1 1d       	adc	r27, r1
    1708:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <FF_TimeStamp>
    170c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <FF_TimeStamp+0x1>
    1710:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <FF_TimeStamp+0x2>
    1714:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <FF_TimeStamp+0x3>
    1718:	60 e2       	ldi	r22, 0x20	; 32
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	c7 01       	movw	r24, r14
    171e:	0e 94 0c 04 	call	0x818	; 0x818 <calcChecksum>
    1722:	d7 01       	movw	r26, r14
    1724:	91 96       	adiw	r26, 0x21	; 33
    1726:	9c 93       	st	X, r25
    1728:	8e 93       	st	-X, r24
    172a:	90 97       	sbiw	r26, 0x20	; 32
    172c:	0c c0       	rjmp	.+24     	; 0x1746 <getFreezeFrameData+0x176>
    172e:	eb 81       	ldd	r30, Y+3	; 0x03
    1730:	fc 81       	ldd	r31, Y+4	; 0x04
    1732:	11 82       	std	Z+1, r1	; 0x01
    1734:	10 82       	st	Z, r1
    1736:	eb 81       	ldd	r30, Y+3	; 0x03
    1738:	fc 81       	ldd	r31, Y+4	; 0x04
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
    173e:	96 83       	std	Z+6, r25	; 0x06
    1740:	85 83       	std	Z+5, r24	; 0x05
    1742:	11 a2       	std	Z+33, r1	; 0x21
    1744:	10 a2       	std	Z+32, r1	; 0x20
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	df 90       	pop	r13
    175c:	cf 90       	pop	r12
    175e:	08 95       	ret

00001760 <mergeExtendedDataEvtMem>:
    1760:	6f 92       	push	r6
    1762:	7f 92       	push	r7
    1764:	8f 92       	push	r8
    1766:	9f 92       	push	r9
    1768:	af 92       	push	r10
    176a:	bf 92       	push	r11
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	00 d0       	rcall	.+0      	; 0x177e <mergeExtendedDataEvtMem+0x1e>
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	dc 01       	movw	r26, r24
    1784:	1a 82       	std	Y+2, r1	; 0x02
    1786:	19 82       	std	Y+1, r1	; 0x01
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	05 c0       	rjmp	.+10     	; 0x179a <mergeExtendedDataEvtMem+0x3a>
    1790:	92 30       	cpi	r25, 0x02	; 2
    1792:	09 f4       	brne	.+2      	; 0x1796 <mergeExtendedDataEvtMem+0x36>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	21 15       	cp	r18, r1
    179c:	31 05       	cpc	r19, r1
    179e:	49 f4       	brne	.+18     	; 0x17b2 <mergeExtendedDataEvtMem+0x52>
    17a0:	13 96       	adiw	r26, 0x03	; 3
    17a2:	ed 91       	ld	r30, X+
    17a4:	fc 91       	ld	r31, X
    17a6:	14 97       	sbiw	r26, 0x04	; 4
    17a8:	e2 0f       	add	r30, r18
    17aa:	f3 1f       	adc	r31, r19
    17ac:	91 81       	ldd	r25, Z+1	; 0x01
    17ae:	94 30       	cpi	r25, 0x04	; 4
    17b0:	79 f7       	brne	.-34     	; 0x1790 <mergeExtendedDataEvtMem+0x30>
    17b2:	88 23       	and	r24, r24
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <mergeExtendedDataEvtMem+0x58>
    17b6:	95 c0       	rjmp	.+298    	; 0x18e2 <mergeExtendedDataEvtMem+0x182>
    17b8:	4b 01       	movw	r8, r22
    17ba:	6d 01       	movw	r12, r26
    17bc:	be 01       	movw	r22, r28
    17be:	6f 5f       	subi	r22, 0xFF	; 255
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	cd 01       	movw	r24, r26
    17c4:	0e 94 bd 07 	call	0xf7a	; 0xf7a <getExtendedDataPriMem>
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	9a 81       	ldd	r25, Y+2	; 0x02
    17cc:	89 2b       	or	r24, r25
    17ce:	f9 f4       	brne	.+62     	; 0x180e <mergeExtendedDataEvtMem+0xae>
    17d0:	88 c0       	rjmp	.+272    	; 0x18e2 <mergeExtendedDataEvtMem+0x182>
    17d2:	fc 01       	movw	r30, r24
    17d4:	ee 0f       	add	r30, r30
    17d6:	ff 1f       	adc	r31, r31
    17d8:	ee 0f       	add	r30, r30
    17da:	ff 1f       	adc	r31, r31
    17dc:	ee 0f       	add	r30, r30
    17de:	ff 1f       	adc	r31, r31
    17e0:	e1 53       	subi	r30, 0x31	; 49
    17e2:	fa 4f       	sbci	r31, 0xFA	; 250
    17e4:	40 81       	ld	r20, Z
    17e6:	51 81       	ldd	r21, Z+1	; 0x01
    17e8:	d6 01       	movw	r26, r12
    17ea:	2d 91       	ld	r18, X+
    17ec:	3c 91       	ld	r19, X
    17ee:	42 17       	cp	r20, r18
    17f0:	53 07       	cpc	r21, r19
    17f2:	59 f4       	brne	.+22     	; 0x180a <mergeExtendedDataEvtMem+0xaa>
    17f4:	9c 01       	movw	r18, r24
    17f6:	22 0f       	add	r18, r18
    17f8:	33 1f       	adc	r19, r19
    17fa:	22 0f       	add	r18, r18
    17fc:	33 1f       	adc	r19, r19
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	f9 01       	movw	r30, r18
    1804:	e1 53       	subi	r30, 0x31	; 49
    1806:	fa 4f       	sbci	r31, 0xFA	; 250
    1808:	3f 01       	movw	r6, r30
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <mergeExtendedDataEvtMem+0xb6>
    180e:	61 2c       	mov	r6, r1
    1810:	71 2c       	mov	r7, r1
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	91 05       	cpc	r25, r1
    181a:	d8 f2       	brcs	.-74     	; 0x17d2 <mergeExtendedDataEvtMem+0x72>
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	a1 2c       	mov	r10, r1
    1820:	b1 2c       	mov	r11, r1
    1822:	e1 2c       	mov	r14, r1
    1824:	f1 2c       	mov	r15, r1
    1826:	3b c0       	rjmp	.+118    	; 0x189e <mergeExtendedDataEvtMem+0x13e>
    1828:	d8 01       	movw	r26, r16
    182a:	14 96       	adiw	r26, 0x04	; 4
    182c:	8c 91       	ld	r24, X
    182e:	14 97       	sbiw	r26, 0x04	; 4
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	91 f1       	breq	.+100    	; 0x1898 <mergeExtendedDataEvtMem+0x138>
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	89 f4       	brne	.+34     	; 0x185a <mergeExtendedDataEvtMem+0xfa>
    1838:	12 96       	adiw	r26, 0x02	; 2
    183a:	4d 91       	ld	r20, X+
    183c:	5c 91       	ld	r21, X
    183e:	13 97       	sbiw	r26, 0x03	; 3
    1840:	c5 01       	movw	r24, r10
    1842:	02 96       	adiw	r24, 0x02	; 2
    1844:	b4 01       	movw	r22, r8
    1846:	68 0f       	add	r22, r24
    1848:	79 1f       	adc	r23, r25
    184a:	29 81       	ldd	r18, Y+1	; 0x01
    184c:	3a 81       	ldd	r19, Y+2	; 0x02
    184e:	82 0f       	add	r24, r18
    1850:	93 1f       	adc	r25, r19
    1852:	0e 94 0c 1b 	call	0x3618	; 0x3618 <memcpy>
    1856:	21 e0       	ldi	r18, 0x01	; 1
    1858:	1a c0       	rjmp	.+52     	; 0x188e <mergeExtendedDataEvtMem+0x12e>
    185a:	81 11       	cpse	r24, r1
    185c:	18 c0       	rjmp	.+48     	; 0x188e <mergeExtendedDataEvtMem+0x12e>
    185e:	61 14       	cp	r6, r1
    1860:	71 04       	cpc	r7, r1
    1862:	21 f0       	breq	.+8      	; 0x186c <mergeExtendedDataEvtMem+0x10c>
    1864:	f3 01       	movw	r30, r6
    1866:	84 81       	ldd	r24, Z+4	; 0x04
    1868:	81 11       	cpse	r24, r1
    186a:	11 c0       	rjmp	.+34     	; 0x188e <mergeExtendedDataEvtMem+0x12e>
    186c:	d8 01       	movw	r26, r16
    186e:	12 96       	adiw	r26, 0x02	; 2
    1870:	4d 91       	ld	r20, X+
    1872:	5c 91       	ld	r21, X
    1874:	13 97       	sbiw	r26, 0x03	; 3
    1876:	c5 01       	movw	r24, r10
    1878:	02 96       	adiw	r24, 0x02	; 2
    187a:	b4 01       	movw	r22, r8
    187c:	68 0f       	add	r22, r24
    187e:	79 1f       	adc	r23, r25
    1880:	29 81       	ldd	r18, Y+1	; 0x01
    1882:	3a 81       	ldd	r19, Y+2	; 0x02
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	0e 94 0c 1b 	call	0x3618	; 0x3618 <memcpy>
    188c:	21 e0       	ldi	r18, 0x01	; 1
    188e:	f8 01       	movw	r30, r16
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	a8 0e       	add	r10, r24
    1896:	b9 1e       	adc	r11, r25
    1898:	ff ef       	ldi	r31, 0xFF	; 255
    189a:	ef 1a       	sub	r14, r31
    189c:	ff 0a       	sbc	r15, r31
    189e:	d6 01       	movw	r26, r12
    18a0:	15 96       	adiw	r26, 0x05	; 5
    18a2:	ed 91       	ld	r30, X+
    18a4:	fc 91       	ld	r31, X
    18a6:	16 97       	sbiw	r26, 0x06	; 6
    18a8:	c7 01       	movw	r24, r14
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	e8 0f       	add	r30, r24
    18b0:	f9 1f       	adc	r31, r25
    18b2:	00 81       	ld	r16, Z
    18b4:	11 81       	ldd	r17, Z+1	; 0x01
    18b6:	01 15       	cp	r16, r1
    18b8:	11 05       	cpc	r17, r1
    18ba:	09 f0       	breq	.+2      	; 0x18be <mergeExtendedDataEvtMem+0x15e>
    18bc:	b5 cf       	rjmp	.-150    	; 0x1828 <mergeExtendedDataEvtMem+0xc8>
    18be:	21 30       	cpi	r18, 0x01	; 1
    18c0:	81 f4       	brne	.+32     	; 0x18e2 <mergeExtendedDataEvtMem+0x182>
    18c2:	e9 81       	ldd	r30, Y+1	; 0x01
    18c4:	fa 81       	ldd	r31, Y+2	; 0x02
    18c6:	d4 01       	movw	r26, r8
    18c8:	8d 91       	ld	r24, X+
    18ca:	9c 91       	ld	r25, X
    18cc:	11 97       	sbiw	r26, 0x01	; 1
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	e9 81       	ldd	r30, Y+1	; 0x01
    18d4:	fa 81       	ldd	r31, Y+2	; 0x02
    18d6:	1c 96       	adiw	r26, 0x0c	; 12
    18d8:	8d 91       	ld	r24, X+
    18da:	9c 91       	ld	r25, X
    18dc:	1d 97       	sbiw	r26, 0x0d	; 13
    18de:	95 87       	std	Z+13, r25	; 0x0d
    18e0:	84 87       	std	Z+12, r24	; 0x0c
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	df 90       	pop	r13
    18f4:	cf 90       	pop	r12
    18f6:	bf 90       	pop	r11
    18f8:	af 90       	pop	r10
    18fa:	9f 90       	pop	r9
    18fc:	8f 90       	pop	r8
    18fe:	7f 90       	pop	r7
    1900:	6f 90       	pop	r6
    1902:	08 95       	ret

00001904 <bubbleSort>:
    1904:	8f 92       	push	r8
    1906:	9f 92       	push	r9
    1908:	af 92       	push	r10
    190a:	bf 92       	push	r11
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	a2 97       	sbiw	r28, 0x22	; 34
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	6c 01       	movw	r12, r24
    192e:	e1 2c       	mov	r14, r1
    1930:	f1 2c       	mov	r15, r1
    1932:	41 c0       	rjmp	.+130    	; 0x19b6 <bubbleSort+0xb2>
    1934:	8b 01       	movw	r16, r22
    1936:	01 50       	subi	r16, 0x01	; 1
    1938:	11 09       	sbc	r17, r1
    193a:	37 c0       	rjmp	.+110    	; 0x19aa <bubbleSort+0xa6>
    193c:	92 e2       	ldi	r25, 0x22	; 34
    193e:	9e 9d       	mul	r25, r14
    1940:	a0 01       	movw	r20, r0
    1942:	9f 9d       	mul	r25, r15
    1944:	50 0d       	add	r21, r0
    1946:	11 24       	eor	r1, r1
    1948:	4c 0d       	add	r20, r12
    194a:	5d 1d       	adc	r21, r13
    194c:	fa 01       	movw	r30, r20
    194e:	80 84       	ldd	r8, Z+8	; 0x08
    1950:	91 84       	ldd	r9, Z+9	; 0x09
    1952:	a2 84       	ldd	r10, Z+10	; 0x0a
    1954:	b3 84       	ldd	r11, Z+11	; 0x0b
    1956:	90 9f       	mul	r25, r16
    1958:	90 01       	movw	r18, r0
    195a:	91 9f       	mul	r25, r17
    195c:	30 0d       	add	r19, r0
    195e:	11 24       	eor	r1, r1
    1960:	2c 0d       	add	r18, r12
    1962:	3d 1d       	adc	r19, r13
    1964:	f9 01       	movw	r30, r18
    1966:	80 85       	ldd	r24, Z+8	; 0x08
    1968:	91 85       	ldd	r25, Z+9	; 0x09
    196a:	a2 85       	ldd	r26, Z+10	; 0x0a
    196c:	b3 85       	ldd	r27, Z+11	; 0x0b
    196e:	88 15       	cp	r24, r8
    1970:	99 05       	cpc	r25, r9
    1972:	aa 05       	cpc	r26, r10
    1974:	bb 05       	cpc	r27, r11
    1976:	b8 f4       	brcc	.+46     	; 0x19a6 <bubbleSort+0xa2>
    1978:	82 e2       	ldi	r24, 0x22	; 34
    197a:	fa 01       	movw	r30, r20
    197c:	de 01       	movw	r26, r28
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	01 90       	ld	r0, Z+
    1982:	0d 92       	st	X+, r0
    1984:	8a 95       	dec	r24
    1986:	e1 f7       	brne	.-8      	; 0x1980 <bubbleSort+0x7c>
    1988:	82 e2       	ldi	r24, 0x22	; 34
    198a:	f9 01       	movw	r30, r18
    198c:	da 01       	movw	r26, r20
    198e:	01 90       	ld	r0, Z+
    1990:	0d 92       	st	X+, r0
    1992:	8a 95       	dec	r24
    1994:	e1 f7       	brne	.-8      	; 0x198e <bubbleSort+0x8a>
    1996:	82 e2       	ldi	r24, 0x22	; 34
    1998:	fe 01       	movw	r30, r28
    199a:	31 96       	adiw	r30, 0x01	; 1
    199c:	d9 01       	movw	r26, r18
    199e:	01 90       	ld	r0, Z+
    19a0:	0d 92       	st	X+, r0
    19a2:	8a 95       	dec	r24
    19a4:	e1 f7       	brne	.-8      	; 0x199e <bubbleSort+0x9a>
    19a6:	01 50       	subi	r16, 0x01	; 1
    19a8:	11 09       	sbc	r17, r1
    19aa:	e0 16       	cp	r14, r16
    19ac:	f1 06       	cpc	r15, r17
    19ae:	30 f2       	brcs	.-116    	; 0x193c <bubbleSort+0x38>
    19b0:	ff ef       	ldi	r31, 0xFF	; 255
    19b2:	ef 1a       	sub	r14, r31
    19b4:	ff 0a       	sbc	r15, r31
    19b6:	e6 16       	cp	r14, r22
    19b8:	f7 06       	cpc	r15, r23
    19ba:	08 f4       	brcc	.+2      	; 0x19be <bubbleSort+0xba>
    19bc:	bb cf       	rjmp	.-138    	; 0x1934 <bubbleSort+0x30>
    19be:	a2 96       	adiw	r28, 0x22	; 34
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	08 95       	ret

000019e4 <lookupFreezeFrameForDisplacement>:
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	ec 01       	movw	r28, r24
    19ea:	63 e0       	ldi	r22, 0x03	; 3
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	80 e3       	ldi	r24, 0x30	; 48
    19f0:	91 e0       	ldi	r25, 0x01	; 1
    19f2:	0e 94 82 0c 	call	0x1904	; 0x1904 <bubbleSort>
    19f6:	9e 01       	movw	r18, r28
    19f8:	48 e0       	ldi	r20, 0x08	; 8
    19fa:	63 e0       	ldi	r22, 0x03	; 3
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	80 e3       	ldi	r24, 0x30	; 48
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	0e 94 37 06 	call	0xc6e	; 0xc6e <retrieveEventStatusBit>
    1a06:	81 11       	cpse	r24, r1
    1a08:	08 c0       	rjmp	.+16     	; 0x1a1a <lookupFreezeFrameForDisplacement+0x36>
    1a0a:	9e 01       	movw	r18, r28
    1a0c:	41 e0       	ldi	r20, 0x01	; 1
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	80 e3       	ldi	r24, 0x30	; 48
    1a14:	91 e0       	ldi	r25, 0x01	; 1
    1a16:	0e 94 37 06 	call	0xc6e	; 0xc6e <retrieveEventStatusBit>
    1a1a:	88 23       	and	r24, r24
    1a1c:	91 f0       	breq	.+36     	; 0x1a42 <lookupFreezeFrameForDisplacement+0x5e>
    1a1e:	18 c0       	rjmp	.+48     	; 0x1a50 <lookupFreezeFrameForDisplacement+0x6c>
    1a20:	92 e2       	ldi	r25, 0x22	; 34
    1a22:	92 9f       	mul	r25, r18
    1a24:	f0 01       	movw	r30, r0
    1a26:	93 9f       	mul	r25, r19
    1a28:	f0 0d       	add	r31, r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	e0 5d       	subi	r30, 0xD0	; 208
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	92 81       	ldd	r25, Z+2	; 0x02
    1a32:	92 30       	cpi	r25, 0x02	; 2
    1a34:	19 f0       	breq	.+6      	; 0x1a3c <lookupFreezeFrameForDisplacement+0x58>
    1a36:	f9 83       	std	Y+1, r31	; 0x01
    1a38:	e8 83       	st	Y, r30
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	2f 5f       	subi	r18, 0xFF	; 255
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <lookupFreezeFrameForDisplacement+0x62>
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	23 30       	cpi	r18, 0x03	; 3
    1a48:	31 05       	cpc	r19, r1
    1a4a:	10 f4       	brcc	.+4      	; 0x1a50 <lookupFreezeFrameForDisplacement+0x6c>
    1a4c:	88 23       	and	r24, r24
    1a4e:	41 f3       	breq	.-48     	; 0x1a20 <lookupFreezeFrameForDisplacement+0x3c>
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <storeFreezeFrameDataPriMem>:
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <storeFreezeFrameDataPriMem+0xa>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	8c 01       	movw	r16, r24
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	24 c0       	rjmp	.+72     	; 0x1ab6 <storeFreezeFrameDataPriMem+0x60>
    1a6e:	92 e2       	ldi	r25, 0x22	; 34
    1a70:	92 9f       	mul	r25, r18
    1a72:	d0 01       	movw	r26, r0
    1a74:	93 9f       	mul	r25, r19
    1a76:	b0 0d       	add	r27, r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	a0 5d       	subi	r26, 0xD0	; 208
    1a7c:	be 4f       	sbci	r27, 0xFE	; 254
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	d8 01       	movw	r26, r16
    1a84:	4d 91       	ld	r20, X+
    1a86:	5c 91       	ld	r21, X
    1a88:	e4 17       	cp	r30, r20
    1a8a:	f5 07       	cpc	r31, r21
    1a8c:	79 f4       	brne	.+30     	; 0x1aac <storeFreezeFrameDataPriMem+0x56>
    1a8e:	82 e2       	ldi	r24, 0x22	; 34
    1a90:	82 9f       	mul	r24, r18
    1a92:	f0 01       	movw	r30, r0
    1a94:	83 9f       	mul	r24, r19
    1a96:	f0 0d       	add	r31, r0
    1a98:	11 24       	eor	r1, r1
    1a9a:	e0 5d       	subi	r30, 0xD0	; 208
    1a9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a9e:	97 81       	ldd	r25, Z+7	; 0x07
    1aa0:	fb 01       	movw	r30, r22
    1aa2:	87 81       	ldd	r24, Z+7	; 0x07
    1aa4:	98 17       	cp	r25, r24
    1aa6:	21 f0       	breq	.+8      	; 0x1ab0 <storeFreezeFrameDataPriMem+0x5a>
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <storeFreezeFrameDataPriMem+0x5c>
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <storeFreezeFrameDataPriMem+0x5c>
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	2f 5f       	subi	r18, 0xFF	; 255
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	23 30       	cpi	r18, 0x03	; 3
    1ab8:	31 05       	cpc	r19, r1
    1aba:	10 f4       	brcc	.+4      	; 0x1ac0 <storeFreezeFrameDataPriMem+0x6a>
    1abc:	99 23       	and	r25, r25
    1abe:	b9 f2       	breq	.-82     	; 0x1a6e <storeFreezeFrameDataPriMem+0x18>
    1ac0:	99 23       	and	r25, r25
    1ac2:	09 f1       	breq	.+66     	; 0x1b06 <storeFreezeFrameDataPriMem+0xb0>
    1ac4:	21 50       	subi	r18, 0x01	; 1
    1ac6:	31 09       	sbc	r19, r1
    1ac8:	82 e2       	ldi	r24, 0x22	; 34
    1aca:	82 9f       	mul	r24, r18
    1acc:	d0 01       	movw	r26, r0
    1ace:	83 9f       	mul	r24, r19
    1ad0:	b0 0d       	add	r27, r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	a0 5d       	subi	r26, 0xD0	; 208
    1ad6:	be 4f       	sbci	r27, 0xFE	; 254
    1ad8:	fb 01       	movw	r30, r22
    1ada:	01 90       	ld	r0, Z+
    1adc:	0d 92       	st	X+, r0
    1ade:	8a 95       	dec	r24
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <storeFreezeFrameDataPriMem+0x84>
    1ae2:	3a c0       	rjmp	.+116    	; 0x1b58 <storeFreezeFrameDataPriMem+0x102>
    1ae4:	82 e2       	ldi	r24, 0x22	; 34
    1ae6:	82 9f       	mul	r24, r18
    1ae8:	f0 01       	movw	r30, r0
    1aea:	83 9f       	mul	r24, r19
    1aec:	f0 0d       	add	r31, r0
    1aee:	11 24       	eor	r1, r1
    1af0:	e0 5d       	subi	r30, 0xD0	; 208
    1af2:	fe 4f       	sbci	r31, 0xFE	; 254
    1af4:	40 81       	ld	r20, Z
    1af6:	51 81       	ldd	r21, Z+1	; 0x01
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	45 2b       	or	r20, r21
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <storeFreezeFrameDataPriMem+0xaa>
    1afe:	80 e0       	ldi	r24, 0x00	; 0
    1b00:	2f 5f       	subi	r18, 0xFF	; 255
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <storeFreezeFrameDataPriMem+0xb6>
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	23 30       	cpi	r18, 0x03	; 3
    1b0e:	31 05       	cpc	r19, r1
    1b10:	10 f4       	brcc	.+4      	; 0x1b16 <storeFreezeFrameDataPriMem+0xc0>
    1b12:	88 23       	and	r24, r24
    1b14:	39 f3       	breq	.-50     	; 0x1ae4 <storeFreezeFrameDataPriMem+0x8e>
    1b16:	88 23       	and	r24, r24
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <storeFreezeFrameDataPriMem+0xe4>
    1b1a:	21 50       	subi	r18, 0x01	; 1
    1b1c:	31 09       	sbc	r19, r1
    1b1e:	82 e2       	ldi	r24, 0x22	; 34
    1b20:	82 9f       	mul	r24, r18
    1b22:	d0 01       	movw	r26, r0
    1b24:	83 9f       	mul	r24, r19
    1b26:	b0 0d       	add	r27, r0
    1b28:	11 24       	eor	r1, r1
    1b2a:	a0 5d       	subi	r26, 0xD0	; 208
    1b2c:	be 4f       	sbci	r27, 0xFE	; 254
    1b2e:	fb 01       	movw	r30, r22
    1b30:	01 90       	ld	r0, Z+
    1b32:	0d 92       	st	X+, r0
    1b34:	8a 95       	dec	r24
    1b36:	e1 f7       	brne	.-8      	; 0x1b30 <storeFreezeFrameDataPriMem+0xda>
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <storeFreezeFrameDataPriMem+0x102>
    1b3a:	8b 01       	movw	r16, r22
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <lookupFreezeFrameForDisplacement>
    1b44:	88 23       	and	r24, r24
    1b46:	41 f0       	breq	.+16     	; 0x1b58 <storeFreezeFrameDataPriMem+0x102>
    1b48:	a9 81       	ldd	r26, Y+1	; 0x01
    1b4a:	ba 81       	ldd	r27, Y+2	; 0x02
    1b4c:	82 e2       	ldi	r24, 0x22	; 34
    1b4e:	f8 01       	movw	r30, r16
    1b50:	01 90       	ld	r0, Z+
    1b52:	0d 92       	st	X+, r0
    1b54:	8a 95       	dec	r24
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <storeFreezeFrameDataPriMem+0xfa>
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <storeFreezeFrameDataEvtMem>:
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	8c 01       	movw	r16, r24
    1b74:	7b 01       	movw	r14, r22
    1b76:	c0 e0       	ldi	r28, 0x00	; 0
    1b78:	d0 e0       	ldi	r29, 0x00	; 0
    1b7a:	0c c0       	rjmp	.+24     	; 0x1b94 <storeFreezeFrameDataEvtMem+0x2e>
    1b7c:	82 30       	cpi	r24, 0x02	; 2
    1b7e:	49 f4       	brne	.+18     	; 0x1b92 <storeFreezeFrameDataEvtMem+0x2c>
    1b80:	d7 01       	movw	r26, r14
    1b82:	12 96       	adiw	r26, 0x02	; 2
    1b84:	8c 91       	ld	r24, X
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	21 f4       	brne	.+8      	; 0x1b92 <storeFreezeFrameDataEvtMem+0x2c>
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <storeFreezeFrameDataPriMem>
    1b92:	21 96       	adiw	r28, 0x01	; 1
    1b94:	20 97       	sbiw	r28, 0x00	; 0
    1b96:	51 f4       	brne	.+20     	; 0x1bac <storeFreezeFrameDataEvtMem+0x46>
    1b98:	d8 01       	movw	r26, r16
    1b9a:	13 96       	adiw	r26, 0x03	; 3
    1b9c:	ed 91       	ld	r30, X+
    1b9e:	fc 91       	ld	r31, X
    1ba0:	14 97       	sbiw	r26, 0x04	; 4
    1ba2:	ec 0f       	add	r30, r28
    1ba4:	fd 1f       	adc	r31, r29
    1ba6:	81 81       	ldd	r24, Z+1	; 0x01
    1ba8:	84 30       	cpi	r24, 0x04	; 4
    1baa:	41 f7       	brne	.-48     	; 0x1b7c <storeFreezeFrameDataEvtMem+0x16>
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	08 95       	ret

00001bba <updateEventStatusRec>:
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <updateEventStatusRec+0x14>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	6c 01       	movw	r12, r24
    1bd4:	f6 2e       	mov	r15, r22
    1bd6:	e4 2e       	mov	r14, r20
    1bd8:	89 01       	movw	r16, r18
    1bda:	be 01       	movw	r22, r28
    1bdc:	6f 5f       	subi	r22, 0xFF	; 255
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	dc 01       	movw	r26, r24
    1be2:	8d 91       	ld	r24, X+
    1be4:	9c 91       	ld	r25, X
    1be6:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	9a 81       	ldd	r25, Y+2	; 0x02
    1bee:	89 2b       	or	r24, r25
    1bf0:	f1 f4       	brne	.+60     	; 0x1c2e <updateEventStatusRec+0x74>
    1bf2:	ee 20       	and	r14, r14
    1bf4:	e1 f0       	breq	.+56     	; 0x1c2e <updateEventStatusRec+0x74>
    1bf6:	be 01       	movw	r22, r28
    1bf8:	6f 5f       	subi	r22, 0xFF	; 255
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	89 f0       	breq	.+34     	; 0x1c2e <updateEventStatusRec+0x74>
    1c0c:	d6 01       	movw	r26, r12
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	d3 82       	std	Z+3, r13	; 0x03
    1c1c:	c2 82       	std	Z+2, r12	; 0x02
    1c1e:	14 82       	std	Z+4, r1	; 0x04
    1c20:	15 82       	std	Z+5, r1	; 0x05
    1c22:	17 82       	std	Z+7, r1	; 0x07
    1c24:	16 82       	std	Z+6, r1	; 0x06
    1c26:	80 e5       	ldi	r24, 0x50	; 80
    1c28:	80 87       	std	Z+8, r24	; 0x08
    1c2a:	11 86       	std	Z+9, r1	; 0x09
    1c2c:	12 86       	std	Z+10, r1	; 0x0a
    1c2e:	69 81       	ldd	r22, Y+1	; 0x01
    1c30:	7a 81       	ldd	r23, Y+2	; 0x02
    1c32:	61 15       	cp	r22, r1
    1c34:	71 05       	cpc	r23, r1
    1c36:	09 f4       	brne	.+2      	; 0x1c3a <updateEventStatusRec+0x80>
    1c38:	80 c0       	rjmp	.+256    	; 0x1d3a <updateEventStatusRec+0x180>
    1c3a:	fb 01       	movw	r30, r22
    1c3c:	e4 80       	ldd	r14, Z+4	; 0x04
    1c3e:	d6 01       	movw	r26, r12
    1c40:	13 96       	adiw	r26, 0x03	; 3
    1c42:	ed 91       	ld	r30, X+
    1c44:	fc 91       	ld	r31, X
    1c46:	14 97       	sbiw	r26, 0x04	; 4
    1c48:	06 80       	ldd	r0, Z+6	; 0x06
    1c4a:	f7 81       	ldd	r31, Z+7	; 0x07
    1c4c:	e0 2d       	mov	r30, r0
    1c4e:	30 97       	sbiw	r30, 0x00	; 0
    1c50:	79 f0       	breq	.+30     	; 0x1c70 <updateEventStatusRec+0xb6>
    1c52:	80 81       	ld	r24, Z
    1c54:	88 23       	and	r24, r24
    1c56:	19 f0       	breq	.+6      	; 0x1c5e <updateEventStatusRec+0xa4>
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	31 f0       	breq	.+12     	; 0x1c68 <updateEventStatusRec+0xae>
    1c5c:	09 c0       	rjmp	.+18     	; 0x1c70 <updateEventStatusRec+0xb6>
    1c5e:	8f 2d       	mov	r24, r15
    1c60:	0e 94 dd 04 	call	0x9ba	; 0x9ba <preDebounceNone>
    1c64:	f8 2e       	mov	r15, r24
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <updateEventStatusRec+0xb6>
    1c68:	8f 2d       	mov	r24, r15
    1c6a:	0e 94 de 04 	call	0x9bc	; 0x9bc <preDebounceCounterBased>
    1c6e:	f8 2e       	mov	r15, r24
    1c70:	e9 81       	ldd	r30, Y+1	; 0x01
    1c72:	fa 81       	ldd	r31, Y+2	; 0x02
    1c74:	b4 80       	ldd	r11, Z+4	; 0x04
    1c76:	11 86       	std	Z+9, r1	; 0x09
    1c78:	b1 e0       	ldi	r27, 0x01	; 1
    1c7a:	fb 12       	cpse	r15, r27
    1c7c:	26 c0       	rjmp	.+76     	; 0x1cca <updateEventStatusRec+0x110>
    1c7e:	80 85       	ldd	r24, Z+8	; 0x08
    1c80:	80 fd       	sbrc	r24, 0
    1c82:	0e c0       	rjmp	.+28     	; 0x1ca0 <updateEventStatusRec+0xe6>
    1c84:	26 81       	ldd	r18, Z+6	; 0x06
    1c86:	37 81       	ldd	r19, Z+7	; 0x07
    1c88:	2f 5f       	subi	r18, 0xFF	; 255
    1c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c8c:	37 83       	std	Z+7, r19	; 0x07
    1c8e:	26 83       	std	Z+6, r18	; 0x06
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	91 87       	std	Z+9, r25	; 0x09
    1c94:	81 fd       	sbrc	r24, 1
    1c96:	04 c0       	rjmp	.+8      	; 0x1ca0 <updateEventStatusRec+0xe6>
    1c98:	bf 01       	movw	r22, r30
    1c9a:	c6 01       	movw	r24, r12
    1c9c:	0e 94 56 05 	call	0xaac	; 0xaac <handleFaultConfirmation>
    1ca0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca4:	80 85       	ldd	r24, Z+8	; 0x08
    1ca6:	87 62       	ori	r24, 0x27	; 39
    1ca8:	8f 7a       	andi	r24, 0xAF	; 175
    1caa:	80 87       	std	Z+8, r24	; 0x08
    1cac:	d6 01       	movw	r26, r12
    1cae:	1b 96       	adiw	r26, 0x0b	; 11
    1cb0:	2d 91       	ld	r18, X+
    1cb2:	3c 91       	ld	r19, X
    1cb4:	1c 97       	sbiw	r26, 0x0c	; 12
    1cb6:	21 15       	cp	r18, r1
    1cb8:	31 05       	cpc	r19, r1
    1cba:	39 f0       	breq	.+14     	; 0x1cca <updateEventStatusRec+0x110>
    1cbc:	d9 01       	movw	r26, r18
    1cbe:	15 96       	adiw	r26, 0x05	; 5
    1cc0:	9c 91       	ld	r25, X
    1cc2:	92 30       	cpi	r25, 0x02	; 2
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <updateEventStatusRec+0x110>
    1cc6:	80 68       	ori	r24, 0x80	; 128
    1cc8:	80 87       	std	Z+8, r24	; 0x08
    1cca:	f1 10       	cpse	r15, r1
    1ccc:	19 c0       	rjmp	.+50     	; 0x1d00 <updateEventStatusRec+0x146>
    1cce:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd2:	80 85       	ldd	r24, Z+8	; 0x08
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	91 74       	andi	r25, 0x41	; 65
    1cd8:	11 f0       	breq	.+4      	; 0x1cde <updateEventStatusRec+0x124>
    1cda:	91 e0       	ldi	r25, 0x01	; 1
    1cdc:	91 87       	std	Z+9, r25	; 0x09
    1cde:	8e 7a       	andi	r24, 0xAE	; 174
    1ce0:	80 87       	std	Z+8, r24	; 0x08
    1ce2:	d6 01       	movw	r26, r12
    1ce4:	1b 96       	adiw	r26, 0x0b	; 11
    1ce6:	2d 91       	ld	r18, X+
    1ce8:	3c 91       	ld	r19, X
    1cea:	1c 97       	sbiw	r26, 0x0c	; 12
    1cec:	21 15       	cp	r18, r1
    1cee:	31 05       	cpc	r19, r1
    1cf0:	39 f0       	breq	.+14     	; 0x1d00 <updateEventStatusRec+0x146>
    1cf2:	d9 01       	movw	r26, r18
    1cf4:	15 96       	adiw	r26, 0x05	; 5
    1cf6:	9c 91       	ld	r25, X
    1cf8:	92 30       	cpi	r25, 0x02	; 2
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <updateEventStatusRec+0x146>
    1cfc:	8f 77       	andi	r24, 0x7F	; 127
    1cfe:	80 87       	std	Z+8, r24	; 0x08
    1d00:	b3 e0       	ldi	r27, 0x03	; 3
    1d02:	fb 12       	cpse	r15, r27
    1d04:	08 c0       	rjmp	.+16     	; 0x1d16 <updateEventStatusRec+0x15c>
    1d06:	1e 14       	cp	r1, r14
    1d08:	34 f0       	brlt	.+12     	; 0x1d16 <updateEventStatusRec+0x15c>
    1d0a:	1b 14       	cp	r1, r11
    1d0c:	24 f4       	brge	.+8      	; 0x1d16 <updateEventStatusRec+0x15c>
    1d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d10:	fa 81       	ldd	r31, Y+2	; 0x02
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	81 87       	std	Z+9, r24	; 0x09
    1d16:	f8 01       	movw	r30, r16
    1d18:	95 81       	ldd	r25, Z+5	; 0x05
    1d1a:	84 81       	ldd	r24, Z+4	; 0x04
    1d1c:	89 17       	cp	r24, r25
    1d1e:	0c f4       	brge	.+2      	; 0x1d22 <updateEventStatusRec+0x168>
    1d20:	89 2f       	mov	r24, r25
    1d22:	d8 01       	movw	r26, r16
    1d24:	15 96       	adiw	r26, 0x05	; 5
    1d26:	8c 93       	st	X, r24
    1d28:	15 97       	sbiw	r26, 0x05	; 5
    1d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2e:	8b e0       	ldi	r24, 0x0B	; 11
    1d30:	01 90       	ld	r0, Z+
    1d32:	0d 92       	st	X+, r0
    1d34:	8a 95       	dec	r24
    1d36:	e1 f7       	brne	.-8      	; 0x1d30 <updateEventStatusRec+0x176>
    1d38:	0b c0       	rjmp	.+22     	; 0x1d50 <updateEventStatusRec+0x196>
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	11 82       	std	Z+1, r1	; 0x01
    1d3e:	10 82       	st	Z, r1
    1d40:	14 82       	std	Z+4, r1	; 0x04
    1d42:	15 82       	std	Z+5, r1	; 0x05
    1d44:	17 82       	std	Z+7, r1	; 0x07
    1d46:	16 82       	std	Z+6, r1	; 0x06
    1d48:	80 e5       	ldi	r24, 0x50	; 80
    1d4a:	80 87       	std	Z+8, r24	; 0x08
    1d4c:	11 86       	std	Z+9, r1	; 0x09
    1d4e:	12 86       	std	Z+10, r1	; 0x0a
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	df 91       	pop	r29
    1d56:	cf 91       	pop	r28
    1d58:	1f 91       	pop	r17
    1d5a:	0f 91       	pop	r16
    1d5c:	ff 90       	pop	r15
    1d5e:	ef 90       	pop	r14
    1d60:	df 90       	pop	r13
    1d62:	cf 90       	pop	r12
    1d64:	bf 90       	pop	r11
    1d66:	08 95       	ret

00001d68 <handleEvent>:
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	e1 97       	sbiw	r28, 0x31	; 49
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	f6 2e       	mov	r15, r22
    1d84:	be 01       	movw	r22, r28
    1d86:	6f 5f       	subi	r22, 0xFF	; 255
    1d88:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lookupEventIdParameter>
    1d8e:	09 81       	ldd	r16, Y+1	; 0x01
    1d90:	1a 81       	ldd	r17, Y+2	; 0x02
    1d92:	01 15       	cp	r16, r1
    1d94:	11 05       	cpc	r17, r1
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <handleEvent+0x32>
    1d98:	5a c0       	rjmp	.+180    	; 0x1e4e <handleEvent+0xe6>
    1d9a:	d8 01       	movw	r26, r16
    1d9c:	13 96       	adiw	r26, 0x03	; 3
    1d9e:	ed 91       	ld	r30, X+
    1da0:	fc 91       	ld	r31, X
    1da2:	14 97       	sbiw	r26, 0x04	; 4
    1da4:	e4 81       	ldd	r30, Z+4	; 0x04
    1da6:	e5 30       	cpi	r30, 0x05	; 5
    1da8:	08 f0       	brcs	.+2      	; 0x1dac <handleEvent+0x44>
    1daa:	53 c0       	rjmp	.+166    	; 0x1e52 <handleEvent+0xea>
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	e9 58       	subi	r30, 0x89	; 137
    1db0:	fa 4f       	sbci	r31, 0xFA	; 250
    1db2:	80 81       	ld	r24, Z
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	09 f0       	breq	.+2      	; 0x1dba <handleEvent+0x52>
    1db8:	4e c0       	rjmp	.+156    	; 0x1e56 <handleEvent+0xee>
    1dba:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <disableDtcStorage>
    1dbe:	88 23       	and	r24, r24
    1dc0:	69 f0       	breq	.+26     	; 0x1ddc <handleEvent+0x74>
    1dc2:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <disableDtcStorage+0x1>
    1dc6:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <disableDtcStorage+0x2>
    1dca:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <disableDtcStorage+0x3>
    1dce:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <disableDtcStorage+0x4>
    1dd2:	a8 01       	movw	r20, r16
    1dd4:	0e 94 22 04 	call	0x844	; 0x844 <checkDtcGroup>
    1dd8:	81 11       	cpse	r24, r1
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <handleEvent+0xf2>
    1ddc:	be 01       	movw	r22, r28
    1dde:	6d 5f       	subi	r22, 0xFD	; 253
    1de0:	7f 4f       	sbci	r23, 0xFF	; 255
    1de2:	f8 01       	movw	r30, r16
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
    1dec:	9e 01       	movw	r18, r28
    1dee:	2b 5f       	subi	r18, 0xFB	; 251
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	6f 2d       	mov	r22, r15
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfa:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <updateEventStatusRec>
    1dfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e00:	88 23       	and	r24, r24
    1e02:	69 f1       	breq	.+90     	; 0x1e5e <handleEvent+0xf6>
    1e04:	be 01       	movw	r22, r28
    1e06:	6b 5f       	subi	r22, 0xFB	; 251
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0e:	0e 94 98 07 	call	0xf30	; 0xf30 <storeEventEvtMem>
    1e12:	f3 e0       	ldi	r31, 0x03	; 3
    1e14:	ff 16       	cp	r15, r31
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <handleEvent+0xb6>
    1e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1a:	80 ff       	sbrs	r24, 0
    1e1c:	22 c0       	rjmp	.+68     	; 0x1e62 <handleEvent+0xfa>
    1e1e:	9e 01       	movw	r18, r28
    1e20:	2b 5f       	subi	r18, 0xFB	; 251
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	4f 2d       	mov	r20, r15
    1e26:	be 01       	movw	r22, r28
    1e28:	60 5f       	subi	r22, 0xF0	; 240
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <getFreezeFrameData>
    1e34:	88 89       	ldd	r24, Y+16	; 0x10
    1e36:	99 89       	ldd	r25, Y+17	; 0x11
    1e38:	89 2b       	or	r24, r25
    1e3a:	a9 f0       	breq	.+42     	; 0x1e66 <handleEvent+0xfe>
    1e3c:	be 01       	movw	r22, r28
    1e3e:	60 5f       	subi	r22, 0xF0	; 240
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	9a 81       	ldd	r25, Y+2	; 0x02
    1e46:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <storeFreezeFrameDataEvtMem>
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	0d c0       	rjmp	.+26     	; 0x1e68 <handleEvent+0x100>
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	0b c0       	rjmp	.+22     	; 0x1e68 <handleEvent+0x100>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	09 c0       	rjmp	.+18     	; 0x1e68 <handleEvent+0x100>
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	07 c0       	rjmp	.+14     	; 0x1e68 <handleEvent+0x100>
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <handleEvent+0x100>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	03 c0       	rjmp	.+6      	; 0x1e68 <handleEvent+0x100>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <handleEvent+0x100>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	e1 96       	adiw	r28, 0x31	; 49
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	1f 91       	pop	r17
    1e7a:	0f 91       	pop	r16
    1e7c:	ff 90       	pop	r15
    1e7e:	08 95       	ret

00001e80 <getEventStatusRec>:
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <getEventStatusRec+0xa>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	8b 01       	movw	r16, r22
    1e90:	be 01       	movw	r22, r28
    1e92:	6f 5f       	subi	r22, 0xFF	; 255
    1e94:	7f 4f       	sbci	r23, 0xFF	; 255
    1e96:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	30 97       	sbiw	r30, 0x00	; 0
    1ea0:	39 f0       	breq	.+14     	; 0x1eb0 <getEventStatusRec+0x30>
    1ea2:	8b e0       	ldi	r24, 0x0B	; 11
    1ea4:	d8 01       	movw	r26, r16
    1ea6:	01 90       	ld	r0, Z+
    1ea8:	0d 92       	st	X+, r0
    1eaa:	8a 95       	dec	r24
    1eac:	e1 f7       	brne	.-8      	; 0x1ea6 <getEventStatusRec+0x26>
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <getEventStatusRec+0x36>
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	11 82       	std	Z+1, r1	; 0x01
    1eb4:	10 82       	st	Z, r1
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	1f 91       	pop	r17
    1ec0:	0f 91       	pop	r16
    1ec2:	08 95       	ret

00001ec4 <getInternalElement>:
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	2b 97       	sbiw	r28, 0x0b	; 11
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	16 2f       	mov	r17, r22
    1ee0:	7a 01       	movw	r14, r20
    1ee2:	be 01       	movw	r22, r28
    1ee4:	6f 5f       	subi	r22, 0xFF	; 255
    1ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee8:	fc 01       	movw	r30, r24
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <getEventStatusRec>
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	89 2b       	or	r24, r25
    1ef8:	99 f0       	breq	.+38     	; 0x1f20 <getInternalElement+0x5c>
    1efa:	11 30       	cpi	r17, 0x01	; 1
    1efc:	31 f4       	brne	.+12     	; 0x1f0a <getInternalElement+0x46>
    1efe:	88 85       	ldd	r24, Y+8	; 0x08
    1f00:	f7 01       	movw	r30, r14
    1f02:	80 83       	st	Z, r24
    1f04:	8f 81       	ldd	r24, Y+7	; 0x07
    1f06:	81 83       	std	Z+1, r24	; 0x01
    1f08:	0b c0       	rjmp	.+22     	; 0x1f20 <getInternalElement+0x5c>
    1f0a:	12 30       	cpi	r17, 0x02	; 2
    1f0c:	21 f4       	brne	.+8      	; 0x1f16 <getInternalElement+0x52>
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	f7 01       	movw	r30, r14
    1f12:	80 83       	st	Z, r24
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <getInternalElement+0x5c>
    1f16:	13 30       	cpi	r17, 0x03	; 3
    1f18:	19 f4       	brne	.+6      	; 0x1f20 <getInternalElement+0x5c>
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	80 83       	st	Z, r24
    1f20:	2b 96       	adiw	r28, 0x0b	; 11
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	de bf       	out	0x3e, r29	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	cd bf       	out	0x3d, r28	; 61
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	1f 91       	pop	r17
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <Dem_PreInit>:
    1f38:	cf 92       	push	r12
    1f3a:	df 92       	push	r13
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	cf 93       	push	r28
    1f46:	df 93       	push	r29
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <Dem_PreInit+0x12>
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
    1f4e:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <DEM_Config>
    1f52:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <DEM_Config+0x1>
    1f56:	b0 93 87 05 	sts	0x0587, r27	; 0x800587 <configSet+0x1>
    1f5a:	a0 93 86 05 	sts	0x0586, r26	; 0x800586 <configSet>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	06 c0       	rjmp	.+12     	; 0x1f70 <Dem_PreInit+0x38>
    1f64:	fc 01       	movw	r30, r24
    1f66:	e9 58       	subi	r30, 0x89	; 137
    1f68:	fa 4f       	sbci	r31, 0xFA	; 250
    1f6a:	22 e0       	ldi	r18, 0x02	; 2
    1f6c:	20 83       	st	Z, r18
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	85 30       	cpi	r24, 0x05	; 5
    1f72:	91 05       	cpc	r25, r1
    1f74:	b8 f3       	brcs	.-18     	; 0x1f64 <Dem_PreInit+0x2c>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	15 c0       	rjmp	.+42     	; 0x1fa6 <Dem_PreInit+0x6e>
    1f7c:	2b e0       	ldi	r18, 0x0B	; 11
    1f7e:	28 9f       	mul	r18, r24
    1f80:	f0 01       	movw	r30, r0
    1f82:	29 9f       	mul	r18, r25
    1f84:	f0 0d       	add	r31, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	ea 5a       	subi	r30, 0xAA	; 170
    1f8a:	fa 4f       	sbci	r31, 0xFA	; 250
    1f8c:	11 82       	std	Z+1, r1	; 0x01
    1f8e:	10 82       	st	Z, r1
    1f90:	13 82       	std	Z+3, r1	; 0x03
    1f92:	12 82       	std	Z+2, r1	; 0x02
    1f94:	14 82       	std	Z+4, r1	; 0x04
    1f96:	15 82       	std	Z+5, r1	; 0x05
    1f98:	17 82       	std	Z+7, r1	; 0x07
    1f9a:	16 82       	std	Z+6, r1	; 0x06
    1f9c:	20 e5       	ldi	r18, 0x50	; 80
    1f9e:	20 87       	std	Z+8, r18	; 0x08
    1fa0:	11 86       	std	Z+9, r1	; 0x09
    1fa2:	12 86       	std	Z+10, r1	; 0x0a
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	83 30       	cpi	r24, 0x03	; 3
    1fa8:	91 05       	cpc	r25, r1
    1faa:	40 f3       	brcs	.-48     	; 0x1f7c <Dem_PreInit+0x44>
    1fac:	cd 90       	ld	r12, X+
    1fae:	dc 90       	ld	r13, X
    1fb0:	e1 2c       	mov	r14, r1
    1fb2:	f1 2c       	mov	r15, r1
    1fb4:	17 c0       	rjmp	.+46     	; 0x1fe4 <Dem_PreInit+0xac>
    1fb6:	be 01       	movw	r22, r28
    1fb8:	6f 5f       	subi	r22, 0xFF	; 255
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	49 f0       	breq	.+18     	; 0x1fde <Dem_PreInit+0xa6>
    1fcc:	d8 01       	movw	r26, r16
    1fce:	8d 91       	ld	r24, X+
    1fd0:	9c 91       	ld	r25, X
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	80 83       	st	Z, r24
    1fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1fda:	13 83       	std	Z+3, r17	; 0x03
    1fdc:	02 83       	std	Z+2, r16	; 0x02
    1fde:	bf ef       	ldi	r27, 0xFF	; 255
    1fe0:	eb 1a       	sub	r14, r27
    1fe2:	fb 0a       	sbc	r15, r27
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	8c 01       	movw	r16, r24
    1fec:	00 0f       	add	r16, r16
    1fee:	11 1f       	adc	r17, r17
    1ff0:	00 0f       	add	r16, r16
    1ff2:	11 1f       	adc	r17, r17
    1ff4:	00 0f       	add	r16, r16
    1ff6:	11 1f       	adc	r17, r17
    1ff8:	08 1b       	sub	r16, r24
    1ffa:	19 0b       	sbc	r17, r25
    1ffc:	0c 0d       	add	r16, r12
    1ffe:	1d 1d       	adc	r17, r13
    2000:	f8 01       	movw	r30, r16
    2002:	85 85       	ldd	r24, Z+13	; 0x0d
    2004:	88 23       	and	r24, r24
    2006:	b9 f2       	breq	.-82     	; 0x1fb6 <Dem_PreInit+0x7e>
    2008:	40 e0       	ldi	r20, 0x00	; 0
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	24 c0       	rjmp	.+72     	; 0x2056 <Dem_PreInit+0x11e>
    200e:	82 e2       	ldi	r24, 0x22	; 34
    2010:	84 9f       	mul	r24, r20
    2012:	f0 01       	movw	r30, r0
    2014:	85 9f       	mul	r24, r21
    2016:	f0 0d       	add	r31, r0
    2018:	11 24       	eor	r1, r1
    201a:	e2 55       	subi	r30, 0x52	; 82
    201c:	fd 4f       	sbci	r31, 0xFD	; 253
    201e:	11 a2       	std	Z+33, r1	; 0x21
    2020:	10 a2       	std	Z+32, r1	; 0x20
    2022:	11 82       	std	Z+1, r1	; 0x01
    2024:	10 82       	st	Z, r1
    2026:	14 82       	std	Z+4, r1	; 0x04
    2028:	13 82       	std	Z+3, r1	; 0x03
    202a:	16 82       	std	Z+6, r1	; 0x06
    202c:	15 82       	std	Z+5, r1	; 0x05
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	0c c0       	rjmp	.+24     	; 0x204c <Dem_PreInit+0x114>
    2034:	22 e2       	ldi	r18, 0x22	; 34
    2036:	24 9f       	mul	r18, r20
    2038:	f0 01       	movw	r30, r0
    203a:	25 9f       	mul	r18, r21
    203c:	f0 0d       	add	r31, r0
    203e:	11 24       	eor	r1, r1
    2040:	e2 55       	subi	r30, 0x52	; 82
    2042:	fd 4f       	sbci	r31, 0xFD	; 253
    2044:	e8 0f       	add	r30, r24
    2046:	f9 1f       	adc	r31, r25
    2048:	14 86       	std	Z+12, r1	; 0x0c
    204a:	01 96       	adiw	r24, 0x01	; 1
    204c:	84 31       	cpi	r24, 0x14	; 20
    204e:	91 05       	cpc	r25, r1
    2050:	88 f3       	brcs	.-30     	; 0x2034 <Dem_PreInit+0xfc>
    2052:	4f 5f       	subi	r20, 0xFF	; 255
    2054:	5f 4f       	sbci	r21, 0xFF	; 255
    2056:	44 31       	cpi	r20, 0x14	; 20
    2058:	51 05       	cpc	r21, r1
    205a:	c8 f2       	brcs	.-78     	; 0x200e <Dem_PreInit+0xd6>
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	2c c0       	rjmp	.+88     	; 0x20ba <Dem_PreInit+0x182>
    2062:	ca 01       	movw	r24, r20
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	fc 01       	movw	r30, r24
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e8 1b       	sub	r30, r24
    2078:	f9 0b       	sbc	r31, r25
    207a:	ea 56       	subi	r30, 0x6A	; 106
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	15 86       	std	Z+13, r1	; 0x0d
    2080:	14 86       	std	Z+12, r1	; 0x0c
    2082:	11 82       	std	Z+1, r1	; 0x01
    2084:	10 82       	st	Z, r1
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	12 c0       	rjmp	.+36     	; 0x20b0 <Dem_PreInit+0x178>
    208c:	9a 01       	movw	r18, r20
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	f9 01       	movw	r30, r18
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	e2 1b       	sub	r30, r18
    20a2:	f3 0b       	sbc	r31, r19
    20a4:	ea 56       	subi	r30, 0x6A	; 106
    20a6:	fe 4f       	sbci	r31, 0xFE	; 254
    20a8:	e8 0f       	add	r30, r24
    20aa:	f9 1f       	adc	r31, r25
    20ac:	12 82       	std	Z+2, r1	; 0x02
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	8a 30       	cpi	r24, 0x0A	; 10
    20b2:	91 05       	cpc	r25, r1
    20b4:	58 f3       	brcs	.-42     	; 0x208c <Dem_PreInit+0x154>
    20b6:	4f 5f       	subi	r20, 0xFF	; 255
    20b8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ba:	44 31       	cpi	r20, 0x14	; 20
    20bc:	51 05       	cpc	r21, r1
    20be:	88 f2       	brcs	.-94     	; 0x2062 <Dem_PreInit+0x12a>
    20c0:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <disableDtcStorage>
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	0e 94 72 09 	call	0x12e4	; 0x12e4 <setOperationCycleState>
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <demState>
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	08 95       	ret

000020e8 <Dem_Init>:
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <Dem_Init+0xe>
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <demState>
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	91 f1       	breq	.+100    	; 0x2166 <Dem_Init+0x7e>
    2102:	61 e0       	ldi	r22, 0x01	; 1
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	0e 94 72 09 	call	0x12e4	; 0x12e4 <setOperationCycleState>
    210a:	10 c1       	rjmp	.+544    	; 0x232c <Dem_Init+0x244>
    210c:	c8 01       	movw	r24, r16
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	fc 01       	movw	r30, r24
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	ee 0f       	add	r30, r30
    211e:	ff 1f       	adc	r31, r31
    2120:	e8 1b       	sub	r30, r24
    2122:	f9 0b       	sbc	r31, r25
    2124:	e7 57       	subi	r30, 0x77	; 119
    2126:	fa 4f       	sbci	r31, 0xFA	; 250
    2128:	e0 80       	ld	r14, Z
    212a:	f1 80       	ldd	r15, Z+1	; 0x01
    212c:	c7 01       	movw	r24, r14
    212e:	0e 94 a1 04 	call	0x942	; 0x942 <checkEntryValid>
    2132:	ef 28       	or	r14, r15
    2134:	11 f0       	breq	.+4      	; 0x213a <Dem_Init+0x52>
    2136:	81 11       	cpse	r24, r1
    2138:	13 c0       	rjmp	.+38     	; 0x2160 <Dem_Init+0x78>
    213a:	c8 01       	movw	r24, r16
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	fc 01       	movw	r30, r24
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	ee 0f       	add	r30, r30
    2148:	ff 1f       	adc	r31, r31
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	e8 1b       	sub	r30, r24
    2150:	f9 0b       	sbc	r31, r25
    2152:	e7 57       	subi	r30, 0x77	; 119
    2154:	fa 4f       	sbci	r31, 0xFA	; 250
    2156:	8e e0       	ldi	r24, 0x0E	; 14
    2158:	df 01       	movw	r26, r30
    215a:	1d 92       	st	X+, r1
    215c:	8a 95       	dec	r24
    215e:	e9 f7       	brne	.-6      	; 0x215a <Dem_Init+0x72>
    2160:	0f 5f       	subi	r16, 0xFF	; 255
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	02 c0       	rjmp	.+4      	; 0x216a <Dem_Init+0x82>
    2166:	00 e0       	ldi	r16, 0x00	; 0
    2168:	10 e0       	ldi	r17, 0x00	; 0
    216a:	05 30       	cpi	r16, 0x05	; 5
    216c:	11 05       	cpc	r17, r1
    216e:	70 f2       	brcs	.-100    	; 0x210c <Dem_Init+0x24>
    2170:	00 e0       	ldi	r16, 0x00	; 0
    2172:	10 e0       	ldi	r17, 0x00	; 0
    2174:	2b c0       	rjmp	.+86     	; 0x21cc <Dem_Init+0xe4>
    2176:	c8 01       	movw	r24, r16
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	fc 01       	movw	r30, r24
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	ee 0f       	add	r30, r30
    2188:	ff 1f       	adc	r31, r31
    218a:	e8 1b       	sub	r30, r24
    218c:	f9 0b       	sbc	r31, r25
    218e:	ea 56       	subi	r30, 0x6A	; 106
    2190:	fe 4f       	sbci	r31, 0xFE	; 254
    2192:	80 81       	ld	r24, Z
    2194:	91 81       	ldd	r25, Z+1	; 0x01
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	b9 f0       	breq	.+46     	; 0x21c8 <Dem_Init+0xe0>
    219a:	be 01       	movw	r22, r28
    219c:	6f 5f       	subi	r22, 0xFF	; 255
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lookupEventIdParameter>
    21a4:	c8 01       	movw	r24, r16
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	bc 01       	movw	r22, r24
    21ac:	66 0f       	add	r22, r22
    21ae:	77 1f       	adc	r23, r23
    21b0:	66 0f       	add	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	66 0f       	add	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	68 1b       	sub	r22, r24
    21ba:	79 0b       	sbc	r23, r25
    21bc:	6a 56       	subi	r22, 0x6A	; 106
    21be:	7e 4f       	sbci	r23, 0xFE	; 254
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	9a 81       	ldd	r25, Y+2	; 0x02
    21c4:	0e 94 b0 0b 	call	0x1760	; 0x1760 <mergeExtendedDataEvtMem>
    21c8:	0f 5f       	subi	r16, 0xFF	; 255
    21ca:	1f 4f       	sbci	r17, 0xFF	; 255
    21cc:	04 31       	cpi	r16, 0x14	; 20
    21ce:	11 05       	cpc	r17, r1
    21d0:	90 f2       	brcs	.-92     	; 0x2176 <Dem_Init+0x8e>
    21d2:	00 e0       	ldi	r16, 0x00	; 0
    21d4:	10 e0       	ldi	r17, 0x00	; 0
    21d6:	34 c0       	rjmp	.+104    	; 0x2240 <Dem_Init+0x158>
    21d8:	f8 01       	movw	r30, r16
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	ee 0f       	add	r30, r30
    21e0:	ff 1f       	adc	r31, r31
    21e2:	ee 0f       	add	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	e1 53       	subi	r30, 0x31	; 49
    21e8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ea:	e0 80       	ld	r14, Z
    21ec:	f1 80       	ldd	r15, Z+1	; 0x01
    21ee:	c7 01       	movw	r24, r14
    21f0:	0e 94 a1 04 	call	0x942	; 0x942 <checkEntryValid>
    21f4:	ef 28       	or	r14, r15
    21f6:	11 f0       	breq	.+4      	; 0x21fc <Dem_Init+0x114>
    21f8:	81 11       	cpse	r24, r1
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <Dem_Init+0x132>
    21fc:	f8 01       	movw	r30, r16
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	ee 0f       	add	r30, r30
    2208:	ff 1f       	adc	r31, r31
    220a:	e1 53       	subi	r30, 0x31	; 49
    220c:	fa 4f       	sbci	r31, 0xFA	; 250
    220e:	88 e0       	ldi	r24, 0x08	; 8
    2210:	df 01       	movw	r26, r30
    2212:	1d 92       	st	X+, r1
    2214:	8a 95       	dec	r24
    2216:	e9 f7       	brne	.-6      	; 0x2212 <Dem_Init+0x12a>
    2218:	11 c0       	rjmp	.+34     	; 0x223c <Dem_Init+0x154>
    221a:	c8 01       	movw	r24, r16
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	9c 01       	movw	r18, r24
    222a:	21 53       	subi	r18, 0x31	; 49
    222c:	3a 4f       	sbci	r19, 0xFA	; 250
    222e:	79 01       	movw	r14, r18
    2230:	c9 01       	movw	r24, r18
    2232:	0e 94 6b 05 	call	0xad6	; 0xad6 <mergeEventStatusRec>
    2236:	c7 01       	movw	r24, r14
    2238:	0e 94 89 06 	call	0xd12	; 0xd12 <updateFreezeFrameOccurrencePreInit>
    223c:	0f 5f       	subi	r16, 0xFF	; 255
    223e:	1f 4f       	sbci	r17, 0xFF	; 255
    2240:	03 30       	cpi	r16, 0x03	; 3
    2242:	11 05       	cpc	r17, r1
    2244:	48 f2       	brcs	.-110    	; 0x21d8 <Dem_Init+0xf0>
    2246:	8c e2       	ldi	r24, 0x2C	; 44
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <initCurrentFreezeFrameTimeStamp>
    224e:	00 e0       	ldi	r16, 0x00	; 0
    2250:	10 e0       	ldi	r17, 0x00	; 0
    2252:	1f c0       	rjmp	.+62     	; 0x2292 <Dem_Init+0x1aa>
    2254:	82 e2       	ldi	r24, 0x22	; 34
    2256:	80 9f       	mul	r24, r16
    2258:	f0 01       	movw	r30, r0
    225a:	81 9f       	mul	r24, r17
    225c:	f0 0d       	add	r31, r0
    225e:	11 24       	eor	r1, r1
    2260:	e0 5d       	subi	r30, 0xD0	; 208
    2262:	fe 4f       	sbci	r31, 0xFE	; 254
    2264:	e0 80       	ld	r14, Z
    2266:	f1 80       	ldd	r15, Z+1	; 0x01
    2268:	c7 01       	movw	r24, r14
    226a:	0e 94 a1 04 	call	0x942	; 0x942 <checkEntryValid>
    226e:	ef 28       	or	r14, r15
    2270:	11 f0       	breq	.+4      	; 0x2276 <Dem_Init+0x18e>
    2272:	81 11       	cpse	r24, r1
    2274:	0c c0       	rjmp	.+24     	; 0x228e <Dem_Init+0x1a6>
    2276:	82 e2       	ldi	r24, 0x22	; 34
    2278:	80 9f       	mul	r24, r16
    227a:	f0 01       	movw	r30, r0
    227c:	81 9f       	mul	r24, r17
    227e:	f0 0d       	add	r31, r0
    2280:	11 24       	eor	r1, r1
    2282:	e0 5d       	subi	r30, 0xD0	; 208
    2284:	fe 4f       	sbci	r31, 0xFE	; 254
    2286:	df 01       	movw	r26, r30
    2288:	1d 92       	st	X+, r1
    228a:	8a 95       	dec	r24
    228c:	e9 f7       	brne	.-6      	; 0x2288 <Dem_Init+0x1a0>
    228e:	0f 5f       	subi	r16, 0xFF	; 255
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	03 30       	cpi	r16, 0x03	; 3
    2294:	11 05       	cpc	r17, r1
    2296:	f0 f2       	brcs	.-68     	; 0x2254 <Dem_Init+0x16c>
    2298:	00 e0       	ldi	r16, 0x00	; 0
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	1f c0       	rjmp	.+62     	; 0x22dc <Dem_Init+0x1f4>
    229e:	8b e0       	ldi	r24, 0x0B	; 11
    22a0:	80 9f       	mul	r24, r16
    22a2:	f0 01       	movw	r30, r0
    22a4:	81 9f       	mul	r24, r17
    22a6:	f0 0d       	add	r31, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	ea 5a       	subi	r30, 0xAA	; 170
    22ac:	fa 4f       	sbci	r31, 0xFA	; 250
    22ae:	80 81       	ld	r24, Z
    22b0:	91 81       	ldd	r25, Z+1	; 0x01
    22b2:	00 97       	sbiw	r24, 0x00	; 0
    22b4:	89 f0       	breq	.+34     	; 0x22d8 <Dem_Init+0x1f0>
    22b6:	be 01       	movw	r22, r28
    22b8:	6f 5f       	subi	r22, 0xFF	; 255
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lookupEventIdParameter>
    22c0:	8b e0       	ldi	r24, 0x0B	; 11
    22c2:	80 9f       	mul	r24, r16
    22c4:	b0 01       	movw	r22, r0
    22c6:	81 9f       	mul	r24, r17
    22c8:	70 0d       	add	r23, r0
    22ca:	11 24       	eor	r1, r1
    22cc:	6a 5a       	subi	r22, 0xAA	; 170
    22ce:	7a 4f       	sbci	r23, 0xFA	; 250
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	0e 94 98 07 	call	0xf30	; 0xf30 <storeEventEvtMem>
    22d8:	0f 5f       	subi	r16, 0xFF	; 255
    22da:	1f 4f       	sbci	r17, 0xFF	; 255
    22dc:	03 30       	cpi	r16, 0x03	; 3
    22de:	11 05       	cpc	r17, r1
    22e0:	f0 f2       	brcs	.-68     	; 0x229e <Dem_Init+0x1b6>
    22e2:	00 e0       	ldi	r16, 0x00	; 0
    22e4:	10 e0       	ldi	r17, 0x00	; 0
    22e6:	1f c0       	rjmp	.+62     	; 0x2326 <Dem_Init+0x23e>
    22e8:	82 e2       	ldi	r24, 0x22	; 34
    22ea:	80 9f       	mul	r24, r16
    22ec:	f0 01       	movw	r30, r0
    22ee:	81 9f       	mul	r24, r17
    22f0:	f0 0d       	add	r31, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	e2 55       	subi	r30, 0x52	; 82
    22f6:	fd 4f       	sbci	r31, 0xFD	; 253
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	89 f0       	breq	.+34     	; 0x2322 <Dem_Init+0x23a>
    2300:	be 01       	movw	r22, r28
    2302:	6f 5f       	subi	r22, 0xFF	; 255
    2304:	7f 4f       	sbci	r23, 0xFF	; 255
    2306:	0e 94 70 04 	call	0x8e0	; 0x8e0 <lookupEventIdParameter>
    230a:	82 e2       	ldi	r24, 0x22	; 34
    230c:	80 9f       	mul	r24, r16
    230e:	b0 01       	movw	r22, r0
    2310:	81 9f       	mul	r24, r17
    2312:	70 0d       	add	r23, r0
    2314:	11 24       	eor	r1, r1
    2316:	62 55       	subi	r22, 0x52	; 82
    2318:	7d 4f       	sbci	r23, 0xFD	; 253
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <storeFreezeFrameDataEvtMem>
    2322:	0f 5f       	subi	r16, 0xFF	; 255
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	04 31       	cpi	r16, 0x14	; 20
    2328:	11 05       	cpc	r17, r1
    232a:	f0 f2       	brcs	.-68     	; 0x22e8 <Dem_Init+0x200>
    232c:	e1 e8       	ldi	r30, 0x81	; 129
    232e:	f5 e0       	ldi	r31, 0x05	; 5
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	80 83       	st	Z, r24
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	81 83       	std	Z+1, r24	; 0x01
    2338:	12 82       	std	Z+2, r1	; 0x02
    233a:	83 e0       	ldi	r24, 0x03	; 3
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	94 83       	std	Z+4, r25	; 0x04
    2340:	83 83       	std	Z+3, r24	; 0x03
    2342:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <disableDtcStorage>
    2346:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <FFRecordFilterIndex+0x1>
    234a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FFRecordFilterIndex>
    234e:	82 e0       	ldi	r24, 0x02	; 2
    2350:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <demState>
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	ff 90       	pop	r15
    2362:	ef 90       	pop	r14
    2364:	08 95       	ret

00002366 <Dem_SetEventStatus>:
    2366:	9c 01       	movw	r18, r24
    2368:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <demState>
    236c:	92 30       	cpi	r25, 0x02	; 2
    236e:	21 f4       	brne	.+8      	; 0x2378 <Dem_SetEventStatus+0x12>
    2370:	c9 01       	movw	r24, r18
    2372:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <handleEvent>
    2376:	08 95       	ret
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	08 95       	ret

0000237c <Dem_SetOperationCycleState>:
    237c:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <demState>
    2380:	92 30       	cpi	r25, 0x02	; 2
    2382:	19 f4       	brne	.+6      	; 0x238a <Dem_SetOperationCycleState+0xe>
    2384:	0e 94 72 09 	call	0x12e4	; 0x12e4 <setOperationCycleState>
    2388:	08 95       	ret
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	08 95       	ret

0000238e <Dem_GetDTCStatusAvailabilityMask>:
    238e:	2f e7       	ldi	r18, 0x7F	; 127
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	08 95       	ret

00002398 <Dem_SetDTCFilter>:
    2398:	1f 93       	push	r17
    239a:	cf 93       	push	r28
    239c:	df 93       	push	r29
    239e:	1f 92       	push	r1
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	18 2f       	mov	r17, r24
    23a6:	ce 01       	movw	r24, r28
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	0e 94 c7 11 	call	0x238e	; 0x238e <Dem_GetDTCStatusAvailabilityMask>
    23ae:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <demState>
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	59 f4       	brne	.+22     	; 0x23cc <Dem_SetDTCFilter+0x34>
    23b6:	e1 e8       	ldi	r30, 0x81	; 129
    23b8:	f5 e0       	ldi	r31, 0x05	; 5
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	18 23       	and	r17, r24
    23be:	10 83       	st	Z, r17
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	94 83       	std	Z+4, r25	; 0x04
    23c6:	83 83       	std	Z+3, r24	; 0x03
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <Dem_SetDTCFilter+0x36>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	0f 90       	pop	r0
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	1f 91       	pop	r17
    23d6:	08 95       	ret

000023d8 <Dem_GetStatusOfDTC>:
    23d8:	ef 92       	push	r14
    23da:	ff 92       	push	r15
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <Dem_GetStatusOfDTC+0xa>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <demState>
    23ea:	22 30       	cpi	r18, 0x02	; 2
    23ec:	79 f4       	brne	.+30     	; 0x240c <Dem_GetStatusOfDTC+0x34>
    23ee:	7a 01       	movw	r14, r20
    23f0:	ae 01       	movw	r20, r28
    23f2:	4f 5f       	subi	r20, 0xFF	; 255
    23f4:	5f 4f       	sbci	r21, 0xFF	; 255
    23f6:	0e 94 dd 05 	call	0xbba	; 0xbba <lookupDtcEvent>
    23fa:	88 23       	and	r24, r24
    23fc:	49 f0       	breq	.+18     	; 0x2410 <Dem_GetStatusOfDTC+0x38>
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	80 85       	ldd	r24, Z+8	; 0x08
    2404:	f7 01       	movw	r30, r14
    2406:	80 83       	st	Z, r24
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	03 c0       	rjmp	.+6      	; 0x2412 <Dem_GetStatusOfDTC+0x3a>
    240c:	84 e0       	ldi	r24, 0x04	; 4
    240e:	01 c0       	rjmp	.+2      	; 0x2412 <Dem_GetStatusOfDTC+0x3a>
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	ff 90       	pop	r15
    241c:	ef 90       	pop	r14
    241e:	08 95       	ret

00002420 <Dem_GetNextFilteredDTC>:
    2420:	df 92       	push	r13
    2422:	ef 92       	push	r14
    2424:	ff 92       	push	r15
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	8c 01       	movw	r16, r24
    2430:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <demState>
    2434:	92 30       	cpi	r25, 0x02	; 2
    2436:	09 f4       	brne	.+2      	; 0x243a <Dem_GetNextFilteredDTC+0x1a>
    2438:	3f c0       	rjmp	.+126    	; 0x24b8 <Dem_GetNextFilteredDTC+0x98>
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	53 c0       	rjmp	.+166    	; 0x24e4 <Dem_GetNextFilteredDTC+0xc4>
    243e:	21 97       	sbiw	r28, 0x01	; 1
    2440:	d0 93 85 05 	sts	0x0585, r29	; 0x800585 <dtcFilter+0x4>
    2444:	c0 93 84 05 	sts	0x0584, r28	; 0x800584 <dtcFilter+0x3>
    2448:	8b e0       	ldi	r24, 0x0B	; 11
    244a:	8c 9f       	mul	r24, r28
    244c:	f0 01       	movw	r30, r0
    244e:	8d 9f       	mul	r24, r29
    2450:	f0 0d       	add	r31, r0
    2452:	11 24       	eor	r1, r1
    2454:	ea 5a       	subi	r30, 0xAA	; 170
    2456:	fa 4f       	sbci	r31, 0xFA	; 250
    2458:	80 81       	ld	r24, Z
    245a:	91 81       	ldd	r25, Z+1	; 0x01
    245c:	89 2b       	or	r24, r25
    245e:	71 f1       	breq	.+92     	; 0x24bc <Dem_GetNextFilteredDTC+0x9c>
    2460:	cf 01       	movw	r24, r30
    2462:	0e 94 25 06 	call	0xc4a	; 0xc4a <matchEventWithDtcFilter>
    2466:	88 23       	and	r24, r24
    2468:	49 f1       	breq	.+82     	; 0x24bc <Dem_GetNextFilteredDTC+0x9c>
    246a:	8b e0       	ldi	r24, 0x0B	; 11
    246c:	8c 9f       	mul	r24, r28
    246e:	f0 01       	movw	r30, r0
    2470:	8d 9f       	mul	r24, r29
    2472:	f0 0d       	add	r31, r0
    2474:	11 24       	eor	r1, r1
    2476:	ea 5a       	subi	r30, 0xAA	; 170
    2478:	fa 4f       	sbci	r31, 0xFA	; 250
    247a:	02 80       	ldd	r0, Z+2	; 0x02
    247c:	f3 81       	ldd	r31, Z+3	; 0x03
    247e:	e0 2d       	mov	r30, r0
    2480:	03 84       	ldd	r0, Z+11	; 0x0b
    2482:	f4 85       	ldd	r31, Z+12	; 0x0c
    2484:	e0 2d       	mov	r30, r0
    2486:	30 97       	sbiw	r30, 0x00	; 0
    2488:	c9 f0       	breq	.+50     	; 0x24bc <Dem_GetNextFilteredDTC+0x9c>
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	a2 81       	ldd	r26, Z+2	; 0x02
    2490:	b3 81       	ldd	r27, Z+3	; 0x03
    2492:	f8 01       	movw	r30, r16
    2494:	80 83       	st	Z, r24
    2496:	91 83       	std	Z+1, r25	; 0x01
    2498:	a2 83       	std	Z+2, r26	; 0x02
    249a:	b3 83       	std	Z+3, r27	; 0x03
    249c:	8b e0       	ldi	r24, 0x0B	; 11
    249e:	8c 9f       	mul	r24, r28
    24a0:	f0 01       	movw	r30, r0
    24a2:	8d 9f       	mul	r24, r29
    24a4:	f0 0d       	add	r31, r0
    24a6:	11 24       	eor	r1, r1
    24a8:	ea 5a       	subi	r30, 0xAA	; 170
    24aa:	fa 4f       	sbci	r31, 0xFA	; 250
    24ac:	80 85       	ldd	r24, Z+8	; 0x08
    24ae:	f7 01       	movw	r30, r14
    24b0:	80 83       	st	Z, r24
    24b2:	dd 24       	eor	r13, r13
    24b4:	d3 94       	inc	r13
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <Dem_GetNextFilteredDTC+0x9c>
    24b8:	7b 01       	movw	r14, r22
    24ba:	d1 2c       	mov	r13, r1
    24bc:	d1 10       	cpse	r13, r1
    24be:	07 c0       	rjmp	.+14     	; 0x24ce <Dem_GetNextFilteredDTC+0xae>
    24c0:	c0 91 84 05 	lds	r28, 0x0584	; 0x800584 <dtcFilter+0x3>
    24c4:	d0 91 85 05 	lds	r29, 0x0585	; 0x800585 <dtcFilter+0x4>
    24c8:	20 97       	sbiw	r28, 0x00	; 0
    24ca:	09 f0       	breq	.+2      	; 0x24ce <Dem_GetNextFilteredDTC+0xae>
    24cc:	b8 cf       	rjmp	.-144    	; 0x243e <Dem_GetNextFilteredDTC+0x1e>
    24ce:	d1 10       	cpse	r13, r1
    24d0:	08 c0       	rjmp	.+16     	; 0x24e2 <Dem_GetNextFilteredDTC+0xc2>
    24d2:	83 e0       	ldi	r24, 0x03	; 3
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	90 93 85 05 	sts	0x0585, r25	; 0x800585 <dtcFilter+0x4>
    24da:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <dtcFilter+0x3>
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <Dem_GetNextFilteredDTC+0xc4>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	df 91       	pop	r29
    24e6:	cf 91       	pop	r28
    24e8:	1f 91       	pop	r17
    24ea:	0f 91       	pop	r16
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	df 90       	pop	r13
    24f2:	08 95       	ret

000024f4 <Dem_GetExtendedDataRecordByDTC>:
    24f4:	cf 92       	push	r12
    24f6:	df 92       	push	r13
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	28 97       	sbiw	r28, 0x08	; 8
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	1c 82       	std	Y+4, r1	; 0x04
    2516:	1b 82       	std	Y+3, r1	; 0x03
    2518:	18 86       	std	Y+8, r1	; 0x08
    251a:	1f 82       	std	Y+7, r1	; 0x07
    251c:	30 91 88 05 	lds	r19, 0x0588	; 0x800588 <demState>
    2520:	32 30       	cpi	r19, 0x02	; 2
    2522:	09 f0       	breq	.+2      	; 0x2526 <Dem_GetExtendedDataRecordByDTC+0x32>
    2524:	7a c0       	rjmp	.+244    	; 0x261a <Dem_GetExtendedDataRecordByDTC+0x126>
    2526:	12 2f       	mov	r17, r18
    2528:	ae 01       	movw	r20, r28
    252a:	4f 5f       	subi	r20, 0xFF	; 255
    252c:	5f 4f       	sbci	r21, 0xFF	; 255
    252e:	0e 94 dd 05 	call	0xbba	; 0xbba <lookupDtcEvent>
    2532:	88 23       	and	r24, r24
    2534:	09 f4       	brne	.+2      	; 0x2538 <Dem_GetExtendedDataRecordByDTC+0x44>
    2536:	73 c0       	rjmp	.+230    	; 0x261e <Dem_GetExtendedDataRecordByDTC+0x12a>
    2538:	e9 81       	ldd	r30, Y+1	; 0x01
    253a:	fa 81       	ldd	r31, Y+2	; 0x02
    253c:	62 81       	ldd	r22, Z+2	; 0x02
    253e:	73 81       	ldd	r23, Z+3	; 0x03
    2540:	9e 01       	movw	r18, r28
    2542:	29 5f       	subi	r18, 0xF9	; 249
    2544:	3f 4f       	sbci	r19, 0xFF	; 255
    2546:	ae 01       	movw	r20, r28
    2548:	4d 5f       	subi	r20, 0xFD	; 253
    254a:	5f 4f       	sbci	r21, 0xFF	; 255
    254c:	80 2f       	mov	r24, r16
    254e:	0e 94 29 08 	call	0x1052	; 0x1052 <lookupExtendedDataRecNumParam>
    2552:	88 23       	and	r24, r24
    2554:	09 f4       	brne	.+2      	; 0x2558 <Dem_GetExtendedDataRecordByDTC+0x64>
    2556:	65 c0       	rjmp	.+202    	; 0x2622 <Dem_GetExtendedDataRecordByDTC+0x12e>
    2558:	f6 01       	movw	r30, r12
    255a:	20 81       	ld	r18, Z
    255c:	31 81       	ldd	r19, Z+1	; 0x01
    255e:	ab 81       	ldd	r26, Y+3	; 0x03
    2560:	bc 81       	ldd	r27, Y+4	; 0x04
    2562:	12 96       	adiw	r26, 0x02	; 2
    2564:	8d 91       	ld	r24, X+
    2566:	9c 91       	ld	r25, X
    2568:	13 97       	sbiw	r26, 0x03	; 3
    256a:	28 17       	cp	r18, r24
    256c:	39 07       	cpc	r19, r25
    256e:	08 f4       	brcc	.+2      	; 0x2572 <Dem_GetExtendedDataRecordByDTC+0x7e>
    2570:	5a c0       	rjmp	.+180    	; 0x2626 <Dem_GetExtendedDataRecordByDTC+0x132>
    2572:	14 96       	adiw	r26, 0x04	; 4
    2574:	8c 91       	ld	r24, X
    2576:	14 97       	sbiw	r26, 0x04	; 4
    2578:	82 30       	cpi	r24, 0x02	; 2
    257a:	51 f1       	breq	.+84     	; 0x25d0 <Dem_GetExtendedDataRecordByDTC+0xdc>
    257c:	12 30       	cpi	r17, 0x02	; 2
    257e:	09 f0       	breq	.+2      	; 0x2582 <Dem_GetExtendedDataRecordByDTC+0x8e>
    2580:	54 c0       	rjmp	.+168    	; 0x262a <Dem_GetExtendedDataRecordByDTC+0x136>
    2582:	e9 81       	ldd	r30, Y+1	; 0x01
    2584:	fa 81       	ldd	r31, Y+2	; 0x02
    2586:	be 01       	movw	r22, r28
    2588:	6b 5f       	subi	r22, 0xFB	; 251
    258a:	7f 4f       	sbci	r23, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	0e 94 7f 08 	call	0x10fe	; 0x10fe <lookupExtendedDataPriMem>
    2594:	88 23       	and	r24, r24
    2596:	b9 f0       	breq	.+46     	; 0x25c6 <Dem_GetExtendedDataRecordByDTC+0xd2>
    2598:	eb 81       	ldd	r30, Y+3	; 0x03
    259a:	fc 81       	ldd	r31, Y+4	; 0x04
    259c:	42 81       	ldd	r20, Z+2	; 0x02
    259e:	53 81       	ldd	r21, Z+3	; 0x03
    25a0:	6d 81       	ldd	r22, Y+5	; 0x05
    25a2:	7e 81       	ldd	r23, Y+6	; 0x06
    25a4:	8f 81       	ldd	r24, Y+7	; 0x07
    25a6:	98 85       	ldd	r25, Y+8	; 0x08
    25a8:	02 96       	adiw	r24, 0x02	; 2
    25aa:	68 0f       	add	r22, r24
    25ac:	79 1f       	adc	r23, r25
    25ae:	c7 01       	movw	r24, r14
    25b0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <memcpy>
    25b4:	eb 81       	ldd	r30, Y+3	; 0x03
    25b6:	fc 81       	ldd	r31, Y+4	; 0x04
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	f6 01       	movw	r30, r12
    25be:	91 83       	std	Z+1, r25	; 0x01
    25c0:	80 83       	st	Z, r24
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	35 c0       	rjmp	.+106    	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    25c6:	f6 01       	movw	r30, r12
    25c8:	11 82       	std	Z+1, r1	; 0x01
    25ca:	10 82       	st	Z, r1
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	30 c0       	rjmp	.+96     	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    25d0:	15 96       	adiw	r26, 0x05	; 5
    25d2:	ed 91       	ld	r30, X+
    25d4:	fc 91       	ld	r31, X
    25d6:	16 97       	sbiw	r26, 0x06	; 6
    25d8:	30 97       	sbiw	r30, 0x00	; 0
    25da:	59 f0       	breq	.+22     	; 0x25f2 <Dem_GetExtendedDataRecordByDTC+0xfe>
    25dc:	c7 01       	movw	r24, r14
    25de:	09 95       	icall
    25e0:	eb 81       	ldd	r30, Y+3	; 0x03
    25e2:	fc 81       	ldd	r31, Y+4	; 0x04
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	f6 01       	movw	r30, r12
    25ea:	91 83       	std	Z+1, r25	; 0x01
    25ec:	80 83       	st	Z, r24
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	1f c0       	rjmp	.+62     	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    25f2:	17 96       	adiw	r26, 0x07	; 7
    25f4:	6c 91       	ld	r22, X
    25f6:	66 23       	and	r22, r22
    25f8:	d1 f0       	breq	.+52     	; 0x262e <Dem_GetExtendedDataRecordByDTC+0x13a>
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	a7 01       	movw	r20, r14
    2600:	82 81       	ldd	r24, Z+2	; 0x02
    2602:	93 81       	ldd	r25, Z+3	; 0x03
    2604:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <getInternalElement>
    2608:	eb 81       	ldd	r30, Y+3	; 0x03
    260a:	fc 81       	ldd	r31, Y+4	; 0x04
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	f6 01       	movw	r30, r12
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	0b c0       	rjmp	.+22     	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	09 c0       	rjmp	.+18     	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	07 c0       	rjmp	.+14     	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	05 c0       	rjmp	.+10     	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    2626:	85 e0       	ldi	r24, 0x05	; 5
    2628:	03 c0       	rjmp	.+6      	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    262a:	82 e0       	ldi	r24, 0x02	; 2
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <Dem_GetExtendedDataRecordByDTC+0x13c>
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	28 96       	adiw	r28, 0x08	; 8
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	df 91       	pop	r29
    263e:	cf 91       	pop	r28
    2640:	1f 91       	pop	r17
    2642:	0f 91       	pop	r16
    2644:	ff 90       	pop	r15
    2646:	ef 90       	pop	r14
    2648:	df 90       	pop	r13
    264a:	cf 90       	pop	r12
    264c:	08 95       	ret

0000264e <Dem_GetFreezeFrameDataByDTC>:
    264e:	9f 92       	push	r9
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	28 97       	sbiw	r28, 0x08	; 8
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	1c 82       	std	Y+4, r1	; 0x04
    266e:	1b 82       	std	Y+3, r1	; 0x03
    2670:	18 86       	std	Y+8, r1	; 0x08
    2672:	1f 82       	std	Y+7, r1	; 0x07
    2674:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <demState>
    2678:	52 30       	cpi	r21, 0x02	; 2
    267a:	09 f0       	breq	.+2      	; 0x267e <Dem_GetFreezeFrameDataByDTC+0x30>
    267c:	44 c0       	rjmp	.+136    	; 0x2706 <Dem_GetFreezeFrameDataByDTC+0xb8>
    267e:	59 01       	movw	r10, r18
    2680:	94 2e       	mov	r9, r20
    2682:	ae 01       	movw	r20, r28
    2684:	4f 5f       	subi	r20, 0xFF	; 255
    2686:	5f 4f       	sbci	r21, 0xFF	; 255
    2688:	0e 94 dd 05 	call	0xbba	; 0xbba <lookupDtcEvent>
    268c:	88 23       	and	r24, r24
    268e:	e9 f1       	breq	.+122    	; 0x270a <Dem_GetFreezeFrameDataByDTC+0xbc>
    2690:	e9 81       	ldd	r30, Y+1	; 0x01
    2692:	fa 81       	ldd	r31, Y+2	; 0x02
    2694:	62 81       	ldd	r22, Z+2	; 0x02
    2696:	73 81       	ldd	r23, Z+3	; 0x03
    2698:	ae 01       	movw	r20, r28
    269a:	4d 5f       	subi	r20, 0xFD	; 253
    269c:	5f 4f       	sbci	r21, 0xFF	; 255
    269e:	89 2d       	mov	r24, r9
    26a0:	0e 94 b7 08 	call	0x116e	; 0x116e <lookupFreezeFrameDataRecNumParam>
    26a4:	88 23       	and	r24, r24
    26a6:	99 f1       	breq	.+102    	; 0x270e <Dem_GetFreezeFrameDataByDTC+0xc0>
    26a8:	ae 01       	movw	r20, r28
    26aa:	49 5f       	subi	r20, 0xF9	; 249
    26ac:	5f 4f       	sbci	r21, 0xFF	; 255
    26ae:	be 01       	movw	r22, r28
    26b0:	6d 5f       	subi	r22, 0xFD	; 253
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255
    26b4:	89 2d       	mov	r24, r9
    26b6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <lookupFreezeFrameDataSize>
    26ba:	f8 01       	movw	r30, r16
    26bc:	80 81       	ld	r24, Z
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	2f 81       	ldd	r18, Y+7	; 0x07
    26c2:	38 85       	ldd	r19, Y+8	; 0x08
    26c4:	82 17       	cp	r24, r18
    26c6:	93 07       	cpc	r25, r19
    26c8:	20 f1       	brcs	.+72     	; 0x2712 <Dem_GetFreezeFrameDataByDTC+0xc4>
    26ca:	e9 81       	ldd	r30, Y+1	; 0x01
    26cc:	fa 81       	ldd	r31, Y+2	; 0x02
    26ce:	ae 01       	movw	r20, r28
    26d0:	4b 5f       	subi	r20, 0xFB	; 251
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255
    26d4:	69 2d       	mov	r22, r9
    26d6:	80 81       	ld	r24, Z
    26d8:	91 81       	ldd	r25, Z+1	; 0x01
    26da:	0e 94 37 09 	call	0x126e	; 0x126e <lookupFreezeFrameDataPriMem>
    26de:	88 23       	and	r24, r24
    26e0:	71 f0       	breq	.+28     	; 0x26fe <Dem_GetFreezeFrameDataByDTC+0xb0>
    26e2:	6d 81       	ldd	r22, Y+5	; 0x05
    26e4:	7e 81       	ldd	r23, Y+6	; 0x06
    26e6:	64 5f       	subi	r22, 0xF4	; 244
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	4f 81       	ldd	r20, Y+7	; 0x07
    26ec:	58 85       	ldd	r21, Y+8	; 0x08
    26ee:	c5 01       	movw	r24, r10
    26f0:	0e 94 0c 1b 	call	0x3618	; 0x3618 <memcpy>
    26f4:	8f 81       	ldd	r24, Y+7	; 0x07
    26f6:	f8 01       	movw	r30, r16
    26f8:	80 83       	st	Z, r24
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	0b c0       	rjmp	.+22     	; 0x2714 <Dem_GetFreezeFrameDataByDTC+0xc6>
    26fe:	f8 01       	movw	r30, r16
    2700:	10 82       	st	Z, r1
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <Dem_GetFreezeFrameDataByDTC+0xc6>
    2706:	87 e0       	ldi	r24, 0x07	; 7
    2708:	05 c0       	rjmp	.+10     	; 0x2714 <Dem_GetFreezeFrameDataByDTC+0xc6>
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	03 c0       	rjmp	.+6      	; 0x2714 <Dem_GetFreezeFrameDataByDTC+0xc6>
    270e:	84 e0       	ldi	r24, 0x04	; 4
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <Dem_GetFreezeFrameDataByDTC+0xc6>
    2712:	86 e0       	ldi	r24, 0x06	; 6
    2714:	28 96       	adiw	r28, 0x08	; 8
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	bf 90       	pop	r11
    272a:	af 90       	pop	r10
    272c:	9f 90       	pop	r9
    272e:	08 95       	ret

00002730 <Dem_SetDTCFilterForRecords>:

/** @req DEM209 */
Dem_ReturnSetDTCFilterType Dem_SetDTCFilterForRecords(uint16 *NumberOfFilteredRecords)
{
    2730:	cf 92       	push	r12
    2732:	df 92       	push	r13
    2734:	ef 92       	push	r14
    2736:	ff 92       	push	r15
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	cf 93       	push	r28
    273e:	df 93       	push	r29
    2740:	00 d0       	rcall	.+0      	; 0x2742 <Dem_SetDTCFilterForRecords+0x12>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	7c 01       	movw	r14, r24
	Dem_ReturnSetDTCFilterType ret = DEM_WRONG_FILTER;
    if (demState != DEM_INITIALIZED) {
    2748:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <demState>
    274c:	92 30       	cpi	r25, 0x02	; 2
    274e:	a1 f5       	brne	.+104    	; 0x27b8 <Dem_SetDTCFilterForRecords+0x88>
    2750:	00 e0       	ldi	r16, 0x00	; 0
    2752:	10 e0       	ldi	r17, 0x00	; 0
    2754:	c1 2c       	mov	r12, r1
    2756:	d1 2c       	mov	r13, r1
    2758:	23 c0       	rjmp	.+70     	; 0x27a0 <Dem_SetDTCFilterForRecords+0x70>
    } else {
        uint16 nofRecords = 0;
        for( uint16 i = 0; i < DEM_MAX_NUMBER_FF_DATA_PRI_MEM; i++ ) {
        	/* @req DEM210 */ /* We are searching in priMem buffer */
            if( DEM_EVENT_ID_NULL != priMemFreezeFrameBuffer[i].eventId ) {
    275a:	82 e2       	ldi	r24, 0x22	; 34
    275c:	80 9f       	mul	r24, r16
    275e:	f0 01       	movw	r30, r0
    2760:	81 9f       	mul	r24, r17
    2762:	f0 0d       	add	r31, r0
    2764:	11 24       	eor	r1, r1
    2766:	e0 5d       	subi	r30, 0xD0	; 208
    2768:	fe 4f       	sbci	r31, 0xFE	; 254
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	a9 f0       	breq	.+42     	; 0x279c <Dem_SetDTCFilterForRecords+0x6c>
                EventStatusRecType *eventStatusRecPtr = NULL;
    2772:	1a 82       	std	Y+2, r1	; 0x02
    2774:	19 82       	std	Y+1, r1	; 0x01
                lookupEventStatusRec(priMemFreezeFrameBuffer[i].eventId, &eventStatusRecPtr);
    2776:	be 01       	movw	r22, r28
    2778:	6f 5f       	subi	r22, 0xFF	; 255
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
                if( (NULL != eventStatusRecPtr) && (NULL != eventStatusRecPtr->eventParamRef->DTCClassRef) ) {
    2780:	e9 81       	ldd	r30, Y+1	; 0x01
    2782:	fa 81       	ldd	r31, Y+2	; 0x02
    2784:	30 97       	sbiw	r30, 0x00	; 0
    2786:	51 f0       	breq	.+20     	; 0x279c <Dem_SetDTCFilterForRecords+0x6c>
    2788:	02 80       	ldd	r0, Z+2	; 0x02
    278a:	f3 81       	ldd	r31, Z+3	; 0x03
    278c:	e0 2d       	mov	r30, r0
    278e:	83 85       	ldd	r24, Z+11	; 0x0b
    2790:	94 85       	ldd	r25, Z+12	; 0x0c
    2792:	89 2b       	or	r24, r25
    2794:	19 f0       	breq	.+6      	; 0x279c <Dem_SetDTCFilterForRecords+0x6c>
                    nofRecords++;
    2796:	8f ef       	ldi	r24, 0xFF	; 255
    2798:	c8 1a       	sub	r12, r24
    279a:	d8 0a       	sbc	r13, r24
{
	Dem_ReturnSetDTCFilterType ret = DEM_WRONG_FILTER;
    if (demState != DEM_INITIALIZED) {
    } else {
        uint16 nofRecords = 0;
        for( uint16 i = 0; i < DEM_MAX_NUMBER_FF_DATA_PRI_MEM; i++ ) {
    279c:	0f 5f       	subi	r16, 0xFF	; 255
    279e:	1f 4f       	sbci	r17, 0xFF	; 255
    27a0:	03 30       	cpi	r16, 0x03	; 3
    27a2:	11 05       	cpc	r17, r1
    27a4:	d0 f2       	brcs	.-76     	; 0x275a <Dem_SetDTCFilterForRecords+0x2a>
                if( (NULL != eventStatusRecPtr) && (NULL != eventStatusRecPtr->eventParamRef->DTCClassRef) ) {
                    nofRecords++;
                }
            }
        }
        *NumberOfFilteredRecords = nofRecords;
    27a6:	f7 01       	movw	r30, r14
    27a8:	d1 82       	std	Z+1, r13	; 0x01
    27aa:	c0 82       	st	Z, r12
        FFRecordFilterIndex = 0;
    27ac:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <FFRecordFilterIndex+0x1>
    27b0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <FFRecordFilterIndex>
        ret = DEM_FILTER_ACCEPTED;
    27b4:	80 e0       	ldi	r24, 0x00	; 0
    27b6:	01 c0       	rjmp	.+2      	; 0x27ba <Dem_SetDTCFilterForRecords+0x8a>
}

/** @req DEM209 */
Dem_ReturnSetDTCFilterType Dem_SetDTCFilterForRecords(uint16 *NumberOfFilteredRecords)
{
	Dem_ReturnSetDTCFilterType ret = DEM_WRONG_FILTER;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
        *NumberOfFilteredRecords = nofRecords;
        FFRecordFilterIndex = 0;
        ret = DEM_FILTER_ACCEPTED;
    }
    return ret;
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	08 95       	ret

000027d0 <Dem_GetNextFilteredRecord>:

/** @req DEM224 */
Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredRecord(uint32 *DTC, uint8 *RecordNumber)
{
    27d0:	af 92       	push	r10
    27d2:	bf 92       	push	r11
    27d4:	cf 92       	push	r12
    27d6:	df 92       	push	r13
    27d8:	ef 92       	push	r14
    27da:	ff 92       	push	r15
    27dc:	0f 93       	push	r16
    27de:	1f 93       	push	r17
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <Dem_GetNextFilteredRecord+0x16>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	7c 01       	movw	r14, r24
    Dem_ReturnGetNextFilteredDTCType ret = DEM_FILTERED_NO_MATCHING_DTC;

    EventStatusRecType *eventStatusRecPtr = NULL;
    27ec:	1a 82       	std	Y+2, r1	; 0x02
    27ee:	19 82       	std	Y+1, r1	; 0x01
    if (demState == DEM_INITIALIZED) {
    27f0:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <demState>
    27f4:	92 30       	cpi	r25, 0x02	; 2
    27f6:	09 f0       	breq	.+2      	; 0x27fa <Dem_GetNextFilteredRecord+0x2a>
    27f8:	53 c0       	rjmp	.+166    	; 0x28a0 <Dem_GetNextFilteredRecord+0xd0>
    27fa:	6b 01       	movw	r12, r22

        /* Find the next record which has a DTC */
        boolean found = FALSE;
        for( uint16 i = FFRecordFilterIndex; (i < DEM_MAX_NUMBER_FF_DATA_PRI_MEM) && !found; i++  ) {
    27fc:	00 91 2a 01 	lds	r16, 0x012A	; 0x80012a <FFRecordFilterIndex>
    2800:	10 91 2b 01 	lds	r17, 0x012B	; 0x80012b <FFRecordFilterIndex+0x1>

    EventStatusRecType *eventStatusRecPtr = NULL;
    if (demState == DEM_INITIALIZED) {

        /* Find the next record which has a DTC */
        boolean found = FALSE;
    2804:	b1 2c       	mov	r11, r1
}

/** @req DEM224 */
Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredRecord(uint32 *DTC, uint8 *RecordNumber)
{
    Dem_ReturnGetNextFilteredDTCType ret = DEM_FILTERED_NO_MATCHING_DTC;
    2806:	aa 24       	eor	r10, r10
    2808:	a3 94       	inc	r10
    EventStatusRecType *eventStatusRecPtr = NULL;
    if (demState == DEM_INITIALIZED) {

        /* Find the next record which has a DTC */
        boolean found = FALSE;
        for( uint16 i = FFRecordFilterIndex; (i < DEM_MAX_NUMBER_FF_DATA_PRI_MEM) && !found; i++  ) {
    280a:	43 c0       	rjmp	.+134    	; 0x2892 <Dem_GetNextFilteredRecord+0xc2>
            if( DEM_EVENT_ID_NULL != priMemFreezeFrameBuffer[i].eventId ) {
    280c:	82 e2       	ldi	r24, 0x22	; 34
    280e:	80 9f       	mul	r24, r16
    2810:	f0 01       	movw	r30, r0
    2812:	81 9f       	mul	r24, r17
    2814:	f0 0d       	add	r31, r0
    2816:	11 24       	eor	r1, r1
    2818:	e0 5d       	subi	r30, 0xD0	; 208
    281a:	fe 4f       	sbci	r31, 0xFE	; 254
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	a9 f1       	breq	.+106    	; 0x288e <Dem_GetNextFilteredRecord+0xbe>
                lookupEventStatusRec(priMemFreezeFrameBuffer[i].eventId, &eventStatusRecPtr);
    2824:	be 01       	movw	r22, r28
    2826:	6f 5f       	subi	r22, 0xFF	; 255
    2828:	7f 4f       	sbci	r23, 0xFF	; 255
    282a:	0e 94 44 04 	call	0x888	; 0x888 <lookupEventStatusRec>
               if( (NULL != eventStatusRecPtr) && (NULL != eventStatusRecPtr->eventParamRef->DTCClassRef)) {
    282e:	e9 81       	ldd	r30, Y+1	; 0x01
    2830:	fa 81       	ldd	r31, Y+2	; 0x02
    2832:	30 97       	sbiw	r30, 0x00	; 0
    2834:	61 f1       	breq	.+88     	; 0x288e <Dem_GetNextFilteredRecord+0xbe>
    2836:	02 80       	ldd	r0, Z+2	; 0x02
    2838:	f3 81       	ldd	r31, Z+3	; 0x03
    283a:	e0 2d       	mov	r30, r0
    283c:	83 85       	ldd	r24, Z+11	; 0x0b
    283e:	94 85       	ldd	r25, Z+12	; 0x0c
    2840:	89 2b       	or	r24, r25
    2842:	29 f1       	breq	.+74     	; 0x288e <Dem_GetNextFilteredRecord+0xbe>
                   /* Found one! */
            	   /* @req DEM225 */
                   *RecordNumber = priMemFreezeFrameBuffer[i].recordNumber;
    2844:	82 e2       	ldi	r24, 0x22	; 34
    2846:	80 9f       	mul	r24, r16
    2848:	f0 01       	movw	r30, r0
    284a:	81 9f       	mul	r24, r17
    284c:	f0 0d       	add	r31, r0
    284e:	11 24       	eor	r1, r1
    2850:	e0 5d       	subi	r30, 0xD0	; 208
    2852:	fe 4f       	sbci	r31, 0xFE	; 254
    2854:	87 81       	ldd	r24, Z+7	; 0x07
    2856:	f6 01       	movw	r30, r12
    2858:	80 83       	st	Z, r24
                   *DTC = eventStatusRecPtr->eventParamRef->DTCClassRef->DTC;
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	02 80       	ldd	r0, Z+2	; 0x02
    2860:	f3 81       	ldd	r31, Z+3	; 0x03
    2862:	e0 2d       	mov	r30, r0
    2864:	03 84       	ldd	r0, Z+11	; 0x0b
    2866:	f4 85       	ldd	r31, Z+12	; 0x0c
    2868:	e0 2d       	mov	r30, r0
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	a2 81       	ldd	r26, Z+2	; 0x02
    2870:	b3 81       	ldd	r27, Z+3	; 0x03
    2872:	f7 01       	movw	r30, r14
    2874:	80 83       	st	Z, r24
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	a2 83       	std	Z+2, r26	; 0x02
    287a:	b3 83       	std	Z+3, r27	; 0x03
                   /* @req DEM226 */
                   FFRecordFilterIndex = i + 1;
    287c:	c8 01       	movw	r24, r16
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <FFRecordFilterIndex+0x1>
    2884:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <FFRecordFilterIndex>
                   found = TRUE;
    2888:	bb 24       	eor	r11, r11
    288a:	b3 94       	inc	r11
                   ret = DEM_FILTERED_OK;
    288c:	a1 2c       	mov	r10, r1
    EventStatusRecType *eventStatusRecPtr = NULL;
    if (demState == DEM_INITIALIZED) {

        /* Find the next record which has a DTC */
        boolean found = FALSE;
        for( uint16 i = FFRecordFilterIndex; (i < DEM_MAX_NUMBER_FF_DATA_PRI_MEM) && !found; i++  ) {
    288e:	0f 5f       	subi	r16, 0xFF	; 255
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	03 30       	cpi	r16, 0x03	; 3
    2894:	11 05       	cpc	r17, r1
    2896:	30 f4       	brcc	.+12     	; 0x28a4 <Dem_GetNextFilteredRecord+0xd4>
    2898:	bb 20       	and	r11, r11
    289a:	09 f4       	brne	.+2      	; 0x289e <Dem_GetNextFilteredRecord+0xce>
    289c:	b7 cf       	rjmp	.-146    	; 0x280c <Dem_GetNextFilteredRecord+0x3c>
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <Dem_GetNextFilteredRecord+0xd4>
}

/** @req DEM224 */
Dem_ReturnGetNextFilteredDTCType Dem_GetNextFilteredRecord(uint32 *DTC, uint8 *RecordNumber)
{
    Dem_ReturnGetNextFilteredDTCType ret = DEM_FILTERED_NO_MATCHING_DTC;
    28a0:	aa 24       	eor	r10, r10
    28a2:	a3 94       	inc	r10
        }
    } else {
    }

    return ret;
}
    28a4:	8a 2d       	mov	r24, r10
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	0f 91       	pop	r16
    28b2:	ff 90       	pop	r15
    28b4:	ef 90       	pop	r14
    28b6:	df 90       	pop	r13
    28b8:	cf 90       	pop	r12
    28ba:	bf 90       	pop	r11
    28bc:	af 90       	pop	r10
    28be:	08 95       	ret

000028c0 <GetReadDataLength>:
	return E_OK;
}


Std_ReturnType GetReadDataLength(uint16 *DidLength) {
	*DidLength = 2; // Total size of tmp 1 byte , rpm 1  byte
    28c0:	22 e0       	ldi	r18, 0x02	; 2
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	fc 01       	movw	r30, r24
    28c6:	31 83       	std	Z+1, r19	; 0x01
    28c8:	20 83       	st	Z, r18
	return E_OK;
}
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	08 95       	ret

000028ce <MyDidConditionCheckRead>:

Std_ReturnType MyDidConditionCheckRead(Dcm_NegativeResponseCodeType *Nrc)
{
	// Example check: replace this with your actual condition
		if (1) {
		*Nrc = DCM_E_POSITIVE_RESPONSE;
    28ce:	fc 01       	movw	r30, r24
    28d0:	10 82       	st	Z, r1
			if (Nrc != NULL) {
			*Nrc = DCM_E_CONDITIONS_NOT_CORRECT;
			}
			return E_NOT_OK;
		}
}
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	08 95       	ret

000028d6 <ReadTMP>:
{
	&ExtendedDataRecordClasses[2],
};


Std_ReturnType ReadTMP(uint8 *Data) {
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	ec 01       	movw	r28, r24
	uint8 tmp = LM35_getTemperature();
    28dc:	0e 94 2c 19 	call	0x3258	; 0x3258 <LM35_getTemperature>
	*Data = (uint8)(tmp);
    28e0:	88 83       	st	Y, r24
	return E_OK;
}
    28e2:	80 e0       	ldi	r24, 0x00	; 0
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	08 95       	ret

000028ea <ReadRPM>:

Std_ReturnType ReadRPM(uint8 *Data) {
	uint8 rpm = 0x41;
	*Data = (uint8)(rpm);
    28ea:	21 e4       	ldi	r18, 0x41	; 65
    28ec:	fc 01       	movw	r30, r24
    28ee:	20 83       	st	Z, r18
	return E_OK;
}
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	08 95       	ret

000028f4 <ReadAllParameters>:

Std_ReturnType ReadAllParameters(uint8 *Data) {
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	1f 92       	push	r1
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	8c 01       	movw	r16, r24
	uint8 offset = 0;
	uint8 parameterData;  // Changed from pointer to uint8 variable

	// Read TMP
	ReadTMP(&parameterData);
    2904:	ce 01       	movw	r24, r28
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <ReadTMP>
	Data[offset++] = parameterData;
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	f8 01       	movw	r30, r16
    2910:	80 83       	st	Z, r24
	
	// Read RPM
	ReadRPM(&parameterData);
    2912:	ce 01       	movw	r24, r28
    2914:	01 96       	adiw	r24, 0x01	; 1
    2916:	0e 94 75 14 	call	0x28ea	; 0x28ea <ReadRPM>
	Data[offset++] = parameterData;
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	f8 01       	movw	r30, r16
    291e:	81 83       	std	Z+1, r24	; 0x01

	return E_OK;
}
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	0f 90       	pop	r0
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	08 95       	ret

0000292e <main>:


	

int main(void)
{
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	a1 97       	sbiw	r28, 0x21	; 33
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
	Dem_PreInit();
    2942:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Dem_PreInit>
	Dem_Init();
    2946:	0e 94 74 10 	call	0x20e8	; 0x20e8 <Dem_Init>
	//Dem_SetOperationCycleState(DEM_POWER, DEM_CYCLE_STATE_START); /** @req DEM194 */

	

	// Example data for InfoType structures
	uint8 rxData[] = { 0x19, 0x02, 0x7f};
    294a:	89 e1       	ldi	r24, 0x19	; 25
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	8a 83       	std	Y+2, r24	; 0x02
    2952:	8f e7       	ldi	r24, 0x7F	; 127
    2954:	8b 83       	std	Y+3, r24	; 0x03
	uint8 txData[20]= {}; // Buffer for the transmitted data
    2956:	fe 01       	movw	r30, r28
    2958:	34 96       	adiw	r30, 0x04	; 4
    295a:	84 e1       	ldi	r24, 0x14	; 20
    295c:	df 01       	movw	r26, r30
    295e:	1d 92       	st	X+, r1
    2960:	8a 95       	dec	r24
    2962:	e9 f7       	brne	.-6      	; 0x295e <main+0x30>

	// Initialize PduInfoType structures
	InfoType RxData = {
    2964:	ce 01       	movw	r24, r28
    2966:	01 96       	adiw	r24, 0x01	; 1
    2968:	99 8f       	std	Y+25, r25	; 0x19
    296a:	88 8f       	std	Y+24, r24	; 0x18
    296c:	83 e0       	ldi	r24, 0x03	; 3
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9b 8f       	std	Y+27, r25	; 0x1b
    2972:	8a 8f       	std	Y+26, r24	; 0x1a
		.DataPtr = rxData,
		.DataLength = sizeof(rxData)
	};

	InfoType TxData = {
    2974:	fd 8f       	std	Y+29, r31	; 0x1d
    2976:	ec 8f       	std	Y+28, r30	; 0x1c
    2978:	84 e1       	ldi	r24, 0x14	; 20
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9f 8f       	std	Y+31, r25	; 0x1f
    297e:	8e 8f       	std	Y+30, r24	; 0x1e
	};
	TxDataType* txDataPtr = (TxDataType*)TxData.DataPtr;
		
	
	uint8 mytemp;  //variable to store temperature from sensor
	LCD_init(); //LCD init function called
    2980:	0e 94 97 18 	call	0x312e	; 0x312e <LCD_init>
	ADC_ConfigType adcconfig ={INTERNAL_VOLTAGE,F_CPU_8}; //Config given to ADC
    2984:	83 e0       	ldi	r24, 0x03	; 3
    2986:	88 a3       	std	Y+32, r24	; 0x20
    2988:	89 a3       	std	Y+33, r24	; 0x21
	ADC_init(&adcconfig);
    298a:	ce 01       	movw	r24, r28
    298c:	80 96       	adiw	r24, 0x20	; 32
    298e:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_init>
	DcMotor_Init(); //DC_MOTOR_intialization
    2992:	0e 94 46 19 	call	0x328c	; 0x328c <DcMotor_Init>
	GPIO_setupPinDirection(PORTD_ID, PIN4_ID, PIN_INPUT);
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	64 e0       	ldi	r22, 0x04	; 4
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <GPIO_setupPinDirection>

	int cyclestate = DEM_CYCLE_STATE_END;
    29a0:	68 94       	set
    29a2:	ee 24       	eor	r14, r14
    29a4:	e1 f8       	bld	r14, 1
    29a6:	f1 2c       	mov	r15, r1
	while(1)
	{

		
		//_delay_ms(100);
		mytemp=LM35_getTemperature();//temperature sensed by sensor stored in mytemp
    29a8:	0e 94 2c 19 	call	0x3258	; 0x3258 <LM35_getTemperature>
    29ac:	18 2f       	mov	r17, r24
		
		if ((GPIO_readPin(PORTD_ID,PIN4_ID)== 1)&&(cyclestate!=DEM_CYCLE_STATE_START)){
    29ae:	64 e0       	ldi	r22, 0x04	; 4
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <GPIO_readPin>
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	59 f4       	brne	.+22     	; 0x29d0 <main+0xa2>
    29ba:	b1 e0       	ldi	r27, 0x01	; 1
    29bc:	eb 16       	cp	r14, r27
    29be:	f1 04       	cpc	r15, r1
    29c0:	39 f0       	breq	.+14     	; 0x29d0 <main+0xa2>
			Dem_SetOperationCycleState(DEM_POWER, DEM_CYCLE_STATE_START);
    29c2:	61 e0       	ldi	r22, 0x01	; 1
    29c4:	0e 94 be 11 	call	0x237c	; 0x237c <Dem_SetOperationCycleState>
			cyclestate = DEM_CYCLE_STATE_START;
    29c8:	ee 24       	eor	r14, r14
    29ca:	e3 94       	inc	r14
    29cc:	f1 2c       	mov	r15, r1
    29ce:	12 c0       	rjmp	.+36     	; 0x29f4 <main+0xc6>
		}
		else if ((GPIO_readPin(PORTD_ID,PIN4_ID)== 0)&&(cyclestate!=DEM_CYCLE_STATE_END)){
    29d0:	64 e0       	ldi	r22, 0x04	; 4
    29d2:	83 e0       	ldi	r24, 0x03	; 3
    29d4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <GPIO_readPin>
    29d8:	81 11       	cpse	r24, r1
    29da:	0c c0       	rjmp	.+24     	; 0x29f4 <main+0xc6>
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	e8 16       	cp	r14, r24
    29e0:	f1 04       	cpc	r15, r1
    29e2:	41 f0       	breq	.+16     	; 0x29f4 <main+0xc6>
			Dem_SetOperationCycleState(DEM_POWER, DEM_CYCLE_STATE_END);
    29e4:	62 e0       	ldi	r22, 0x02	; 2
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	0e 94 be 11 	call	0x237c	; 0x237c <Dem_SetOperationCycleState>
			cyclestate = DEM_CYCLE_STATE_END;
    29ec:	68 94       	set
    29ee:	ee 24       	eor	r14, r14
    29f0:	e1 f8       	bld	r14, 1
    29f2:	f1 2c       	mov	r15, r1
		}
		
		
		if((mytemp>=10)&&(mytemp<50))
    29f4:	86 ef       	ldi	r24, 0xF6	; 246
    29f6:	81 0f       	add	r24, r17
    29f8:	88 32       	cpi	r24, 0x28	; 40
    29fa:	08 f0       	brcs	.+2      	; 0x29fe <main+0xd0>
    29fc:	84 c0       	rjmp	.+264    	; 0x2b06 <main+0x1d8>
		{
			
			Dem_SetEventStatus(DEM_EVENT_ID_LOW_OIL_PRESSURE, DEM_EVENT_STATUS_PASSED);
    29fe:	60 e0       	ldi	r22, 0x00	; 0
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 b3 11 	call	0x2366	; 0x2366 <Dem_SetEventStatus>
			
			/*If temperature is less than 30, Turn off FAN and display its state and temperature on LCD*/

		LCD_moveCursor(0,1);
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[0]);
    2a10:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a12:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a14:	80 81       	ld	r24, Z
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

		LCD_moveCursor(0,4);
    2a1c:	64 e0       	ldi	r22, 0x04	; 4
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[1]);
    2a24:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a26:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a28:	81 81       	ldd	r24, Z+1	; 0x01
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(0,6);
    2a30:	66 e0       	ldi	r22, 0x06	; 6
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[2]);
    2a38:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a3a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

		
		LCD_moveCursor(0,9);
    2a44:	69 e0       	ldi	r22, 0x09	; 9
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(0);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(0,10);
    2a54:	6a e0       	ldi	r22, 0x0A	; 10
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[3]);
    2a5c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a5e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a60:	83 81       	ldd	r24, Z+3	; 0x03
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(0,11);
    2a68:	6b e0       	ldi	r22, 0x0B	; 11
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[4]);
    2a70:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a72:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a74:	84 81       	ldd	r24, Z+4	; 0x04
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(0,13);
    2a7c:	6d e0       	ldi	r22, 0x0D	; 13
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[5]);
    2a84:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a86:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a88:	85 81       	ldd	r24, Z+5	; 0x05
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		
		LCD_moveCursor(1,2);
    2a90:	62 e0       	ldi	r22, 0x02	; 2
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[6]);
    2a98:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2a9a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2a9c:	86 81       	ldd	r24, Z+6	; 0x06
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(1,5);
    2aa4:	65 e0       	ldi	r22, 0x05	; 5
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(0);
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

		LCD_moveCursor(1,6);
    2ab4:	66 e0       	ldi	r22, 0x06	; 6
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[7]);
    2abc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2abe:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ac0:	87 81       	ldd	r24, Z+7	; 0x07
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(1,7);
    2ac8:	67 e0       	ldi	r22, 0x07	; 7
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[8]);
    2ad0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2ad2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ad4:	80 85       	ldd	r24, Z+8	; 0x08
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(1,9);
    2adc:	69 e0       	ldi	r22, 0x09	; 9
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[9]);
    2ae4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2ae6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ae8:	81 85       	ldd	r24, Z+9	; 0x09
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		
		LCD_moveCursor(1,12);
    2af0:	6c e0       	ldi	r22, 0x0C	; 12
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
		LCD_intgerToString(TxData.DataPtr[10]);
    2af8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2afa:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2afc:	82 85       	ldd	r24, Z+10	; 0x0a
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
    2b04:	83 c0       	rjmp	.+262    	; 0x2c0c <main+0x2de>
			
			
		}
		else
		{
			Dem_SetEventStatus(DEM_EVENT_ID_LOW_OIL_PRESSURE, DEM_EVENT_STATUS_FAILED);
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	0e 94 b3 11 	call	0x2366	; 0x2366 <Dem_SetEventStatus>
			
			
					LCD_moveCursor(0,1);
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[0]);
    2b18:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b1a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b1c:	80 81       	ld	r24, Z
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

					LCD_moveCursor(0,4);
    2b24:	64 e0       	ldi	r22, 0x04	; 4
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[1]);
    2b2c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b2e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b30:	81 81       	ldd	r24, Z+1	; 0x01
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(0,6);
    2b38:	66 e0       	ldi	r22, 0x06	; 6
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[2]);
    2b40:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b42:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b44:	82 81       	ldd	r24, Z+2	; 0x02
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

					
					LCD_moveCursor(0,9);
    2b4c:	69 e0       	ldi	r22, 0x09	; 9
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(0,10);
    2b5c:	6a e0       	ldi	r22, 0x0A	; 10
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[3]);
    2b64:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b66:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b68:	83 81       	ldd	r24, Z+3	; 0x03
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(0,11);
    2b70:	6b e0       	ldi	r22, 0x0B	; 11
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[4]);
    2b78:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b7a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b7c:	84 81       	ldd	r24, Z+4	; 0x04
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(0,13);
    2b84:	6d e0       	ldi	r22, 0x0D	; 13
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[5]);
    2b8c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b8e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b90:	85 81       	ldd	r24, Z+5	; 0x05
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					
					LCD_moveCursor(1,2);
    2b98:	62 e0       	ldi	r22, 0x02	; 2
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[6]);
    2ba0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2ba2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ba4:	86 81       	ldd	r24, Z+6	; 0x06
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(1,5);
    2bac:	65 e0       	ldi	r22, 0x05	; 5
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(0);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

					LCD_moveCursor(1,6);
    2bbc:	66 e0       	ldi	r22, 0x06	; 6
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[7]);
    2bc4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2bc6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2bc8:	87 81       	ldd	r24, Z+7	; 0x07
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(1,7);
    2bd0:	67 e0       	ldi	r22, 0x07	; 7
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[8]);
    2bd8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2bda:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2bdc:	80 85       	ldd	r24, Z+8	; 0x08
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(1,9);
    2be4:	69 e0       	ldi	r22, 0x09	; 9
    2be6:	81 e0       	ldi	r24, 0x01	; 1
    2be8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[9]);
    2bec:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2bee:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2bf0:	81 85       	ldd	r24, Z+9	; 0x09
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
					
					LCD_moveCursor(1,12);
    2bf8:	6c e0       	ldi	r22, 0x0C	; 12
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
					LCD_intgerToString(TxData.DataPtr[10]);
    2c00:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c02:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c04:	82 85       	ldd	r24, Z+10	; 0x0a
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		}
		if(mytemp>=30)
    2c0c:	1e 31       	cpi	r17, 0x1E	; 30
    2c0e:	08 f4       	brcc	.+2      	; 0x2c12 <main+0x2e4>
    2c10:	84 c0       	rjmp	.+264    	; 0x2d1a <main+0x3ec>
		{
			
			Dem_SetEventStatus(DEM_EVENT_ID_ENGINE_OVERHEAT, DEM_EVENT_STATUS_FAILED);
    2c12:	61 e0       	ldi	r22, 0x01	; 1
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	0e 94 b3 11 	call	0x2366	; 0x2366 <Dem_SetEventStatus>
			
						LCD_moveCursor(0,1);
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[0]);
    2c24:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c26:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c28:	80 81       	ld	r24, Z
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

						LCD_moveCursor(0,4);
    2c30:	64 e0       	ldi	r22, 0x04	; 4
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[1]);
    2c38:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c3a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c3c:	81 81       	ldd	r24, Z+1	; 0x01
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,6);
    2c44:	66 e0       	ldi	r22, 0x06	; 6
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[2]);
    2c4c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c4e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

						
						LCD_moveCursor(0,9);
    2c58:	69 e0       	ldi	r22, 0x09	; 9
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(0);
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,10);
    2c68:	6a e0       	ldi	r22, 0x0A	; 10
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[3]);
    2c70:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c72:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c74:	83 81       	ldd	r24, Z+3	; 0x03
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,11);
    2c7c:	6b e0       	ldi	r22, 0x0B	; 11
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[4]);
    2c84:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c86:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c88:	84 81       	ldd	r24, Z+4	; 0x04
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,13);
    2c90:	6d e0       	ldi	r22, 0x0D	; 13
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[5]);
    2c98:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2c9a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c9c:	85 81       	ldd	r24, Z+5	; 0x05
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						
						LCD_moveCursor(1,2);
    2ca4:	62 e0       	ldi	r22, 0x02	; 2
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[6]);
    2cac:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2cae:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2cb0:	86 81       	ldd	r24, Z+6	; 0x06
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,5);
    2cb8:	65 e0       	ldi	r22, 0x05	; 5
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(0);
    2cc0:	80 e0       	ldi	r24, 0x00	; 0
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

						LCD_moveCursor(1,6);
    2cc8:	66 e0       	ldi	r22, 0x06	; 6
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[7]);
    2cd0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2cd2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2cd4:	87 81       	ldd	r24, Z+7	; 0x07
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,7);
    2cdc:	67 e0       	ldi	r22, 0x07	; 7
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[8]);
    2ce4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2ce6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ce8:	80 85       	ldd	r24, Z+8	; 0x08
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,9);
    2cf0:	69 e0       	ldi	r22, 0x09	; 9
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[9]);
    2cf8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2cfa:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2cfc:	81 85       	ldd	r24, Z+9	; 0x09
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,12);
    2d04:	6c e0       	ldi	r22, 0x0C	; 12
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[10]);
    2d0c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2d0e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2d10:	82 85       	ldd	r24, Z+10	; 0x0a
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
    2d18:	83 c0       	rjmp	.+262    	; 0x2e20 <main+0x4f2>
		}
		else {
			Dem_SetEventStatus(DEM_EVENT_ID_ENGINE_OVERHEAT, DEM_EVENT_STATUS_PASSED);
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 b3 11 	call	0x2366	; 0x2366 <Dem_SetEventStatus>
			
			
						LCD_moveCursor(0,1);
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[0]);
    2d2c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2d2e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2d30:	80 81       	ld	r24, Z
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

						LCD_moveCursor(0,4);
    2d38:	64 e0       	ldi	r22, 0x04	; 4
    2d3a:	80 e0       	ldi	r24, 0x00	; 0
    2d3c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[1]);
    2d40:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2d42:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2d44:	81 81       	ldd	r24, Z+1	; 0x01
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,6);
    2d4c:	66 e0       	ldi	r22, 0x06	; 6
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[2]);
    2d54:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2d56:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2d58:	82 81       	ldd	r24, Z+2	; 0x02
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

						
						LCD_moveCursor(0,9);
    2d60:	69 e0       	ldi	r22, 0x09	; 9
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(0);
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,10);
    2d70:	6a e0       	ldi	r22, 0x0A	; 10
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[3]);
    2d78:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2d7a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2d7c:	83 81       	ldd	r24, Z+3	; 0x03
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,11);
    2d84:	6b e0       	ldi	r22, 0x0B	; 11
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[4]);
    2d8c:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2d8e:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2d90:	84 81       	ldd	r24, Z+4	; 0x04
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(0,13);
    2d98:	6d e0       	ldi	r22, 0x0D	; 13
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[5]);
    2da0:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2da2:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2da4:	85 81       	ldd	r24, Z+5	; 0x05
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						
						LCD_moveCursor(1,2);
    2dac:	62 e0       	ldi	r22, 0x02	; 2
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[6]);
    2db4:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2db6:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2db8:	86 81       	ldd	r24, Z+6	; 0x06
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,5);
    2dc0:	65 e0       	ldi	r22, 0x05	; 5
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(0);
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>

						LCD_moveCursor(1,6);
    2dd0:	66 e0       	ldi	r22, 0x06	; 6
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[7]);
    2dd8:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2dda:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2ddc:	87 81       	ldd	r24, Z+7	; 0x07
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,7);
    2de4:	67 e0       	ldi	r22, 0x07	; 7
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[8]);
    2dec:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2dee:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2df0:	80 85       	ldd	r24, Z+8	; 0x08
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,9);
    2df8:	69 e0       	ldi	r22, 0x09	; 9
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[9]);
    2e00:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2e02:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2e04:	81 85       	ldd	r24, Z+9	; 0x09
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
						
						LCD_moveCursor(1,12);
    2e0c:	6c e0       	ldi	r22, 0x0C	; 12
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	0e 94 f7 18 	call	0x31ee	; 0x31ee <LCD_moveCursor>
						LCD_intgerToString(TxData.DataPtr[10]);
    2e14:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2e16:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2e18:	82 85       	ldd	r24, Z+10	; 0x0a
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	0e 94 0e 19 	call	0x321c	; 0x321c <LCD_intgerToString>
		}
			DspUdsReadDtcInformation(&RxData, &TxData);
    2e20:	be 01       	movw	r22, r28
    2e22:	64 5e       	subi	r22, 0xE4	; 228
    2e24:	7f 4f       	sbci	r23, 0xFF	; 255
    2e26:	ce 01       	movw	r24, r28
    2e28:	48 96       	adiw	r24, 0x18	; 24
    2e2a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <DspUdsReadDtcInformation>
	}
    2e2e:	bc cd       	rjmp	.-1160   	; 0x29a8 <main+0x7a>

00002e30 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2e30:	68 30       	cpi	r22, 0x08	; 8
    2e32:	08 f0       	brcs	.+2      	; 0x2e36 <GPIO_setupPinDirection+0x6>
    2e34:	6f c0       	rjmp	.+222    	; 0x2f14 <GPIO_setupPinDirection+0xe4>
    2e36:	84 30       	cpi	r24, 0x04	; 4
    2e38:	08 f0       	brcs	.+2      	; 0x2e3c <GPIO_setupPinDirection+0xc>
    2e3a:	6c c0       	rjmp	.+216    	; 0x2f14 <GPIO_setupPinDirection+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2e3c:	81 30       	cpi	r24, 0x01	; 1
    2e3e:	01 f1       	breq	.+64     	; 0x2e80 <GPIO_setupPinDirection+0x50>
    2e40:	30 f0       	brcs	.+12     	; 0x2e4e <GPIO_setupPinDirection+0x1e>
    2e42:	82 30       	cpi	r24, 0x02	; 2
    2e44:	b1 f1       	breq	.+108    	; 0x2eb2 <GPIO_setupPinDirection+0x82>
    2e46:	83 30       	cpi	r24, 0x03	; 3
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <GPIO_setupPinDirection+0x1c>
    2e4a:	4c c0       	rjmp	.+152    	; 0x2ee4 <GPIO_setupPinDirection+0xb4>
    2e4c:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2e4e:	41 30       	cpi	r20, 0x01	; 1
    2e50:	59 f4       	brne	.+22     	; 0x2e68 <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
    2e52:	2a b3       	in	r18, 0x1a	; 26
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <GPIO_setupPinDirection+0x2e>
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	6a 95       	dec	r22
    2e60:	e2 f7       	brpl	.-8      	; 0x2e5a <GPIO_setupPinDirection+0x2a>
    2e62:	82 2b       	or	r24, r18
    2e64:	8a bb       	out	0x1a, r24	; 26
    2e66:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2e68:	2a b3       	in	r18, 0x1a	; 26
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <GPIO_setupPinDirection+0x44>
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	6a 95       	dec	r22
    2e76:	e2 f7       	brpl	.-8      	; 0x2e70 <GPIO_setupPinDirection+0x40>
    2e78:	80 95       	com	r24
    2e7a:	82 23       	and	r24, r18
    2e7c:	8a bb       	out	0x1a, r24	; 26
    2e7e:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2e80:	41 30       	cpi	r20, 0x01	; 1
    2e82:	59 f4       	brne	.+22     	; 0x2e9a <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
    2e84:	27 b3       	in	r18, 0x17	; 23
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <GPIO_setupPinDirection+0x60>
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	6a 95       	dec	r22
    2e92:	e2 f7       	brpl	.-8      	; 0x2e8c <GPIO_setupPinDirection+0x5c>
    2e94:	82 2b       	or	r24, r18
    2e96:	87 bb       	out	0x17, r24	; 23
    2e98:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2e9a:	27 b3       	in	r18, 0x17	; 23
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <GPIO_setupPinDirection+0x76>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	6a 95       	dec	r22
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <GPIO_setupPinDirection+0x72>
    2eaa:	80 95       	com	r24
    2eac:	82 23       	and	r24, r18
    2eae:	87 bb       	out	0x17, r24	; 23
    2eb0:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2eb2:	41 30       	cpi	r20, 0x01	; 1
    2eb4:	59 f4       	brne	.+22     	; 0x2ecc <GPIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
    2eb6:	24 b3       	in	r18, 0x14	; 20
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <GPIO_setupPinDirection+0x92>
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	6a 95       	dec	r22
    2ec4:	e2 f7       	brpl	.-8      	; 0x2ebe <GPIO_setupPinDirection+0x8e>
    2ec6:	82 2b       	or	r24, r18
    2ec8:	84 bb       	out	0x14, r24	; 20
    2eca:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2ecc:	24 b3       	in	r18, 0x14	; 20
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <GPIO_setupPinDirection+0xa8>
    2ed4:	88 0f       	add	r24, r24
    2ed6:	99 1f       	adc	r25, r25
    2ed8:	6a 95       	dec	r22
    2eda:	e2 f7       	brpl	.-8      	; 0x2ed4 <GPIO_setupPinDirection+0xa4>
    2edc:	80 95       	com	r24
    2ede:	82 23       	and	r24, r18
    2ee0:	84 bb       	out	0x14, r24	; 20
    2ee2:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2ee4:	41 30       	cpi	r20, 0x01	; 1
    2ee6:	59 f4       	brne	.+22     	; 0x2efe <GPIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
    2ee8:	21 b3       	in	r18, 0x11	; 17
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	02 c0       	rjmp	.+4      	; 0x2ef4 <GPIO_setupPinDirection+0xc4>
    2ef0:	88 0f       	add	r24, r24
    2ef2:	99 1f       	adc	r25, r25
    2ef4:	6a 95       	dec	r22
    2ef6:	e2 f7       	brpl	.-8      	; 0x2ef0 <GPIO_setupPinDirection+0xc0>
    2ef8:	82 2b       	or	r24, r18
    2efa:	81 bb       	out	0x11, r24	; 17
    2efc:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2efe:	21 b3       	in	r18, 0x11	; 17
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <GPIO_setupPinDirection+0xda>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	6a 95       	dec	r22
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <GPIO_setupPinDirection+0xd6>
    2f0e:	80 95       	com	r24
    2f10:	82 23       	and	r24, r18
    2f12:	81 bb       	out	0x11, r24	; 17
    2f14:	08 95       	ret

00002f16 <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2f16:	68 30       	cpi	r22, 0x08	; 8
    2f18:	08 f0       	brcs	.+2      	; 0x2f1c <GPIO_writePin+0x6>
    2f1a:	6f c0       	rjmp	.+222    	; 0x2ffa <GPIO_writePin+0xe4>
    2f1c:	84 30       	cpi	r24, 0x04	; 4
    2f1e:	08 f0       	brcs	.+2      	; 0x2f22 <GPIO_writePin+0xc>
    2f20:	6c c0       	rjmp	.+216    	; 0x2ffa <GPIO_writePin+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2f22:	81 30       	cpi	r24, 0x01	; 1
    2f24:	01 f1       	breq	.+64     	; 0x2f66 <GPIO_writePin+0x50>
    2f26:	30 f0       	brcs	.+12     	; 0x2f34 <GPIO_writePin+0x1e>
    2f28:	82 30       	cpi	r24, 0x02	; 2
    2f2a:	b1 f1       	breq	.+108    	; 0x2f98 <GPIO_writePin+0x82>
    2f2c:	83 30       	cpi	r24, 0x03	; 3
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <GPIO_writePin+0x1c>
    2f30:	4c c0       	rjmp	.+152    	; 0x2fca <GPIO_writePin+0xb4>
    2f32:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2f34:	41 30       	cpi	r20, 0x01	; 1
    2f36:	59 f4       	brne	.+22     	; 0x2f4e <GPIO_writePin+0x38>
			{
				SET_BIT(PORTA,pin_num);
    2f38:	2b b3       	in	r18, 0x1b	; 27
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <GPIO_writePin+0x2e>
    2f40:	88 0f       	add	r24, r24
    2f42:	99 1f       	adc	r25, r25
    2f44:	6a 95       	dec	r22
    2f46:	e2 f7       	brpl	.-8      	; 0x2f40 <GPIO_writePin+0x2a>
    2f48:	82 2b       	or	r24, r18
    2f4a:	8b bb       	out	0x1b, r24	; 27
    2f4c:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2f4e:	2b b3       	in	r18, 0x1b	; 27
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <GPIO_writePin+0x44>
    2f56:	88 0f       	add	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	6a 95       	dec	r22
    2f5c:	e2 f7       	brpl	.-8      	; 0x2f56 <GPIO_writePin+0x40>
    2f5e:	80 95       	com	r24
    2f60:	82 23       	and	r24, r18
    2f62:	8b bb       	out	0x1b, r24	; 27
    2f64:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2f66:	41 30       	cpi	r20, 0x01	; 1
    2f68:	59 f4       	brne	.+22     	; 0x2f80 <GPIO_writePin+0x6a>
			{
				SET_BIT(PORTB,pin_num);
    2f6a:	28 b3       	in	r18, 0x18	; 24
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <GPIO_writePin+0x60>
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	6a 95       	dec	r22
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <GPIO_writePin+0x5c>
    2f7a:	82 2b       	or	r24, r18
    2f7c:	88 bb       	out	0x18, r24	; 24
    2f7e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2f80:	28 b3       	in	r18, 0x18	; 24
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <GPIO_writePin+0x76>
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	6a 95       	dec	r22
    2f8e:	e2 f7       	brpl	.-8      	; 0x2f88 <GPIO_writePin+0x72>
    2f90:	80 95       	com	r24
    2f92:	82 23       	and	r24, r18
    2f94:	88 bb       	out	0x18, r24	; 24
    2f96:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2f98:	41 30       	cpi	r20, 0x01	; 1
    2f9a:	59 f4       	brne	.+22     	; 0x2fb2 <GPIO_writePin+0x9c>
			{
				SET_BIT(PORTC,pin_num);
    2f9c:	25 b3       	in	r18, 0x15	; 21
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <GPIO_writePin+0x92>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	6a 95       	dec	r22
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <GPIO_writePin+0x8e>
    2fac:	82 2b       	or	r24, r18
    2fae:	85 bb       	out	0x15, r24	; 21
    2fb0:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2fb2:	25 b3       	in	r18, 0x15	; 21
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <GPIO_writePin+0xa8>
    2fba:	88 0f       	add	r24, r24
    2fbc:	99 1f       	adc	r25, r25
    2fbe:	6a 95       	dec	r22
    2fc0:	e2 f7       	brpl	.-8      	; 0x2fba <GPIO_writePin+0xa4>
    2fc2:	80 95       	com	r24
    2fc4:	82 23       	and	r24, r18
    2fc6:	85 bb       	out	0x15, r24	; 21
    2fc8:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2fca:	41 30       	cpi	r20, 0x01	; 1
    2fcc:	59 f4       	brne	.+22     	; 0x2fe4 <GPIO_writePin+0xce>
			{
				SET_BIT(PORTD,pin_num);
    2fce:	22 b3       	in	r18, 0x12	; 18
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <GPIO_writePin+0xc4>
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	6a 95       	dec	r22
    2fdc:	e2 f7       	brpl	.-8      	; 0x2fd6 <GPIO_writePin+0xc0>
    2fde:	82 2b       	or	r24, r18
    2fe0:	82 bb       	out	0x12, r24	; 18
    2fe2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2fe4:	22 b3       	in	r18, 0x12	; 18
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <GPIO_writePin+0xda>
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	6a 95       	dec	r22
    2ff2:	e2 f7       	brpl	.-8      	; 0x2fec <GPIO_writePin+0xd6>
    2ff4:	80 95       	com	r24
    2ff6:	82 23       	and	r24, r18
    2ff8:	82 bb       	out	0x12, r24	; 18
    2ffa:	08 95       	ret

00002ffc <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2ffc:	68 30       	cpi	r22, 0x08	; 8
    2ffe:	b0 f5       	brcc	.+108    	; 0x306c <GPIO_readPin+0x70>
    3000:	84 30       	cpi	r24, 0x04	; 4
    3002:	b0 f5       	brcc	.+108    	; 0x3070 <GPIO_readPin+0x74>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    3004:	81 30       	cpi	r24, 0x01	; 1
    3006:	89 f0       	breq	.+34     	; 0x302a <GPIO_readPin+0x2e>
    3008:	28 f0       	brcs	.+10     	; 0x3014 <GPIO_readPin+0x18>
    300a:	82 30       	cpi	r24, 0x02	; 2
    300c:	c9 f0       	breq	.+50     	; 0x3040 <GPIO_readPin+0x44>
    300e:	83 30       	cpi	r24, 0x03	; 3
    3010:	11 f1       	breq	.+68     	; 0x3056 <GPIO_readPin+0x5a>
    3012:	30 c0       	rjmp	.+96     	; 0x3074 <GPIO_readPin+0x78>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    3014:	89 b3       	in	r24, 0x19	; 25
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	02 c0       	rjmp	.+4      	; 0x301e <GPIO_readPin+0x22>
    301a:	95 95       	asr	r25
    301c:	87 95       	ror	r24
    301e:	6a 95       	dec	r22
    3020:	e2 f7       	brpl	.-8      	; 0x301a <GPIO_readPin+0x1e>
    3022:	80 ff       	sbrs	r24, 0
    3024:	29 c0       	rjmp	.+82     	; 0x3078 <GPIO_readPin+0x7c>
			{
				pin_value = LOGIC_HIGH;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    302a:	86 b3       	in	r24, 0x16	; 22
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <GPIO_readPin+0x38>
    3030:	95 95       	asr	r25
    3032:	87 95       	ror	r24
    3034:	6a 95       	dec	r22
    3036:	e2 f7       	brpl	.-8      	; 0x3030 <GPIO_readPin+0x34>
    3038:	80 ff       	sbrs	r24, 0
    303a:	20 c0       	rjmp	.+64     	; 0x307c <GPIO_readPin+0x80>
			{
				pin_value = LOGIC_HIGH;
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    3040:	83 b3       	in	r24, 0x13	; 19
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	02 c0       	rjmp	.+4      	; 0x304a <GPIO_readPin+0x4e>
    3046:	95 95       	asr	r25
    3048:	87 95       	ror	r24
    304a:	6a 95       	dec	r22
    304c:	e2 f7       	brpl	.-8      	; 0x3046 <GPIO_readPin+0x4a>
    304e:	80 ff       	sbrs	r24, 0
    3050:	17 c0       	rjmp	.+46     	; 0x3080 <GPIO_readPin+0x84>
			{
				pin_value = LOGIC_HIGH;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3056:	80 b3       	in	r24, 0x10	; 16
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	02 c0       	rjmp	.+4      	; 0x3060 <GPIO_readPin+0x64>
    305c:	95 95       	asr	r25
    305e:	87 95       	ror	r24
    3060:	6a 95       	dec	r22
    3062:	e2 f7       	brpl	.-8      	; 0x305c <GPIO_readPin+0x60>
    3064:	80 ff       	sbrs	r24, 0
    3066:	0e c0       	rjmp	.+28     	; 0x3084 <GPIO_readPin+0x88>
			{
				pin_value = LOGIC_HIGH;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	08 95       	ret
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
	uint8 pin_value = LOGIC_LOW;
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	08 95       	ret
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	08 95       	ret
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
    3084:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
    3086:	08 95       	ret

00003088 <GPIO_setupPortDirection>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3088:	84 30       	cpi	r24, 0x04	; 4
    308a:	78 f4       	brcc	.+30     	; 0x30aa <GPIO_setupPortDirection+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	41 f0       	breq	.+16     	; 0x30a0 <GPIO_setupPortDirection+0x18>
    3090:	28 f0       	brcs	.+10     	; 0x309c <GPIO_setupPortDirection+0x14>
    3092:	82 30       	cpi	r24, 0x02	; 2
    3094:	39 f0       	breq	.+14     	; 0x30a4 <GPIO_setupPortDirection+0x1c>
    3096:	83 30       	cpi	r24, 0x03	; 3
    3098:	39 f0       	breq	.+14     	; 0x30a8 <GPIO_setupPortDirection+0x20>
    309a:	08 95       	ret
		{
		case PORTA_ID:
			DDRA = direction;
    309c:	6a bb       	out	0x1a, r22	; 26
			break;
    309e:	08 95       	ret
		case PORTB_ID:
			DDRB = direction;
    30a0:	67 bb       	out	0x17, r22	; 23
			break;
    30a2:	08 95       	ret
		case PORTC_ID:
			DDRC = direction;
    30a4:	64 bb       	out	0x14, r22	; 20
			break;
    30a6:	08 95       	ret
		case PORTD_ID:
			DDRD = direction;
    30a8:	61 bb       	out	0x11, r22	; 17
    30aa:	08 95       	ret

000030ac <GPIO_writePort>:
{
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    30ac:	84 30       	cpi	r24, 0x04	; 4
    30ae:	78 f4       	brcc	.+30     	; 0x30ce <GPIO_writePort+0x22>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	41 f0       	breq	.+16     	; 0x30c4 <GPIO_writePort+0x18>
    30b4:	28 f0       	brcs	.+10     	; 0x30c0 <GPIO_writePort+0x14>
    30b6:	82 30       	cpi	r24, 0x02	; 2
    30b8:	39 f0       	breq	.+14     	; 0x30c8 <GPIO_writePort+0x1c>
    30ba:	83 30       	cpi	r24, 0x03	; 3
    30bc:	39 f0       	breq	.+14     	; 0x30cc <GPIO_writePort+0x20>
    30be:	08 95       	ret
		{
		case PORTA_ID:
			PORTA = value;
    30c0:	6b bb       	out	0x1b, r22	; 27
			break;
    30c2:	08 95       	ret
		case PORTB_ID:
			PORTB = value;
    30c4:	68 bb       	out	0x18, r22	; 24
			break;
    30c6:	08 95       	ret
		case PORTC_ID:
			PORTC = value;
    30c8:	65 bb       	out	0x15, r22	; 21
			break;
    30ca:	08 95       	ret
		case PORTD_ID:
			PORTD = value;
    30cc:	62 bb       	out	0x12, r22	; 18
    30ce:	08 95       	ret

000030d0 <LCD_sendCommand>:
}
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
    30d0:	cf 93       	push	r28
    30d2:	c8 2f       	mov	r28, r24
    30d4:	40 e0       	ldi	r20, 0x00	; 0
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    30de:	89 ef       	ldi	r24, 0xF9	; 249
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	f1 f7       	brne	.-4      	; 0x30e2 <LCD_sendCommand+0x12>
    30e6:	00 c0       	rjmp	.+0      	; 0x30e8 <LCD_sendCommand+0x18>
    30e8:	00 00       	nop
    30ea:	41 e0       	ldi	r20, 0x01	; 1
    30ec:	62 e0       	ldi	r22, 0x02	; 2
    30ee:	83 e0       	ldi	r24, 0x03	; 3
    30f0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    30f4:	89 ef       	ldi	r24, 0xF9	; 249
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <LCD_sendCommand+0x28>
    30fc:	00 c0       	rjmp	.+0      	; 0x30fe <LCD_sendCommand+0x2e>
    30fe:	00 00       	nop
    3100:	6c 2f       	mov	r22, r28
    3102:	82 e0       	ldi	r24, 0x02	; 2
    3104:	0e 94 56 18 	call	0x30ac	; 0x30ac <GPIO_writePort>
    3108:	89 ef       	ldi	r24, 0xF9	; 249
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	01 97       	sbiw	r24, 0x01	; 1
    310e:	f1 f7       	brne	.-4      	; 0x310c <LCD_sendCommand+0x3c>
    3110:	00 c0       	rjmp	.+0      	; 0x3112 <LCD_sendCommand+0x42>
    3112:	00 00       	nop
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	62 e0       	ldi	r22, 0x02	; 2
    3118:	83 e0       	ldi	r24, 0x03	; 3
    311a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    311e:	89 ef       	ldi	r24, 0xF9	; 249
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <LCD_sendCommand+0x52>
    3126:	00 c0       	rjmp	.+0      	; 0x3128 <LCD_sendCommand+0x58>
    3128:	00 00       	nop
    312a:	cf 91       	pop	r28
    312c:	08 95       	ret

0000312e <LCD_init>:
    312e:	41 e0       	ldi	r20, 0x01	; 1
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	83 e0       	ldi	r24, 0x03	; 3
    3134:	0e 94 18 17 	call	0x2e30	; 0x2e30 <GPIO_setupPinDirection>
    3138:	41 e0       	ldi	r20, 0x01	; 1
    313a:	62 e0       	ldi	r22, 0x02	; 2
    313c:	83 e0       	ldi	r24, 0x03	; 3
    313e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <GPIO_setupPinDirection>
    3142:	87 e8       	ldi	r24, 0x87	; 135
    3144:	93 e1       	ldi	r25, 0x13	; 19
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <LCD_init+0x18>
    314a:	00 c0       	rjmp	.+0      	; 0x314c <LCD_init+0x1e>
    314c:	00 00       	nop
    314e:	6f ef       	ldi	r22, 0xFF	; 255
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	0e 94 44 18 	call	0x3088	; 0x3088 <GPIO_setupPortDirection>
    3156:	88 e3       	ldi	r24, 0x38	; 56
    3158:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LCD_sendCommand>
    315c:	8c e0       	ldi	r24, 0x0C	; 12
    315e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LCD_sendCommand>
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LCD_sendCommand>
    3168:	08 95       	ret

0000316a <LCD_displayCharacter>:
    316a:	cf 93       	push	r28
    316c:	c8 2f       	mov	r28, r24
    316e:	41 e0       	ldi	r20, 0x01	; 1
    3170:	60 e0       	ldi	r22, 0x00	; 0
    3172:	83 e0       	ldi	r24, 0x03	; 3
    3174:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    3178:	89 ef       	ldi	r24, 0xF9	; 249
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <LCD_displayCharacter+0x12>
    3180:	00 c0       	rjmp	.+0      	; 0x3182 <LCD_displayCharacter+0x18>
    3182:	00 00       	nop
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	62 e0       	ldi	r22, 0x02	; 2
    3188:	83 e0       	ldi	r24, 0x03	; 3
    318a:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    318e:	89 ef       	ldi	r24, 0xF9	; 249
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <LCD_displayCharacter+0x28>
    3196:	00 c0       	rjmp	.+0      	; 0x3198 <LCD_displayCharacter+0x2e>
    3198:	00 00       	nop
    319a:	6c 2f       	mov	r22, r28
    319c:	82 e0       	ldi	r24, 0x02	; 2
    319e:	0e 94 56 18 	call	0x30ac	; 0x30ac <GPIO_writePort>
    31a2:	89 ef       	ldi	r24, 0xF9	; 249
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <LCD_displayCharacter+0x3c>
    31aa:	00 c0       	rjmp	.+0      	; 0x31ac <LCD_displayCharacter+0x42>
    31ac:	00 00       	nop
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	62 e0       	ldi	r22, 0x02	; 2
    31b2:	83 e0       	ldi	r24, 0x03	; 3
    31b4:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    31b8:	89 ef       	ldi	r24, 0xF9	; 249
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <LCD_displayCharacter+0x52>
    31c0:	00 c0       	rjmp	.+0      	; 0x31c2 <LCD_displayCharacter+0x58>
    31c2:	00 00       	nop
    31c4:	cf 91       	pop	r28
    31c6:	08 95       	ret

000031c8 <LCD_displayString>:
    31c8:	0f 93       	push	r16
    31ca:	1f 93       	push	r17
    31cc:	cf 93       	push	r28
    31ce:	8c 01       	movw	r16, r24
    31d0:	c0 e0       	ldi	r28, 0x00	; 0
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <LCD_displayString+0x12>
    31d4:	0e 94 b5 18 	call	0x316a	; 0x316a <LCD_displayCharacter>
    31d8:	cf 5f       	subi	r28, 0xFF	; 255
    31da:	f8 01       	movw	r30, r16
    31dc:	ec 0f       	add	r30, r28
    31de:	f1 1d       	adc	r31, r1
    31e0:	80 81       	ld	r24, Z
    31e2:	81 11       	cpse	r24, r1
    31e4:	f7 cf       	rjmp	.-18     	; 0x31d4 <LCD_displayString+0xc>
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	08 95       	ret

000031ee <LCD_moveCursor>:
    31ee:	81 30       	cpi	r24, 0x01	; 1
    31f0:	31 f0       	breq	.+12     	; 0x31fe <LCD_moveCursor+0x10>
    31f2:	70 f0       	brcs	.+28     	; 0x3210 <LCD_moveCursor+0x22>
    31f4:	82 30       	cpi	r24, 0x02	; 2
    31f6:	31 f0       	breq	.+12     	; 0x3204 <LCD_moveCursor+0x16>
    31f8:	83 30       	cpi	r24, 0x03	; 3
    31fa:	39 f0       	breq	.+14     	; 0x320a <LCD_moveCursor+0x1c>
    31fc:	0a c0       	rjmp	.+20     	; 0x3212 <LCD_moveCursor+0x24>
    31fe:	90 e4       	ldi	r25, 0x40	; 64
    3200:	96 0f       	add	r25, r22
    3202:	07 c0       	rjmp	.+14     	; 0x3212 <LCD_moveCursor+0x24>
    3204:	90 e1       	ldi	r25, 0x10	; 16
    3206:	96 0f       	add	r25, r22
    3208:	04 c0       	rjmp	.+8      	; 0x3212 <LCD_moveCursor+0x24>
    320a:	90 e5       	ldi	r25, 0x50	; 80
    320c:	96 0f       	add	r25, r22
    320e:	01 c0       	rjmp	.+2      	; 0x3212 <LCD_moveCursor+0x24>
    3210:	96 2f       	mov	r25, r22
    3212:	89 2f       	mov	r24, r25
    3214:	80 68       	ori	r24, 0x80	; 128
    3216:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LCD_sendCommand>
    321a:	08 95       	ret

0000321c <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	cd b7       	in	r28, 0x3d	; 61
    3222:	de b7       	in	r29, 0x3e	; 62
    3224:	60 97       	sbiw	r28, 0x10	; 16
    3226:	0f b6       	in	r0, 0x3f	; 63
    3228:	f8 94       	cli
    322a:	de bf       	out	0x3e, r29	; 62
    322c:	0f be       	out	0x3f, r0	; 63
    322e:	cd bf       	out	0x3d, r28	; 61
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,16); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3230:	40 e1       	ldi	r20, 0x10	; 16
    3232:	50 e0       	ldi	r21, 0x00	; 0
    3234:	be 01       	movw	r22, r28
    3236:	6f 5f       	subi	r22, 0xFF	; 255
    3238:	7f 4f       	sbci	r23, 0xFF	; 255
    323a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <itoa>
   LCD_displayString(buff); /* Display the string */
    323e:	ce 01       	movw	r24, r28
    3240:	01 96       	adiw	r24, 0x01	; 1
    3242:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_displayString>
}
    3246:	60 96       	adiw	r28, 0x10	; 16
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	f8 94       	cli
    324c:	de bf       	out	0x3e, r29	; 62
    324e:	0f be       	out	0x3f, r0	; 63
    3250:	cd bf       	out	0x3d, r28	; 61
    3252:	df 91       	pop	r29
    3254:	cf 91       	pop	r28
    3256:	08 95       	ret

00003258 <LM35_getTemperature>:
	uint8 temp_value = 0;

	uint16 adc_value = 0;

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	0e 94 75 00 	call	0xea	; 0xea <ADC_readChannel>

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    325e:	9c 01       	movw	r18, r24
    3260:	a6 e9       	ldi	r26, 0x96	; 150
    3262:	b0 e0       	ldi	r27, 0x00	; 0
    3264:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <__umulhisi3>
    3268:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <__floatunsisf>
    326c:	2a e0       	ldi	r18, 0x0A	; 10
    326e:	37 ed       	ldi	r19, 0xD7	; 215
    3270:	43 e2       	ldi	r20, 0x23	; 35
    3272:	50 e4       	ldi	r21, 0x40	; 64
    3274:	0e 94 8a 1a 	call	0x3514	; 0x3514 <__mulsf3>
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 ed       	ldi	r19, 0xD0	; 208
    327c:	4f eb       	ldi	r20, 0xBF	; 191
    327e:	54 e4       	ldi	r21, 0x44	; 68
    3280:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <__divsf3>
    3284:	0e 94 cd 19 	call	0x339a	; 0x339a <__fixunssfsi>
    3288:	86 2f       	mov	r24, r22

	return temp_value;
}
    328a:	08 95       	ret

0000328c <DcMotor_Init>:


void DcMotor_Init(void)
{
/*Motor input port and pins set*/
GPIO_setupPinDirection(MOTOR_IN_PORT_ID,MOTOR_IN1_PIN_ID,PIN_DIRECTION);
    328c:	41 e0       	ldi	r20, 0x01	; 1
    328e:	60 e0       	ldi	r22, 0x00	; 0
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	0e 94 18 17 	call	0x2e30	; 0x2e30 <GPIO_setupPinDirection>
GPIO_setupPinDirection(MOTOR_IN_PORT_ID,MOTOR_IN2_PIN_ID,PIN_DIRECTION);
    3296:	41 e0       	ldi	r20, 0x01	; 1
    3298:	61 e0       	ldi	r22, 0x01	; 1
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	0e 94 18 17 	call	0x2e30	; 0x2e30 <GPIO_setupPinDirection>
GPIO_writePin(MOTOR_IN_PORT_ID,MOTOR_IN1_PIN_ID ,LOGIC_LOW);
    32a0:	40 e0       	ldi	r20, 0x00	; 0
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	81 e0       	ldi	r24, 0x01	; 1
    32a6:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
GPIO_writePin(MOTOR_IN_PORT_ID,MOTOR_IN2_PIN_ID ,LOGIC_LOW);
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	61 e0       	ldi	r22, 0x01	; 1
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <GPIO_writePin>
    32b4:	08 95       	ret

000032b6 <__divsf3>:
    32b6:	0e 94 6f 19 	call	0x32de	; 0x32de <__divsf3x>
    32ba:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_round>
    32be:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fp_pscB>
    32c2:	58 f0       	brcs	.+22     	; 0x32da <__divsf3+0x24>
    32c4:	0e 94 42 1a 	call	0x3484	; 0x3484 <__fp_pscA>
    32c8:	40 f0       	brcs	.+16     	; 0x32da <__divsf3+0x24>
    32ca:	29 f4       	brne	.+10     	; 0x32d6 <__divsf3+0x20>
    32cc:	5f 3f       	cpi	r21, 0xFF	; 255
    32ce:	29 f0       	breq	.+10     	; 0x32da <__divsf3+0x24>
    32d0:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__fp_inf>
    32d4:	51 11       	cpse	r21, r1
    32d6:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__fp_szero>
    32da:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_nan>

000032de <__divsf3x>:
    32de:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__fp_split3>
    32e2:	68 f3       	brcs	.-38     	; 0x32be <__divsf3+0x8>

000032e4 <__divsf3_pse>:
    32e4:	99 23       	and	r25, r25
    32e6:	b1 f3       	breq	.-20     	; 0x32d4 <__divsf3+0x1e>
    32e8:	55 23       	and	r21, r21
    32ea:	91 f3       	breq	.-28     	; 0x32d0 <__divsf3+0x1a>
    32ec:	95 1b       	sub	r25, r21
    32ee:	55 0b       	sbc	r21, r21
    32f0:	bb 27       	eor	r27, r27
    32f2:	aa 27       	eor	r26, r26
    32f4:	62 17       	cp	r22, r18
    32f6:	73 07       	cpc	r23, r19
    32f8:	84 07       	cpc	r24, r20
    32fa:	38 f0       	brcs	.+14     	; 0x330a <__divsf3_pse+0x26>
    32fc:	9f 5f       	subi	r25, 0xFF	; 255
    32fe:	5f 4f       	sbci	r21, 0xFF	; 255
    3300:	22 0f       	add	r18, r18
    3302:	33 1f       	adc	r19, r19
    3304:	44 1f       	adc	r20, r20
    3306:	aa 1f       	adc	r26, r26
    3308:	a9 f3       	breq	.-22     	; 0x32f4 <__divsf3_pse+0x10>
    330a:	35 d0       	rcall	.+106    	; 0x3376 <__divsf3_pse+0x92>
    330c:	0e 2e       	mov	r0, r30
    330e:	3a f0       	brmi	.+14     	; 0x331e <__divsf3_pse+0x3a>
    3310:	e0 e8       	ldi	r30, 0x80	; 128
    3312:	32 d0       	rcall	.+100    	; 0x3378 <__divsf3_pse+0x94>
    3314:	91 50       	subi	r25, 0x01	; 1
    3316:	50 40       	sbci	r21, 0x00	; 0
    3318:	e6 95       	lsr	r30
    331a:	00 1c       	adc	r0, r0
    331c:	ca f7       	brpl	.-14     	; 0x3310 <__divsf3_pse+0x2c>
    331e:	2b d0       	rcall	.+86     	; 0x3376 <__divsf3_pse+0x92>
    3320:	fe 2f       	mov	r31, r30
    3322:	29 d0       	rcall	.+82     	; 0x3376 <__divsf3_pse+0x92>
    3324:	66 0f       	add	r22, r22
    3326:	77 1f       	adc	r23, r23
    3328:	88 1f       	adc	r24, r24
    332a:	bb 1f       	adc	r27, r27
    332c:	26 17       	cp	r18, r22
    332e:	37 07       	cpc	r19, r23
    3330:	48 07       	cpc	r20, r24
    3332:	ab 07       	cpc	r26, r27
    3334:	b0 e8       	ldi	r27, 0x80	; 128
    3336:	09 f0       	breq	.+2      	; 0x333a <__divsf3_pse+0x56>
    3338:	bb 0b       	sbc	r27, r27
    333a:	80 2d       	mov	r24, r0
    333c:	bf 01       	movw	r22, r30
    333e:	ff 27       	eor	r31, r31
    3340:	93 58       	subi	r25, 0x83	; 131
    3342:	5f 4f       	sbci	r21, 0xFF	; 255
    3344:	3a f0       	brmi	.+14     	; 0x3354 <__divsf3_pse+0x70>
    3346:	9e 3f       	cpi	r25, 0xFE	; 254
    3348:	51 05       	cpc	r21, r1
    334a:	78 f0       	brcs	.+30     	; 0x336a <__divsf3_pse+0x86>
    334c:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__fp_inf>
    3350:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__fp_szero>
    3354:	5f 3f       	cpi	r21, 0xFF	; 255
    3356:	e4 f3       	brlt	.-8      	; 0x3350 <__divsf3_pse+0x6c>
    3358:	98 3e       	cpi	r25, 0xE8	; 232
    335a:	d4 f3       	brlt	.-12     	; 0x3350 <__divsf3_pse+0x6c>
    335c:	86 95       	lsr	r24
    335e:	77 95       	ror	r23
    3360:	67 95       	ror	r22
    3362:	b7 95       	ror	r27
    3364:	f7 95       	ror	r31
    3366:	9f 5f       	subi	r25, 0xFF	; 255
    3368:	c9 f7       	brne	.-14     	; 0x335c <__divsf3_pse+0x78>
    336a:	88 0f       	add	r24, r24
    336c:	91 1d       	adc	r25, r1
    336e:	96 95       	lsr	r25
    3370:	87 95       	ror	r24
    3372:	97 f9       	bld	r25, 7
    3374:	08 95       	ret
    3376:	e1 e0       	ldi	r30, 0x01	; 1
    3378:	66 0f       	add	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	bb 1f       	adc	r27, r27
    3380:	62 17       	cp	r22, r18
    3382:	73 07       	cpc	r23, r19
    3384:	84 07       	cpc	r24, r20
    3386:	ba 07       	cpc	r27, r26
    3388:	20 f0       	brcs	.+8      	; 0x3392 <__divsf3_pse+0xae>
    338a:	62 1b       	sub	r22, r18
    338c:	73 0b       	sbc	r23, r19
    338e:	84 0b       	sbc	r24, r20
    3390:	ba 0b       	sbc	r27, r26
    3392:	ee 1f       	adc	r30, r30
    3394:	88 f7       	brcc	.-30     	; 0x3378 <__divsf3_pse+0x94>
    3396:	e0 95       	com	r30
    3398:	08 95       	ret

0000339a <__fixunssfsi>:
    339a:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__fp_splitA>
    339e:	88 f0       	brcs	.+34     	; 0x33c2 <__fixunssfsi+0x28>
    33a0:	9f 57       	subi	r25, 0x7F	; 127
    33a2:	98 f0       	brcs	.+38     	; 0x33ca <__fixunssfsi+0x30>
    33a4:	b9 2f       	mov	r27, r25
    33a6:	99 27       	eor	r25, r25
    33a8:	b7 51       	subi	r27, 0x17	; 23
    33aa:	b0 f0       	brcs	.+44     	; 0x33d8 <__fixunssfsi+0x3e>
    33ac:	e1 f0       	breq	.+56     	; 0x33e6 <__fixunssfsi+0x4c>
    33ae:	66 0f       	add	r22, r22
    33b0:	77 1f       	adc	r23, r23
    33b2:	88 1f       	adc	r24, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	1a f0       	brmi	.+6      	; 0x33be <__fixunssfsi+0x24>
    33b8:	ba 95       	dec	r27
    33ba:	c9 f7       	brne	.-14     	; 0x33ae <__fixunssfsi+0x14>
    33bc:	14 c0       	rjmp	.+40     	; 0x33e6 <__fixunssfsi+0x4c>
    33be:	b1 30       	cpi	r27, 0x01	; 1
    33c0:	91 f0       	breq	.+36     	; 0x33e6 <__fixunssfsi+0x4c>
    33c2:	0e 94 83 1a 	call	0x3506	; 0x3506 <__fp_zero>
    33c6:	b1 e0       	ldi	r27, 0x01	; 1
    33c8:	08 95       	ret
    33ca:	0c 94 83 1a 	jmp	0x3506	; 0x3506 <__fp_zero>
    33ce:	67 2f       	mov	r22, r23
    33d0:	78 2f       	mov	r23, r24
    33d2:	88 27       	eor	r24, r24
    33d4:	b8 5f       	subi	r27, 0xF8	; 248
    33d6:	39 f0       	breq	.+14     	; 0x33e6 <__fixunssfsi+0x4c>
    33d8:	b9 3f       	cpi	r27, 0xF9	; 249
    33da:	cc f3       	brlt	.-14     	; 0x33ce <__fixunssfsi+0x34>
    33dc:	86 95       	lsr	r24
    33de:	77 95       	ror	r23
    33e0:	67 95       	ror	r22
    33e2:	b3 95       	inc	r27
    33e4:	d9 f7       	brne	.-10     	; 0x33dc <__fixunssfsi+0x42>
    33e6:	3e f4       	brtc	.+14     	; 0x33f6 <__fixunssfsi+0x5c>
    33e8:	90 95       	com	r25
    33ea:	80 95       	com	r24
    33ec:	70 95       	com	r23
    33ee:	61 95       	neg	r22
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	8f 4f       	sbci	r24, 0xFF	; 255
    33f4:	9f 4f       	sbci	r25, 0xFF	; 255
    33f6:	08 95       	ret

000033f8 <__floatunsisf>:
    33f8:	e8 94       	clt
    33fa:	09 c0       	rjmp	.+18     	; 0x340e <__floatsisf+0x12>

000033fc <__floatsisf>:
    33fc:	97 fb       	bst	r25, 7
    33fe:	3e f4       	brtc	.+14     	; 0x340e <__floatsisf+0x12>
    3400:	90 95       	com	r25
    3402:	80 95       	com	r24
    3404:	70 95       	com	r23
    3406:	61 95       	neg	r22
    3408:	7f 4f       	sbci	r23, 0xFF	; 255
    340a:	8f 4f       	sbci	r24, 0xFF	; 255
    340c:	9f 4f       	sbci	r25, 0xFF	; 255
    340e:	99 23       	and	r25, r25
    3410:	a9 f0       	breq	.+42     	; 0x343c <__floatsisf+0x40>
    3412:	f9 2f       	mov	r31, r25
    3414:	96 e9       	ldi	r25, 0x96	; 150
    3416:	bb 27       	eor	r27, r27
    3418:	93 95       	inc	r25
    341a:	f6 95       	lsr	r31
    341c:	87 95       	ror	r24
    341e:	77 95       	ror	r23
    3420:	67 95       	ror	r22
    3422:	b7 95       	ror	r27
    3424:	f1 11       	cpse	r31, r1
    3426:	f8 cf       	rjmp	.-16     	; 0x3418 <__floatsisf+0x1c>
    3428:	fa f4       	brpl	.+62     	; 0x3468 <__floatsisf+0x6c>
    342a:	bb 0f       	add	r27, r27
    342c:	11 f4       	brne	.+4      	; 0x3432 <__floatsisf+0x36>
    342e:	60 ff       	sbrs	r22, 0
    3430:	1b c0       	rjmp	.+54     	; 0x3468 <__floatsisf+0x6c>
    3432:	6f 5f       	subi	r22, 0xFF	; 255
    3434:	7f 4f       	sbci	r23, 0xFF	; 255
    3436:	8f 4f       	sbci	r24, 0xFF	; 255
    3438:	9f 4f       	sbci	r25, 0xFF	; 255
    343a:	16 c0       	rjmp	.+44     	; 0x3468 <__floatsisf+0x6c>
    343c:	88 23       	and	r24, r24
    343e:	11 f0       	breq	.+4      	; 0x3444 <__floatsisf+0x48>
    3440:	96 e9       	ldi	r25, 0x96	; 150
    3442:	11 c0       	rjmp	.+34     	; 0x3466 <__floatsisf+0x6a>
    3444:	77 23       	and	r23, r23
    3446:	21 f0       	breq	.+8      	; 0x3450 <__floatsisf+0x54>
    3448:	9e e8       	ldi	r25, 0x8E	; 142
    344a:	87 2f       	mov	r24, r23
    344c:	76 2f       	mov	r23, r22
    344e:	05 c0       	rjmp	.+10     	; 0x345a <__floatsisf+0x5e>
    3450:	66 23       	and	r22, r22
    3452:	71 f0       	breq	.+28     	; 0x3470 <__floatsisf+0x74>
    3454:	96 e8       	ldi	r25, 0x86	; 134
    3456:	86 2f       	mov	r24, r22
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	2a f0       	brmi	.+10     	; 0x3468 <__floatsisf+0x6c>
    345e:	9a 95       	dec	r25
    3460:	66 0f       	add	r22, r22
    3462:	77 1f       	adc	r23, r23
    3464:	88 1f       	adc	r24, r24
    3466:	da f7       	brpl	.-10     	; 0x345e <__floatsisf+0x62>
    3468:	88 0f       	add	r24, r24
    346a:	96 95       	lsr	r25
    346c:	87 95       	ror	r24
    346e:	97 f9       	bld	r25, 7
    3470:	08 95       	ret

00003472 <__fp_inf>:
    3472:	97 f9       	bld	r25, 7
    3474:	9f 67       	ori	r25, 0x7F	; 127
    3476:	80 e8       	ldi	r24, 0x80	; 128
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	08 95       	ret

0000347e <__fp_nan>:
    347e:	9f ef       	ldi	r25, 0xFF	; 255
    3480:	80 ec       	ldi	r24, 0xC0	; 192
    3482:	08 95       	ret

00003484 <__fp_pscA>:
    3484:	00 24       	eor	r0, r0
    3486:	0a 94       	dec	r0
    3488:	16 16       	cp	r1, r22
    348a:	17 06       	cpc	r1, r23
    348c:	18 06       	cpc	r1, r24
    348e:	09 06       	cpc	r0, r25
    3490:	08 95       	ret

00003492 <__fp_pscB>:
    3492:	00 24       	eor	r0, r0
    3494:	0a 94       	dec	r0
    3496:	12 16       	cp	r1, r18
    3498:	13 06       	cpc	r1, r19
    349a:	14 06       	cpc	r1, r20
    349c:	05 06       	cpc	r0, r21
    349e:	08 95       	ret

000034a0 <__fp_round>:
    34a0:	09 2e       	mov	r0, r25
    34a2:	03 94       	inc	r0
    34a4:	00 0c       	add	r0, r0
    34a6:	11 f4       	brne	.+4      	; 0x34ac <__fp_round+0xc>
    34a8:	88 23       	and	r24, r24
    34aa:	52 f0       	brmi	.+20     	; 0x34c0 <__fp_round+0x20>
    34ac:	bb 0f       	add	r27, r27
    34ae:	40 f4       	brcc	.+16     	; 0x34c0 <__fp_round+0x20>
    34b0:	bf 2b       	or	r27, r31
    34b2:	11 f4       	brne	.+4      	; 0x34b8 <__fp_round+0x18>
    34b4:	60 ff       	sbrs	r22, 0
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <__fp_round+0x20>
    34b8:	6f 5f       	subi	r22, 0xFF	; 255
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	8f 4f       	sbci	r24, 0xFF	; 255
    34be:	9f 4f       	sbci	r25, 0xFF	; 255
    34c0:	08 95       	ret

000034c2 <__fp_split3>:
    34c2:	57 fd       	sbrc	r21, 7
    34c4:	90 58       	subi	r25, 0x80	; 128
    34c6:	44 0f       	add	r20, r20
    34c8:	55 1f       	adc	r21, r21
    34ca:	59 f0       	breq	.+22     	; 0x34e2 <__fp_splitA+0x10>
    34cc:	5f 3f       	cpi	r21, 0xFF	; 255
    34ce:	71 f0       	breq	.+28     	; 0x34ec <__fp_splitA+0x1a>
    34d0:	47 95       	ror	r20

000034d2 <__fp_splitA>:
    34d2:	88 0f       	add	r24, r24
    34d4:	97 fb       	bst	r25, 7
    34d6:	99 1f       	adc	r25, r25
    34d8:	61 f0       	breq	.+24     	; 0x34f2 <__fp_splitA+0x20>
    34da:	9f 3f       	cpi	r25, 0xFF	; 255
    34dc:	79 f0       	breq	.+30     	; 0x34fc <__fp_splitA+0x2a>
    34de:	87 95       	ror	r24
    34e0:	08 95       	ret
    34e2:	12 16       	cp	r1, r18
    34e4:	13 06       	cpc	r1, r19
    34e6:	14 06       	cpc	r1, r20
    34e8:	55 1f       	adc	r21, r21
    34ea:	f2 cf       	rjmp	.-28     	; 0x34d0 <__fp_split3+0xe>
    34ec:	46 95       	lsr	r20
    34ee:	f1 df       	rcall	.-30     	; 0x34d2 <__fp_splitA>
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <__fp_splitA+0x30>
    34f2:	16 16       	cp	r1, r22
    34f4:	17 06       	cpc	r1, r23
    34f6:	18 06       	cpc	r1, r24
    34f8:	99 1f       	adc	r25, r25
    34fa:	f1 cf       	rjmp	.-30     	; 0x34de <__fp_splitA+0xc>
    34fc:	86 95       	lsr	r24
    34fe:	71 05       	cpc	r23, r1
    3500:	61 05       	cpc	r22, r1
    3502:	08 94       	sec
    3504:	08 95       	ret

00003506 <__fp_zero>:
    3506:	e8 94       	clt

00003508 <__fp_szero>:
    3508:	bb 27       	eor	r27, r27
    350a:	66 27       	eor	r22, r22
    350c:	77 27       	eor	r23, r23
    350e:	cb 01       	movw	r24, r22
    3510:	97 f9       	bld	r25, 7
    3512:	08 95       	ret

00003514 <__mulsf3>:
    3514:	0e 94 9d 1a 	call	0x353a	; 0x353a <__mulsf3x>
    3518:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__fp_round>
    351c:	0e 94 42 1a 	call	0x3484	; 0x3484 <__fp_pscA>
    3520:	38 f0       	brcs	.+14     	; 0x3530 <__mulsf3+0x1c>
    3522:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fp_pscB>
    3526:	20 f0       	brcs	.+8      	; 0x3530 <__mulsf3+0x1c>
    3528:	95 23       	and	r25, r21
    352a:	11 f0       	breq	.+4      	; 0x3530 <__mulsf3+0x1c>
    352c:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__fp_inf>
    3530:	0c 94 3f 1a 	jmp	0x347e	; 0x347e <__fp_nan>
    3534:	11 24       	eor	r1, r1
    3536:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__fp_szero>

0000353a <__mulsf3x>:
    353a:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <__fp_split3>
    353e:	70 f3       	brcs	.-36     	; 0x351c <__mulsf3+0x8>

00003540 <__mulsf3_pse>:
    3540:	95 9f       	mul	r25, r21
    3542:	c1 f3       	breq	.-16     	; 0x3534 <__mulsf3+0x20>
    3544:	95 0f       	add	r25, r21
    3546:	50 e0       	ldi	r21, 0x00	; 0
    3548:	55 1f       	adc	r21, r21
    354a:	62 9f       	mul	r22, r18
    354c:	f0 01       	movw	r30, r0
    354e:	72 9f       	mul	r23, r18
    3550:	bb 27       	eor	r27, r27
    3552:	f0 0d       	add	r31, r0
    3554:	b1 1d       	adc	r27, r1
    3556:	63 9f       	mul	r22, r19
    3558:	aa 27       	eor	r26, r26
    355a:	f0 0d       	add	r31, r0
    355c:	b1 1d       	adc	r27, r1
    355e:	aa 1f       	adc	r26, r26
    3560:	64 9f       	mul	r22, r20
    3562:	66 27       	eor	r22, r22
    3564:	b0 0d       	add	r27, r0
    3566:	a1 1d       	adc	r26, r1
    3568:	66 1f       	adc	r22, r22
    356a:	82 9f       	mul	r24, r18
    356c:	22 27       	eor	r18, r18
    356e:	b0 0d       	add	r27, r0
    3570:	a1 1d       	adc	r26, r1
    3572:	62 1f       	adc	r22, r18
    3574:	73 9f       	mul	r23, r19
    3576:	b0 0d       	add	r27, r0
    3578:	a1 1d       	adc	r26, r1
    357a:	62 1f       	adc	r22, r18
    357c:	83 9f       	mul	r24, r19
    357e:	a0 0d       	add	r26, r0
    3580:	61 1d       	adc	r22, r1
    3582:	22 1f       	adc	r18, r18
    3584:	74 9f       	mul	r23, r20
    3586:	33 27       	eor	r19, r19
    3588:	a0 0d       	add	r26, r0
    358a:	61 1d       	adc	r22, r1
    358c:	23 1f       	adc	r18, r19
    358e:	84 9f       	mul	r24, r20
    3590:	60 0d       	add	r22, r0
    3592:	21 1d       	adc	r18, r1
    3594:	82 2f       	mov	r24, r18
    3596:	76 2f       	mov	r23, r22
    3598:	6a 2f       	mov	r22, r26
    359a:	11 24       	eor	r1, r1
    359c:	9f 57       	subi	r25, 0x7F	; 127
    359e:	50 40       	sbci	r21, 0x00	; 0
    35a0:	9a f0       	brmi	.+38     	; 0x35c8 <__mulsf3_pse+0x88>
    35a2:	f1 f0       	breq	.+60     	; 0x35e0 <__mulsf3_pse+0xa0>
    35a4:	88 23       	and	r24, r24
    35a6:	4a f0       	brmi	.+18     	; 0x35ba <__mulsf3_pse+0x7a>
    35a8:	ee 0f       	add	r30, r30
    35aa:	ff 1f       	adc	r31, r31
    35ac:	bb 1f       	adc	r27, r27
    35ae:	66 1f       	adc	r22, r22
    35b0:	77 1f       	adc	r23, r23
    35b2:	88 1f       	adc	r24, r24
    35b4:	91 50       	subi	r25, 0x01	; 1
    35b6:	50 40       	sbci	r21, 0x00	; 0
    35b8:	a9 f7       	brne	.-22     	; 0x35a4 <__mulsf3_pse+0x64>
    35ba:	9e 3f       	cpi	r25, 0xFE	; 254
    35bc:	51 05       	cpc	r21, r1
    35be:	80 f0       	brcs	.+32     	; 0x35e0 <__mulsf3_pse+0xa0>
    35c0:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__fp_inf>
    35c4:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__fp_szero>
    35c8:	5f 3f       	cpi	r21, 0xFF	; 255
    35ca:	e4 f3       	brlt	.-8      	; 0x35c4 <__mulsf3_pse+0x84>
    35cc:	98 3e       	cpi	r25, 0xE8	; 232
    35ce:	d4 f3       	brlt	.-12     	; 0x35c4 <__mulsf3_pse+0x84>
    35d0:	86 95       	lsr	r24
    35d2:	77 95       	ror	r23
    35d4:	67 95       	ror	r22
    35d6:	b7 95       	ror	r27
    35d8:	f7 95       	ror	r31
    35da:	e7 95       	ror	r30
    35dc:	9f 5f       	subi	r25, 0xFF	; 255
    35de:	c1 f7       	brne	.-16     	; 0x35d0 <__mulsf3_pse+0x90>
    35e0:	fe 2b       	or	r31, r30
    35e2:	88 0f       	add	r24, r24
    35e4:	91 1d       	adc	r25, r1
    35e6:	96 95       	lsr	r25
    35e8:	87 95       	ror	r24
    35ea:	97 f9       	bld	r25, 7
    35ec:	08 95       	ret

000035ee <__tablejump2__>:
    35ee:	ee 0f       	add	r30, r30
    35f0:	ff 1f       	adc	r31, r31
    35f2:	05 90       	lpm	r0, Z+
    35f4:	f4 91       	lpm	r31, Z
    35f6:	e0 2d       	mov	r30, r0
    35f8:	09 94       	ijmp

000035fa <__umulhisi3>:
    35fa:	a2 9f       	mul	r26, r18
    35fc:	b0 01       	movw	r22, r0
    35fe:	b3 9f       	mul	r27, r19
    3600:	c0 01       	movw	r24, r0
    3602:	a3 9f       	mul	r26, r19
    3604:	70 0d       	add	r23, r0
    3606:	81 1d       	adc	r24, r1
    3608:	11 24       	eor	r1, r1
    360a:	91 1d       	adc	r25, r1
    360c:	b2 9f       	mul	r27, r18
    360e:	70 0d       	add	r23, r0
    3610:	81 1d       	adc	r24, r1
    3612:	11 24       	eor	r1, r1
    3614:	91 1d       	adc	r25, r1
    3616:	08 95       	ret

00003618 <memcpy>:
    3618:	fb 01       	movw	r30, r22
    361a:	dc 01       	movw	r26, r24
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <memcpy+0xa>
    361e:	01 90       	ld	r0, Z+
    3620:	0d 92       	st	X+, r0
    3622:	41 50       	subi	r20, 0x01	; 1
    3624:	50 40       	sbci	r21, 0x00	; 0
    3626:	d8 f7       	brcc	.-10     	; 0x361e <memcpy+0x6>
    3628:	08 95       	ret

0000362a <memset>:
    362a:	dc 01       	movw	r26, r24
    362c:	01 c0       	rjmp	.+2      	; 0x3630 <memset+0x6>
    362e:	6d 93       	st	X+, r22
    3630:	41 50       	subi	r20, 0x01	; 1
    3632:	50 40       	sbci	r21, 0x00	; 0
    3634:	e0 f7       	brcc	.-8      	; 0x362e <memset+0x4>
    3636:	08 95       	ret

00003638 <itoa>:
    3638:	45 32       	cpi	r20, 0x25	; 37
    363a:	51 05       	cpc	r21, r1
    363c:	20 f4       	brcc	.+8      	; 0x3646 <itoa+0xe>
    363e:	42 30       	cpi	r20, 0x02	; 2
    3640:	10 f0       	brcs	.+4      	; 0x3646 <itoa+0xe>
    3642:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__itoa_ncheck>
    3646:	fb 01       	movw	r30, r22
    3648:	10 82       	st	Z, r1
    364a:	cb 01       	movw	r24, r22
    364c:	08 95       	ret

0000364e <__itoa_ncheck>:
    364e:	bb 27       	eor	r27, r27
    3650:	4a 30       	cpi	r20, 0x0A	; 10
    3652:	31 f4       	brne	.+12     	; 0x3660 <__itoa_ncheck+0x12>
    3654:	99 23       	and	r25, r25
    3656:	22 f4       	brpl	.+8      	; 0x3660 <__itoa_ncheck+0x12>
    3658:	bd e2       	ldi	r27, 0x2D	; 45
    365a:	90 95       	com	r25
    365c:	81 95       	neg	r24
    365e:	9f 4f       	sbci	r25, 0xFF	; 255
    3660:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__utoa_common>

00003664 <__utoa_ncheck>:
    3664:	bb 27       	eor	r27, r27

00003666 <__utoa_common>:
    3666:	fb 01       	movw	r30, r22
    3668:	55 27       	eor	r21, r21
    366a:	aa 27       	eor	r26, r26
    366c:	88 0f       	add	r24, r24
    366e:	99 1f       	adc	r25, r25
    3670:	aa 1f       	adc	r26, r26
    3672:	a4 17       	cp	r26, r20
    3674:	10 f0       	brcs	.+4      	; 0x367a <__utoa_common+0x14>
    3676:	a4 1b       	sub	r26, r20
    3678:	83 95       	inc	r24
    367a:	50 51       	subi	r21, 0x10	; 16
    367c:	b9 f7       	brne	.-18     	; 0x366c <__utoa_common+0x6>
    367e:	a0 5d       	subi	r26, 0xD0	; 208
    3680:	aa 33       	cpi	r26, 0x3A	; 58
    3682:	08 f0       	brcs	.+2      	; 0x3686 <__utoa_common+0x20>
    3684:	a9 5d       	subi	r26, 0xD9	; 217
    3686:	a1 93       	st	Z+, r26
    3688:	00 97       	sbiw	r24, 0x00	; 0
    368a:	79 f7       	brne	.-34     	; 0x366a <__utoa_common+0x4>
    368c:	b1 11       	cpse	r27, r1
    368e:	b1 93       	st	Z+, r27
    3690:	11 92       	st	Z+, r1
    3692:	cb 01       	movw	r24, r22
    3694:	0c 94 4c 1b 	jmp	0x3698	; 0x3698 <strrev>

00003698 <strrev>:
    3698:	dc 01       	movw	r26, r24
    369a:	fc 01       	movw	r30, r24
    369c:	67 2f       	mov	r22, r23
    369e:	71 91       	ld	r23, Z+
    36a0:	77 23       	and	r23, r23
    36a2:	e1 f7       	brne	.-8      	; 0x369c <strrev+0x4>
    36a4:	32 97       	sbiw	r30, 0x02	; 2
    36a6:	04 c0       	rjmp	.+8      	; 0x36b0 <strrev+0x18>
    36a8:	7c 91       	ld	r23, X
    36aa:	6d 93       	st	X+, r22
    36ac:	70 83       	st	Z, r23
    36ae:	62 91       	ld	r22, -Z
    36b0:	ae 17       	cp	r26, r30
    36b2:	bf 07       	cpc	r27, r31
    36b4:	c8 f3       	brcs	.-14     	; 0x36a8 <strrev+0x10>
    36b6:	08 95       	ret

000036b8 <_exit>:
    36b8:	f8 94       	cli

000036ba <__stop_program>:
    36ba:	ff cf       	rjmp	.-2      	; 0x36ba <__stop_program>
